
usb_can_sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007560  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007620  08007620  00017620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007724  08007724  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08007724  08007724  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007724  08007724  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007724  08007724  00017724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800772c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000164  08007890  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d04  08007890  00020d04  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8ba  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000376b  00000000  00000000  0003aa46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  0003e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  0003f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a0f5  00000000  00000000  00040290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011295  00000000  00000000  0005a385  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082d63  00000000  00000000  0006b61a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee37d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  000ee3f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000164 	.word	0x20000164
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007608 	.word	0x08007608

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000168 	.word	0x20000168
 8000104:	08007608 	.word	0x08007608

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <can_data_logger>:
//static void comm_error(void);

usb_message_t usb_q_buf;
volatile uint32_t tx_cnt = 0;
void can_data_logger(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
	//uint32_t i;
	q_status status = q_empty;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]

	while (1)
	{
		//g_can_rx_complete = false;

		status = dequeue(&Q, &usb_q_buf);
 800022c:	1dfc      	adds	r4, r7, #7
 800022e:	4a0e      	ldr	r2, [pc, #56]	; (8000268 <can_data_logger+0x48>)
 8000230:	4b0e      	ldr	r3, [pc, #56]	; (800026c <can_data_logger+0x4c>)
 8000232:	0011      	movs	r1, r2
 8000234:	0018      	movs	r0, r3
 8000236:	f000 f891 	bl	800035c <dequeue>
 800023a:	0003      	movs	r3, r0
 800023c:	7023      	strb	r3, [r4, #0]

		if (status != q_empty)
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f2      	beq.n	800022c <can_data_logger+0xc>
		{
			//while(USB_Send(&usb_q_buf) != COMM_OK);
			USB_Send(&usb_q_buf);
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <can_data_logger+0x48>)
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f943 	bl	80004d4 <USB_Send>
			tx_cnt++;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <can_data_logger+0x50>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	1c5a      	adds	r2, r3, #1
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <can_data_logger+0x50>)
 8000256:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000258:	2390      	movs	r3, #144	; 0x90
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2120      	movs	r1, #32
 800025e:	0018      	movs	r0, r3
 8000260:	f001 fd1d 	bl	8001c9e <HAL_GPIO_TogglePin>
		status = dequeue(&Q, &usb_q_buf);
 8000264:	e7e2      	b.n	800022c <can_data_logger+0xc>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	2000026c 	.word	0x2000026c
 800026c:	20000304 	.word	0x20000304
 8000270:	20000180 	.word	0x20000180

08000274 <message_buffer_init>:
 * Description   : pointer to TX RX buffers
 * Implements    :
 *END**************************************************************************/

void message_buffer_init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	usb_rx_buf.msg.pdata = usb_rx_buf.msg.payload;
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <message_buffer_init+0x40>)
 800027a:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <message_buffer_init+0x44>)
 800027c:	641a      	str	r2, [r3, #64]	; 0x40
	can_tx_buf.pdata = usb_rx_buf.msg.payload;
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <message_buffer_init+0x48>)
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <message_buffer_init+0x44>)
 8000282:	609a      	str	r2, [r3, #8]
	usb_tx_buf.msg.pdata = usb_tx_buf.msg.payload;
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <message_buffer_init+0x4c>)
 8000286:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <message_buffer_init+0x50>)
 8000288:	641a      	str	r2, [r3, #64]	; 0x40
	can_rx_buf.pdata = usb_tx_buf.msg.payload;
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <message_buffer_init+0x54>)
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <message_buffer_init+0x50>)
 800028e:	609a      	str	r2, [r3, #8]

	pre_q_ptr = pre_queue;
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <message_buffer_init+0x58>)
 8000292:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <message_buffer_init+0x5c>)
 8000294:	601a      	str	r2, [r3, #0]
	pre_q_cnt = 0;
 8000296:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <message_buffer_init+0x60>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	Q.front = 0;
 800029c:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <message_buffer_init+0x64>)
 800029e:	2380      	movs	r3, #128	; 0x80
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	2100      	movs	r1, #0
 80002a4:	54d1      	strb	r1, [r2, r3]
	Q.rear = 0;
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <message_buffer_init+0x64>)
 80002a8:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <message_buffer_init+0x68>)
 80002aa:	2100      	movs	r1, #0
 80002ac:	5499      	strb	r1, [r3, r2]
}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	2000051c 	.word	0x2000051c
 80002b8:	20000524 	.word	0x20000524
 80002bc:	20000508 	.word	0x20000508
 80002c0:	200002c0 	.word	0x200002c0
 80002c4:	200002c8 	.word	0x200002c8
 80002c8:	200002b0 	.word	0x200002b0
 80002cc:	2000020c 	.word	0x2000020c
 80002d0:	200001cc 	.word	0x200001cc
 80002d4:	20000210 	.word	0x20000210
 80002d8:	20000304 	.word	0x20000304
 80002dc:	00000201 	.word	0x00000201

080002e0 <enqueue>:
 * Function Name : Queue operation
 * Description   : Q FIFO push-pop
 * Implements    :
 *END**************************************************************************/
void enqueue(queue_t *Q, uint8_t *tx_msg)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
	if ((Q->rear + 1) % Q_MAX_SIZE == Q->front)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a19      	ldr	r2, [pc, #100]	; (8000354 <enqueue+0x74>)
 80002ee:	5c9b      	ldrb	r3, [r3, r2]
 80002f0:	3301      	adds	r3, #1
 80002f2:	4a19      	ldr	r2, [pc, #100]	; (8000358 <enqueue+0x78>)
 80002f4:	4013      	ands	r3, r2
 80002f6:	d504      	bpl.n	8000302 <enqueue+0x22>
 80002f8:	3b01      	subs	r3, #1
 80002fa:	2208      	movs	r2, #8
 80002fc:	4252      	negs	r2, r2
 80002fe:	4313      	orrs	r3, r2
 8000300:	3301      	adds	r3, #1
 8000302:	0019      	movs	r1, r3
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	5cd3      	ldrb	r3, [r2, r3]
 800030c:	4299      	cmp	r1, r3
 800030e:	d101      	bne.n	8000314 <enqueue+0x34>
	{
		//printf("Queue is full!\n");
		//memory run out
		__BKPT(0);
 8000310:	be00      	bkpt	0x0000
	else
	{
		Q->rear = (Q->rear + 1) % Q_MAX_SIZE;
		memcpy(Q->data[Q->rear], tx_msg, USB_PACKET_SIZE);
	}
}
 8000312:	e01a      	b.n	800034a <enqueue+0x6a>
		Q->rear = (Q->rear + 1) % Q_MAX_SIZE;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <enqueue+0x74>)
 8000318:	5c9b      	ldrb	r3, [r3, r2]
 800031a:	3301      	adds	r3, #1
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <enqueue+0x78>)
 800031e:	4013      	ands	r3, r2
 8000320:	d504      	bpl.n	800032c <enqueue+0x4c>
 8000322:	3b01      	subs	r3, #1
 8000324:	2208      	movs	r2, #8
 8000326:	4252      	negs	r2, r2
 8000328:	4313      	orrs	r3, r2
 800032a:	3301      	adds	r3, #1
 800032c:	b2d9      	uxtb	r1, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a08      	ldr	r2, [pc, #32]	; (8000354 <enqueue+0x74>)
 8000332:	5499      	strb	r1, [r3, r2]
		memcpy(Q->data[Q->rear], tx_msg, USB_PACKET_SIZE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <enqueue+0x74>)
 8000338:	5c9b      	ldrb	r3, [r3, r2]
 800033a:	019b      	lsls	r3, r3, #6
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	6839      	ldr	r1, [r7, #0]
 8000342:	2240      	movs	r2, #64	; 0x40
 8000344:	0018      	movs	r0, r3
 8000346:	f007 f94d 	bl	80075e4 <memcpy>
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	00000201 	.word	0x00000201
 8000358:	80000007 	.word	0x80000007

0800035c <dequeue>:

q_status dequeue(queue_t *Q, usb_message_t *tx_msg)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]

	if (Q->front == Q->rear)
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	5cd2      	ldrb	r2, [r2, r3]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	492a      	ldr	r1, [pc, #168]	; (800041c <dequeue+0xc0>)
 8000372:	5c5b      	ldrb	r3, [r3, r1]
 8000374:	429a      	cmp	r2, r3
 8000376:	d127      	bne.n	80003c8 <dequeue+0x6c>
		/*
		 * when Q is emepty, we need to check if data
		 * has been queued in the pre_queue over a period of time.
		 * send them out and reset the pre_q_cnt
		 */
		if ((tim3_cnt > PRE_Q_TIMEOUT) && (pre_q_cnt != 0))
 8000378:	4b29      	ldr	r3, [pc, #164]	; (8000420 <dequeue+0xc4>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	2b64      	cmp	r3, #100	; 0x64
 8000380:	d920      	bls.n	80003c4 <dequeue+0x68>
 8000382:	4b28      	ldr	r3, [pc, #160]	; (8000424 <dequeue+0xc8>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d01c      	beq.n	80003c4 <dequeue+0x68>
		{
			//stop & clear Timer
			TIM32_Stop();
 800038a:	f000 f853 	bl	8000434 <TIM32_Stop>
			//To grab data from pre_queue
#if 0
			memcpy(tx_msg->packet.payload, pre_queue, USB_PACKET_SIZE);
			tx_msg->packet.pk_length = pre_q_cnt * PRE_Q_LENGTH;
#else
			memset(tx_msg->packet.payload, 0, USB_PACKET_SIZE);
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	2240      	movs	r2, #64	; 0x40
 8000392:	2100      	movs	r1, #0
 8000394:	0018      	movs	r0, r3
 8000396:	f007 f92e 	bl	80075f6 <memset>
			memcpy(tx_msg->packet.payload, pre_queue, pre_q_cnt * PRE_Q_LENGTH);
 800039a:	6838      	ldr	r0, [r7, #0]
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <dequeue+0xc8>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	011b      	lsls	r3, r3, #4
 80003a2:	001a      	movs	r2, r3
 80003a4:	4b20      	ldr	r3, [pc, #128]	; (8000428 <dequeue+0xcc>)
 80003a6:	0019      	movs	r1, r3
 80003a8:	f007 f91c 	bl	80075e4 <memcpy>
			tx_msg->packet.pk_length = USB_PACKET_SIZE;
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	2240      	movs	r2, #64	; 0x40
 80003b0:	2140      	movs	r1, #64	; 0x40
 80003b2:	5499      	strb	r1, [r3, r2]
#endif
			//reset pre_q
			pre_q_ptr = pre_queue;
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <dequeue+0xd0>)
 80003b6:	4a1c      	ldr	r2, [pc, #112]	; (8000428 <dequeue+0xcc>)
 80003b8:	601a      	str	r2, [r3, #0]
			pre_q_cnt = 0;
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <dequeue+0xc8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]

			return q_full;
 80003c0:	2304      	movs	r3, #4
 80003c2:	e026      	b.n	8000412 <dequeue+0xb6>
		}
		//printf("Queue is empty!\n");
		return q_empty;
 80003c4:	2300      	movs	r3, #0
 80003c6:	e024      	b.n	8000412 <dequeue+0xb6>
	}
	else
	{
		//stop & clear Timer
		TIM32_Stop();
 80003c8:	f000 f834 	bl	8000434 <TIM32_Stop>

		Q->front = (Q->front + 1) % Q_MAX_SIZE;
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	2380      	movs	r3, #128	; 0x80
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	5cd3      	ldrb	r3, [r2, r3]
 80003d4:	3301      	adds	r3, #1
 80003d6:	4a16      	ldr	r2, [pc, #88]	; (8000430 <dequeue+0xd4>)
 80003d8:	4013      	ands	r3, r2
 80003da:	d504      	bpl.n	80003e6 <dequeue+0x8a>
 80003dc:	3b01      	subs	r3, #1
 80003de:	2208      	movs	r2, #8
 80003e0:	4252      	negs	r2, r2
 80003e2:	4313      	orrs	r3, r2
 80003e4:	3301      	adds	r3, #1
 80003e6:	b2d9      	uxtb	r1, r3
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	54d1      	strb	r1, [r2, r3]
		memcpy(tx_msg->packet.payload, Q->data[Q->front], USB_PACKET_SIZE);
 80003f0:	6838      	ldr	r0, [r7, #0]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	5cd3      	ldrb	r3, [r2, r3]
 80003fa:	019b      	lsls	r3, r3, #6
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	18d3      	adds	r3, r2, r3
 8000400:	2240      	movs	r2, #64	; 0x40
 8000402:	0019      	movs	r1, r3
 8000404:	f007 f8ee 	bl	80075e4 <memcpy>
		tx_msg->packet.pk_length = USB_PACKET_SIZE;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	2240      	movs	r2, #64	; 0x40
 800040c:	2140      	movs	r1, #64	; 0x40
 800040e:	5499      	strb	r1, [r3, r2]
		return q_full;
 8000410:	2304      	movs	r3, #4
	}
}
 8000412:	0018      	movs	r0, r3
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	00000201 	.word	0x00000201
 8000420:	20000186 	.word	0x20000186
 8000424:	20000210 	.word	0x20000210
 8000428:	200001cc 	.word	0x200001cc
 800042c:	2000020c 	.word	0x2000020c
 8000430:	80000007 	.word	0x80000007

08000434 <TIM32_Stop>:
    htim3.Instance->CNT = 0;
}
#endif

void TIM32_Stop(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	/* timer stop and reset */
	while (HAL_TIM_Base_Stop_IT(&htim3) != HAL_OK)
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <TIM32_Stop+0x28>)
 800043c:	0018      	movs	r0, r3
 800043e:	f003 fa81 	bl	8003944 <HAL_TIM_Base_Stop_IT>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d1f9      	bne.n	800043a <TIM32_Stop+0x6>
		;
	htim3.Instance->EGR = 0x0001;
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <TIM32_Stop+0x28>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2201      	movs	r2, #1
 800044c:	615a      	str	r2, [r3, #20]
	htim3.Instance->CNT = 0;
 800044e:	4b03      	ldr	r3, [pc, #12]	; (800045c <TIM32_Stop+0x28>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2200      	movs	r2, #0
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000588 	.word	0x20000588

08000460 <CAN_Filter_Init>:
 * Description   : Filter Init and start
 * Implements    :
 *END**************************************************************************/

void CAN_Filter_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 0;
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <CAN_Filter_Init+0x6c>)
 8000466:	2200      	movs	r2, #0
 8000468:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <CAN_Filter_Init+0x6c>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <CAN_Filter_Init+0x6c>)
 8000472:	2201      	movs	r2, #1
 8000474:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <CAN_Filter_Init+0x6c>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <CAN_Filter_Init+0x6c>)
 800047e:	2200      	movs	r2, #0
 8000480:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <CAN_Filter_Init+0x6c>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <CAN_Filter_Init+0x6c>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <CAN_Filter_Init+0x6c>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <CAN_Filter_Init+0x6c>)
 8000496:	2201      	movs	r2, #1
 8000498:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <CAN_Filter_Init+0x6c>)
 800049c:	220e      	movs	r2, #14
 800049e:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80004a0:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <CAN_Filter_Init+0x6c>)
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <CAN_Filter_Init+0x70>)
 80004a4:	0011      	movs	r1, r2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fd06 	bl	8000eb8 <HAL_CAN_ConfigFilter>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <CAN_Filter_Init+0x54>
	{
		Error_Handler();
 80004b0:	f000 fa6a 	bl	8000988 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan,
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <CAN_Filter_Init+0x70>)
 80004b6:	2103      	movs	r1, #3
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 ff51 	bl	8001360 <HAL_CAN_ActivateNotification>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <CAN_Filter_Init+0x66>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 80004c2:	f000 fa61 	bl	8000988 <Error_Handler>
	}

	//HAL_CAN_Start(&hcan);

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000188 	.word	0x20000188
 80004d0:	20000560 	.word	0x20000560

080004d4 <USB_Send>:
 * Function Name : USB_Send
 * Description   : USB message send
 * Implements    :
 *END**************************************************************************/
uint8_t USB_Send(usb_message_t *message)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]

	uint32_t tickstart = 0U;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]

	tickstart = HAL_GetTick();
 80004e0:	f000 fbc0 	bl	8000c64 <HAL_GetTick>
 80004e4:	0003      	movs	r3, r0
 80004e6:	60fb      	str	r3, [r7, #12]

	while (USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 80004e8:	e00a      	b.n	8000500 <USB_Send+0x2c>
			(uint8_t*) message->packet.payload, message->packet.pk_length)
			!= USBD_OK)
	{
		if ((HAL_GetTick() - tickstart) > COMM_TIMEOUT)
 80004ea:	f000 fbbb 	bl	8000c64 <HAL_GetTick>
 80004ee:	0002      	movs	r2, r0
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	1ad2      	subs	r2, r2, r3
 80004f4:	23fa      	movs	r3, #250	; 0xfa
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d901      	bls.n	8000500 <USB_Send+0x2c>
		{
			//fail to send
			return COMM_FAIL;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e00b      	b.n	8000518 <USB_Send+0x44>
			(uint8_t*) message->packet.payload, message->packet.pk_length)
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2240      	movs	r2, #64	; 0x40
 8000506:	5c9b      	ldrb	r3, [r3, r2]
	while (USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000508:	b29a      	uxth	r2, r3
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <USB_Send+0x4c>)
 800050c:	0018      	movs	r0, r3
 800050e:	f005 f8a3 	bl	8005658 <USBD_CUSTOM_HID_SendReport>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d1e9      	bne.n	80004ea <USB_Send+0x16>
		}
	}
	return COMM_OK;
 8000516:	2300      	movs	r3, #0
}
 8000518:	0018      	movs	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200005cc 	.word	0x200005cc

08000524 <HAL_CAN_TxMailbox0CompleteCallback>:
 * Description   :
 * Implements    :
 *END**************************************************************************/

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	can_tx_complete = 1;
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	20000184 	.word	0x20000184

08000540 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_hd, can_rx_buf.pdata);
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	2100      	movs	r1, #0
 8000552:	f000 fde9 	bl	8001128 <HAL_CAN_GetRxMessage>
	usb_tx_buf.msg.cmd = can_rx_hd.ExtId;
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800055c:	601a      	str	r2, [r3, #0]
	usb_tx_buf.msg.length = can_rx_hd.DLC;
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000560:	691a      	ldr	r2, [r3, #16]
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000564:	605a      	str	r2, [r3, #4]

	memcpy(pre_q_ptr, usb_tx_buf.packet.payload, PRE_Q_LENGTH);
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	491b      	ldr	r1, [pc, #108]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800056c:	2210      	movs	r2, #16
 800056e:	0018      	movs	r0, r3
 8000570:	f007 f838 	bl	80075e4 <memcpy>

	pre_q_ptr += PRE_Q_LENGTH;
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3310      	adds	r3, #16
 800057a:	001a      	movs	r2, r3
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800057e:	601a      	str	r2, [r3, #0]
	pre_q_cnt++;
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800058a:	701a      	strb	r2, [r3, #0]
	if (pre_q_cnt == 1)
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d106      	bne.n	80005a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
	{
		tim3_cnt = 0;
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000596:	2200      	movs	r2, #0
 8000598:	801a      	strh	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800059c:	0018      	movs	r0, r3
 800059e:	f003 f9af 	bl	8003900 <HAL_TIM_Base_Start_IT>
	}
	if (pre_q_cnt == PRE_Q_NUMBER)
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d10b      	bne.n	80005c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
	{
		enqueue(&Q, (uint8_t*) &pre_queue);
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff fe95 	bl	80002e0 <enqueue>
		pre_q_ptr = pre_queue;
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80005ba:	601a      	str	r2, [r3, #0]
		pre_q_cnt = 0;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	}

	g_can_rx_complete = true;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200002b0 	.word	0x200002b0
 80005d4:	200001b0 	.word	0x200001b0
 80005d8:	200002c0 	.word	0x200002c0
 80005dc:	2000020c 	.word	0x2000020c
 80005e0:	20000210 	.word	0x20000210
 80005e4:	20000186 	.word	0x20000186
 80005e8:	20000588 	.word	0x20000588
 80005ec:	200001cc 	.word	0x200001cc
 80005f0:	20000304 	.word	0x20000304
 80005f4:	20000519 	.word	0x20000519

080005f8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000600:	f000 f9c2 	bl	8000988 <Error_Handler>
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}

0800060c <USB_Receive_Callback>:

void USB_Receive_Callback(uint8_t event_idx, uint8_t state)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	0002      	movs	r2, r0
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	1dbb      	adds	r3, r7, #6
 800061a:	1c0a      	adds	r2, r1, #0
 800061c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <USB_Receive_Callback+0x48>)
 8000620:	2201      	movs	r2, #1
 8000622:	2108      	movs	r1, #8
 8000624:	0018      	movs	r0, r3
 8000626:	f001 fb1d 	bl	8001c64 <HAL_GPIO_WritePin>

	USBD_CUSTOM_HID_HandleTypeDef *hhid = hUsbDeviceFS.pClassData;
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <USB_Receive_Callback+0x4c>)
 800062c:	23ae      	movs	r3, #174	; 0xae
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	58d3      	ldr	r3, [r2, r3]
 8000632:	60fb      	str	r3, [r7, #12]
	memcpy(usb_rx_buf.packet.payload, hhid->Report_buf, 64);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <USB_Receive_Callback+0x50>)
 8000638:	0010      	movs	r0, r2
 800063a:	0019      	movs	r1, r3
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	001a      	movs	r2, r3
 8000640:	f006 ffd0 	bl	80075e4 <memcpy>
	g_usb_rx_complete = true;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <USB_Receive_Callback+0x54>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_PRINTF__
	printf("usb data received!\n");
#endif
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b004      	add	sp, #16
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	48000800 	.word	0x48000800
 8000658:	200005cc 	.word	0x200005cc
 800065c:	2000051c 	.word	0x2000051c
 8000660:	20000518 	.word	0x20000518

08000664 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim3_cnt++;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	b29b      	uxth	r3, r3
 800067c:	3301      	adds	r3, #1
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000682:	801a      	strh	r2, [r3, #0]
	}
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b002      	add	sp, #8
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40000400 	.word	0x40000400
 8000690:	20000186 	.word	0x20000186

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fa8a 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f822 	bl	80006e4 <SystemClock_Config>
  initialise_monitor_handles();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f900 	bl	80008a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006a4:	f006 fac4 	bl	8006c30 <MX_USB_DEVICE_Init>
  MX_CAN_Init();
 80006a8:	f000 f870 	bl	800078c <MX_CAN_Init>
  MX_TIM3_Init();
 80006ac:	f000 f8a4 	bl	80007f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Init();
 80006b0:	f7ff fed6 	bl	8000460 <CAN_Filter_Init>
  message_buffer_init();
 80006b4:	f7ff fdde 	bl	8000274 <message_buffer_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 80006b8:	4a08      	ldr	r2, [pc, #32]	; (80006dc <main+0x48>)
 80006ba:	23a7      	movs	r3, #167	; 0xa7
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	5cd3      	ldrb	r3, [r2, r3]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d1f9      	bne.n	80006b8 <main+0x24>
	{
		HAL_Delay(2000);
 80006c4:	23fa      	movs	r3, #250	; 0xfa
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fad5 	bl	8000c78 <HAL_Delay>
		HAL_CAN_Start(&hcan);
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <main+0x4c>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fce3 	bl	800109c <HAL_CAN_Start>
		can_data_logger();
 80006d6:	f7ff fda3 	bl	8000220 <can_data_logger>
	if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 80006da:	e7ed      	b.n	80006b8 <main+0x24>
 80006dc:	200005cc 	.word	0x200005cc
 80006e0:	20000560 	.word	0x20000560

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b099      	sub	sp, #100	; 0x64
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	242c      	movs	r4, #44	; 0x2c
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2334      	movs	r3, #52	; 0x34
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f006 ff7e 	bl	80075f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	231c      	movs	r3, #28
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	0018      	movs	r0, r3
 8000700:	2310      	movs	r3, #16
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f006 ff76 	bl	80075f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070a:	003b      	movs	r3, r7
 800070c:	0018      	movs	r0, r3
 800070e:	231c      	movs	r3, #28
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f006 ff6f 	bl	80075f6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2220      	movs	r2, #32
 800071c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2201      	movs	r2, #1
 8000722:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	193b      	adds	r3, r7, r4
 800072c:	0018      	movs	r0, r3
 800072e:	f002 fadd 	bl	8002cec <HAL_RCC_OscConfig>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000736:	f000 f927 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	211c      	movs	r1, #28
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2207      	movs	r2, #7
 8000740:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2203      	movs	r2, #3
 8000746:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2101      	movs	r1, #1
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fe4d 	bl	80033f8 <HAL_RCC_ClockConfig>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000762:	f000 f911 	bl	8000988 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000766:	003b      	movs	r3, r7
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0292      	lsls	r2, r2, #10
 800076c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800076e:	003b      	movs	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	003b      	movs	r3, r7
 8000776:	0018      	movs	r0, r3
 8000778:	f002 ff96 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000780:	f000 f902 	bl	8000988 <Error_Handler>
  }
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b019      	add	sp, #100	; 0x64
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
#if 1 // 1Mbps
	  hcan.Instance = CAN;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_CAN_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_CAN_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
	  hcan.Init.Prescaler = 12;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_CAN_Init+0x64>)
 8000798:	220c      	movs	r2, #12
 800079a:	605a      	str	r2, [r3, #4]
	  hcan.Init.Mode = CAN_MODE_NORMAL;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_CAN_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
	  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_CAN_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
	  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_CAN_Init+0x64>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	0252      	lsls	r2, r2, #9
 80007ae:	611a      	str	r2, [r3, #16]
	  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_CAN_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
	  hcan.Init.TimeTriggeredMode = DISABLE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_CAN_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	761a      	strb	r2, [r3, #24]
	  hcan.Init.AutoBusOff = DISABLE;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_CAN_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	765a      	strb	r2, [r3, #25]
	  hcan.Init.AutoWakeUp = DISABLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_CAN_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	769a      	strb	r2, [r3, #26]
	  hcan.Init.AutoRetransmission = DISABLE;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_CAN_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	76da      	strb	r2, [r3, #27]
	  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_CAN_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	771a      	strb	r2, [r3, #28]
	  hcan.Init.TransmitFifoPriority = DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_CAN_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	775a      	strb	r2, [r3, #29]
	  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_CAN_Init+0x64>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fa6d 	bl	8000cbc <HAL_CAN_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_CAN_Init+0x5e>
	  {
	    Error_Handler();
 80007e6:	f000 f8cf 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
#endif
  /* USER CODE END CAN_Init 2 */

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000560 	.word	0x20000560
 80007f4:	40006400 	.word	0x40006400

080007f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	2308      	movs	r3, #8
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	2310      	movs	r3, #16
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f006 fef4 	bl	80075f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	2308      	movs	r3, #8
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f006 feed 	bl	80075f6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_TIM3_Init+0xa0>)
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <MX_TIM3_Init+0xa4>)
 8000820:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_TIM3_Init+0xa0>)
 8000824:	222f      	movs	r2, #47	; 0x2f
 8000826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_TIM3_Init+0xa0>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_TIM3_Init+0xa0>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <MX_TIM3_Init+0xa8>)
 8000832:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_TIM3_Init+0xa0>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_TIM3_Init+0xa0>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_TIM3_Init+0xa0>)
 8000842:	0018      	movs	r0, r3
 8000844:	f003 f830 	bl	80038a8 <HAL_TIM_Base_Init>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800084c:	f000 f89c 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	2108      	movs	r1, #8
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	0152      	lsls	r2, r2, #5
 8000858:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085a:	187a      	adds	r2, r7, r1
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_TIM3_Init+0xa0>)
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f003 f9af 	bl	8003bc4 <HAL_TIM_ConfigClockSource>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800086a:	f000 f88d 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	003b      	movs	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	003b      	movs	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800087a:	003a      	movs	r2, r7
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_TIM3_Init+0xa0>)
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f003 fb97 	bl	8003fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800088a:	f000 f87d 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b006      	add	sp, #24
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	20000588 	.word	0x20000588
 800089c:	40000400 	.word	0x40000400
 80008a0:	000003e7 	.word	0x000003e7

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	240c      	movs	r4, #12
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	0018      	movs	r0, r3
 80008b0:	2314      	movs	r3, #20
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f006 fe9e 	bl	80075f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0309      	lsls	r1, r1, #12
 80008c4:	430a      	orrs	r2, r1
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	031b      	lsls	r3, r3, #12
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	0289      	lsls	r1, r1, #10
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	029b      	lsls	r3, r3, #10
 80008ec:	4013      	ands	r3, r2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008f4:	695a      	ldr	r2, [r3, #20]
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_GPIO_Init+0xdc>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	02c9      	lsls	r1, r1, #11
 80008fc:	430a      	orrs	r2, r1
 80008fe:	615a      	str	r2, [r3, #20]
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_GPIO_Init+0xdc>)
 8000902:	695a      	ldr	r2, [r3, #20]
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	02db      	lsls	r3, r3, #11
 8000908:	4013      	ands	r3, r2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_GPIO_Init+0xe0>)
 8000910:	2200      	movs	r2, #0
 8000912:	2108      	movs	r1, #8
 8000914:	0018      	movs	r0, r3
 8000916:	f001 f9a5 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	0018      	movs	r0, r3
 8000924:	f001 f99e 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000928:	0021      	movs	r1, r4
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2208      	movs	r2, #8
 800092e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2201      	movs	r2, #1
 8000934:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	000c      	movs	r4, r1
 8000944:	187b      	adds	r3, r7, r1
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <MX_GPIO_Init+0xe0>)
 8000948:	0019      	movs	r1, r3
 800094a:	0010      	movs	r0, r2
 800094c:	f001 f812 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2220      	movs	r2, #32
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	187a      	adds	r2, r7, r1
 800096c:	2390      	movs	r3, #144	; 0x90
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fffe 	bl	8001974 <HAL_GPIO_Init>

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b009      	add	sp, #36	; 0x24
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_MspInit+0x44>)
 800099c:	699a      	ldr	r2, [r3, #24]
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_MspInit+0x44>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	430a      	orrs	r2, r1
 80009a4:	619a      	str	r2, [r3, #24]
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <HAL_MspInit+0x44>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	2201      	movs	r2, #1
 80009ac:	4013      	ands	r3, r2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x44>)
 80009b4:	69da      	ldr	r2, [r3, #28]
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_MspInit+0x44>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0549      	lsls	r1, r1, #21
 80009bc:	430a      	orrs	r2, r1
 80009be:	61da      	str	r2, [r3, #28]
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_MspInit+0x44>)
 80009c2:	69da      	ldr	r2, [r3, #28]
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	055b      	lsls	r3, r3, #21
 80009c8:	4013      	ands	r3, r2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	2314      	movs	r3, #20
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	0018      	movs	r0, r3
 80009ea:	2314      	movs	r3, #20
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f006 fe01 	bl	80075f6 <memset>
  if(hcan->Instance==CAN)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <HAL_CAN_MspInit+0xa0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d13a      	bne.n	8000a74 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_CAN_MspInit+0xa4>)
 8000a00:	69da      	ldr	r2, [r3, #28]
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_CAN_MspInit+0xa4>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0489      	lsls	r1, r1, #18
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	61da      	str	r2, [r3, #28]
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_CAN_MspInit+0xa4>)
 8000a0e:	69da      	ldr	r2, [r3, #28]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	049b      	lsls	r3, r3, #18
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_CAN_MspInit+0xa4>)
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_CAN_MspInit+0xa4>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	02c9      	lsls	r1, r1, #11
 8000a24:	430a      	orrs	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_CAN_MspInit+0xa4>)
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	02db      	lsls	r3, r3, #11
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a36:	2114      	movs	r1, #20
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	22c0      	movs	r2, #192	; 0xc0
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2202      	movs	r2, #2
 8000a44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2203      	movs	r2, #3
 8000a50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2204      	movs	r2, #4
 8000a56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_CAN_MspInit+0xa8>)
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	0010      	movs	r0, r2
 8000a60:	f000 ff88 	bl	8001974 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	201e      	movs	r0, #30
 8000a6a:	f000 ff51 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000a6e:	201e      	movs	r0, #30
 8000a70:	f000 ff63 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00a      	add	sp, #40	; 0x28
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40006400 	.word	0x40006400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400

08000a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <HAL_TIM_Base_MspInit+0x44>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d113      	bne.n	8000ac2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <HAL_TIM_Base_MspInit+0x48>)
 8000a9c:	69da      	ldr	r2, [r3, #28]
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_TIM_Base_MspInit+0x48>)
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	61da      	str	r2, [r3, #28]
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_TIM_Base_MspInit+0x48>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	2202      	movs	r2, #2
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2010      	movs	r0, #16
 8000ab8:	f000 ff2a 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000abc:	2010      	movs	r0, #16
 8000abe:	f000 ff3c 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b004      	add	sp, #16
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40000400 	.word	0x40000400
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f8a0 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <TIM3_IRQHandler+0x14>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f002 ff42 	bl	8003998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000588 	.word	0x20000588

08000b20 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <CEC_CAN_IRQHandler+0x14>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fc44 	bl	80013b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000560 	.word	0x20000560

08000b38 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <USB_IRQHandler+0x14>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 f9d2 	bl	8001ee8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000a90 	.word	0x20000a90

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b5c:	480d      	ldr	r0, [pc, #52]	; (8000b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b62:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LoopForever+0xe>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b78:	4c0b      	ldr	r4, [pc, #44]	; (8000ba8 <LoopForever+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b86:	f7ff ffe3 	bl	8000b50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b8a:	f006 fd07 	bl	800759c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8e:	f7ff fd81 	bl	8000694 <main>

08000b92 <LoopForever>:

LoopForever:
    b LoopForever
 8000b92:	e7fe      	b.n	8000b92 <LoopForever>
  ldr   r0, =_estack
 8000b94:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000ba0:	0800772c 	.word	0x0800772c
  ldr r2, =_sbss
 8000ba4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000ba8:	20000d04 	.word	0x20000d04

08000bac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_COMP_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_Init+0x24>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_Init+0x24>)
 8000bba:	2110      	movs	r1, #16
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 f809 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc6:	f7ff fee5 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	0018      	movs	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40022000 	.word	0x40022000

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_InitTick+0x5c>)
 8000be2:	681c      	ldr	r4, [r3, #0]
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_InitTick+0x60>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	0019      	movs	r1, r3
 8000bea:	23fa      	movs	r3, #250	; 0xfa
 8000bec:	0098      	lsls	r0, r3, #2
 8000bee:	f7ff fa8b 	bl	8000108 <__udivsi3>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	f7ff fa86 	bl	8000108 <__udivsi3>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 feab 	bl	800195a <HAL_SYSTICK_Config>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e00f      	b.n	8000c2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d80b      	bhi.n	8000c2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
 8000c18:	2200      	movs	r2, #0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fe78 	bl	8001910 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_InitTick+0x64>)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b003      	add	sp, #12
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_IncTick+0x1c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	001a      	movs	r2, r3
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_IncTick+0x20>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	18d2      	adds	r2, r2, r3
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_IncTick+0x20>)
 8000c52:	601a      	str	r2, [r3, #0]
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	200005c8 	.word	0x200005c8

08000c64 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b02      	ldr	r3, [pc, #8]	; (8000c74 <HAL_GetTick+0x10>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	200005c8 	.word	0x200005c8

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff fff0 	bl	8000c64 <HAL_GetTick>
 8000c84:	0003      	movs	r3, r0
 8000c86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_Delay+0x40>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	001a      	movs	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	189b      	adds	r3, r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	f7ff ffe0 	bl	8000c64 <HAL_GetTick>
 8000ca4:	0002      	movs	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b004      	add	sp, #16
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000008 	.word	0x20000008

08000cbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0f0      	b.n	8000eb0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	5c9b      	ldrb	r3, [r3, r2]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff fe7d 	bl	80009dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2102      	movs	r1, #2
 8000cee:	438a      	bics	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cf2:	f7ff ffb7 	bl	8000c64 <HAL_GetTick>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cfa:	e013      	b.n	8000d24 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cfc:	f7ff ffb2 	bl	8000c64 <HAL_GetTick>
 8000d00:	0002      	movs	r2, r0
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b0a      	cmp	r3, #10
 8000d08:	d90c      	bls.n	8000d24 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	0292      	lsls	r2, r2, #10
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	2105      	movs	r1, #5
 8000d1e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e0c5      	b.n	8000eb0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d1e5      	bne.n	8000cfc <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d40:	f7ff ff90 	bl	8000c64 <HAL_GetTick>
 8000d44:	0003      	movs	r3, r0
 8000d46:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d48:	e013      	b.n	8000d72 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d4a:	f7ff ff8b 	bl	8000c64 <HAL_GetTick>
 8000d4e:	0002      	movs	r2, r0
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b0a      	cmp	r3, #10
 8000d56:	d90c      	bls.n	8000d72 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	0292      	lsls	r2, r2, #10
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2220      	movs	r2, #32
 8000d6a:	2105      	movs	r1, #5
 8000d6c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e09e      	b.n	8000eb0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d0e5      	beq.n	8000d4a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7e1b      	ldrb	r3, [r3, #24]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d108      	bne.n	8000d98 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	438a      	bics	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7e5b      	ldrb	r3, [r3, #25]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d108      	bne.n	8000dc2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e007      	b.n	8000dd2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	438a      	bics	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7e9b      	ldrb	r3, [r3, #26]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d108      	bne.n	8000dec <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2120      	movs	r1, #32
 8000de6:	430a      	orrs	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2120      	movs	r1, #32
 8000df8:	438a      	bics	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7edb      	ldrb	r3, [r3, #27]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2110      	movs	r1, #16
 8000e10:	438a      	bics	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2110      	movs	r1, #16
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7f1b      	ldrb	r3, [r3, #28]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2108      	movs	r1, #8
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	438a      	bics	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7f5b      	ldrb	r3, [r3, #29]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2104      	movs	r1, #4
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2104      	movs	r1, #4
 8000e76:	438a      	bics	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	0011      	movs	r1, r2
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	2101      	movs	r1, #1
 8000eac:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ec8:	2013      	movs	r0, #19
 8000eca:	183b      	adds	r3, r7, r0
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	2120      	movs	r1, #32
 8000ed0:	5c52      	ldrb	r2, [r2, r1]
 8000ed2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ed4:	183b      	adds	r3, r7, r0
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_CAN_ConfigFilter+0x30>
 8000edc:	2313      	movs	r3, #19
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d000      	beq.n	8000ee8 <HAL_CAN_ConfigFilter+0x30>
 8000ee6:	e0cd      	b.n	8001084 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	58d3      	ldr	r3, [r2, r3]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	221f      	movs	r2, #31
 8000f04:	4013      	ands	r3, r2
 8000f06:	2201      	movs	r2, #1
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	2387      	movs	r3, #135	; 0x87
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	58d3      	ldr	r3, [r2, r3]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	0011      	movs	r1, r2
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	2387      	movs	r3, #135	; 0x87
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d129      	bne.n	8000f82 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	2383      	movs	r3, #131	; 0x83
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	58d3      	ldr	r3, [r2, r3]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	43d2      	mvns	r2, r2
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	2383      	movs	r3, #131	; 0x83
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f58:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3248      	adds	r2, #72	; 0x48
 8000f5e:	00d2      	lsls	r2, r2, #3
 8000f60:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f76:	6979      	ldr	r1, [r7, #20]
 8000f78:	3348      	adds	r3, #72	; 0x48
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	18cb      	adds	r3, r1, r3
 8000f7e:	3304      	adds	r3, #4
 8000f80:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d128      	bne.n	8000fdc <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	2383      	movs	r3, #131	; 0x83
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	58d2      	ldr	r2, [r2, r3]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	0011      	movs	r1, r2
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	2383      	movs	r3, #131	; 0x83
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	041b      	lsls	r3, r3, #16
 8000fac:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fb2:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3248      	adds	r2, #72	; 0x48
 8000fb8:	00d2      	lsls	r2, r2, #3
 8000fba:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	041b      	lsls	r3, r3, #16
 8000fc8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd0:	6979      	ldr	r1, [r7, #20]
 8000fd2:	3348      	adds	r3, #72	; 0x48
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	18cb      	adds	r3, r1, r3
 8000fd8:	3304      	adds	r3, #4
 8000fda:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10c      	bne.n	8000ffe <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	2381      	movs	r3, #129	; 0x81
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	58d3      	ldr	r3, [r2, r3]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	43d2      	mvns	r2, r2
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	2381      	movs	r3, #129	; 0x81
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	50d1      	str	r1, [r2, r3]
 8000ffc:	e00a      	b.n	8001014 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	2381      	movs	r3, #129	; 0x81
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	58d2      	ldr	r2, [r2, r3]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	431a      	orrs	r2, r3
 800100a:	0011      	movs	r1, r2
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	2381      	movs	r3, #129	; 0x81
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10c      	bne.n	8001036 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	2385      	movs	r3, #133	; 0x85
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	58d3      	ldr	r3, [r2, r3]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	43d2      	mvns	r2, r2
 8001028:	401a      	ands	r2, r3
 800102a:	0011      	movs	r1, r2
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	2385      	movs	r3, #133	; 0x85
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	50d1      	str	r1, [r2, r3]
 8001034:	e00a      	b.n	800104c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	2385      	movs	r3, #133	; 0x85
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	58d2      	ldr	r2, [r2, r3]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	431a      	orrs	r2, r3
 8001042:	0011      	movs	r1, r2
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	2385      	movs	r3, #133	; 0x85
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d10a      	bne.n	800106a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	2387      	movs	r3, #135	; 0x87
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	58d2      	ldr	r2, [r2, r3]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	431a      	orrs	r2, r3
 8001060:	0011      	movs	r1, r2
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	2387      	movs	r3, #135	; 0x87
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	58d3      	ldr	r3, [r2, r3]
 8001072:	2201      	movs	r2, #1
 8001074:	4393      	bics	r3, r2
 8001076:	0019      	movs	r1, r3
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	e007      	b.n	8001094 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	02d2      	lsls	r2, r2, #11
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
  }
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b006      	add	sp, #24
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2220      	movs	r2, #32
 80010a8:	5c9b      	ldrb	r3, [r3, r2]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d12f      	bne.n	8001110 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2220      	movs	r2, #32
 80010b4:	2102      	movs	r1, #2
 80010b6:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2101      	movs	r1, #1
 80010c4:	438a      	bics	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010c8:	f7ff fdcc 	bl	8000c64 <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010d0:	e013      	b.n	80010fa <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d2:	f7ff fdc7 	bl	8000c64 <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b0a      	cmp	r3, #10
 80010de:	d90c      	bls.n	80010fa <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	0292      	lsls	r2, r2, #10
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2220      	movs	r2, #32
 80010f2:	2105      	movs	r1, #5
 80010f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e012      	b.n	8001120 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	4013      	ands	r3, r2
 8001104:	d1e5      	bne.n	80010d2 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	e007      	b.n	8001120 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	0312      	lsls	r2, r2, #12
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
  }
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b004      	add	sp, #16
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001136:	2017      	movs	r0, #23
 8001138:	183b      	adds	r3, r7, r0
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	2120      	movs	r1, #32
 800113e:	5c52      	ldrb	r2, [r2, r1]
 8001140:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001142:	183b      	adds	r3, r7, r0
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_CAN_GetRxMessage+0x2e>
 800114a:	2317      	movs	r3, #23
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d000      	beq.n	8001156 <HAL_CAN_GetRxMessage+0x2e>
 8001154:	e0f8      	b.n	8001348 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10e      	bne.n	800117a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2203      	movs	r2, #3
 8001164:	4013      	ands	r3, r2
 8001166:	d117      	bne.n	8001198 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	0392      	lsls	r2, r2, #14
 8001170:	431a      	orrs	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0ee      	b.n	8001358 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2203      	movs	r2, #3
 8001182:	4013      	ands	r3, r2
 8001184:	d108      	bne.n	8001198 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	0392      	lsls	r2, r2, #14
 800118e:	431a      	orrs	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0df      	b.n	8001358 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	321b      	adds	r2, #27
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	58d3      	ldr	r3, [r2, r3]
 80011a4:	2204      	movs	r2, #4
 80011a6:	401a      	ands	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10b      	bne.n	80011cc <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	321b      	adds	r2, #27
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	58d3      	ldr	r3, [r2, r3]
 80011c0:	0d5b      	lsrs	r3, r3, #21
 80011c2:	055b      	lsls	r3, r3, #21
 80011c4:	0d5a      	lsrs	r2, r3, #21
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e00a      	b.n	80011e2 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	321b      	adds	r2, #27
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	58d3      	ldr	r3, [r2, r3]
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	321b      	adds	r2, #27
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	58d3      	ldr	r3, [r2, r3]
 80011ee:	2202      	movs	r2, #2
 80011f0:	401a      	ands	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	331b      	adds	r3, #27
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	18d3      	adds	r3, r2, r3
 8001202:	3304      	adds	r3, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	220f      	movs	r2, #15
 8001208:	401a      	ands	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	331b      	adds	r3, #27
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	18d3      	adds	r3, r2, r3
 800121a:	3304      	adds	r3, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	401a      	ands	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	331b      	adds	r3, #27
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	18d3      	adds	r3, r2, r3
 8001234:	3304      	adds	r3, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0c1b      	lsrs	r3, r3, #16
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	0c1a      	lsrs	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6819      	ldr	r1, [r3, #0]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	23dc      	movs	r3, #220	; 0xdc
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	188a      	adds	r2, r1, r2
 8001250:	18d3      	adds	r3, r2, r3
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	23dc      	movs	r3, #220	; 0xdc
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	188a      	adds	r2, r1, r2
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0a1a      	lsrs	r2, r3, #8
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	23dc      	movs	r3, #220	; 0xdc
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	188a      	adds	r2, r1, r2
 8001284:	18d3      	adds	r3, r2, r3
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0c1a      	lsrs	r2, r3, #16
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3302      	adds	r3, #2
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6819      	ldr	r1, [r3, #0]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	23dc      	movs	r3, #220	; 0xdc
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	188a      	adds	r2, r1, r2
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0e1a      	lsrs	r2, r3, #24
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	3303      	adds	r3, #3
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	23de      	movs	r3, #222	; 0xde
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	188a      	adds	r2, r1, r2
 80012bc:	18d3      	adds	r3, r2, r3
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	3304      	adds	r3, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6819      	ldr	r1, [r3, #0]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	23de      	movs	r3, #222	; 0xde
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	188a      	adds	r2, r1, r2
 80012d6:	18d3      	adds	r3, r2, r3
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0a1a      	lsrs	r2, r3, #8
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	3305      	adds	r3, #5
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6819      	ldr	r1, [r3, #0]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	23de      	movs	r3, #222	; 0xde
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	188a      	adds	r2, r1, r2
 80012f2:	18d3      	adds	r3, r2, r3
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	0c1a      	lsrs	r2, r3, #16
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	3306      	adds	r3, #6
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	23de      	movs	r3, #222	; 0xde
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	188a      	adds	r2, r1, r2
 800130e:	18d3      	adds	r3, r2, r3
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0e1a      	lsrs	r2, r3, #24
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3307      	adds	r3, #7
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d108      	bne.n	8001334 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2120      	movs	r1, #32
 800132e:	430a      	orrs	r2, r1
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	e007      	b.n	8001344 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2120      	movs	r1, #32
 8001340:	430a      	orrs	r2, r1
 8001342:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	e007      	b.n	8001358 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	02d2      	lsls	r2, r2, #11
 8001350:	431a      	orrs	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
  }
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	b006      	add	sp, #24
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800136a:	200f      	movs	r0, #15
 800136c:	183b      	adds	r3, r7, r0
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	2120      	movs	r1, #32
 8001372:	5c52      	ldrb	r2, [r2, r1]
 8001374:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001376:	183b      	adds	r3, r7, r0
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d004      	beq.n	8001388 <HAL_CAN_ActivateNotification+0x28>
 800137e:	230f      	movs	r3, #15
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d109      	bne.n	800139c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6959      	ldr	r1, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	e007      	b.n	80013ac <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	02d2      	lsls	r2, r2, #11
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
  }
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b004      	add	sp, #16
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4013      	ands	r3, r2
 80013f6:	d100      	bne.n	80013fa <HAL_CAN_IRQHandler+0x46>
 80013f8:	e084      	b.n	8001504 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	d024      	beq.n	800144c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2202      	movs	r2, #2
 800140e:	4013      	ands	r3, r2
 8001410:	d004      	beq.n	800141c <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff f885 	bl	8000524 <HAL_CAN_TxMailbox0CompleteCallback>
 800141a:	e017      	b.n	800144c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2204      	movs	r2, #4
 8001420:	4013      	ands	r3, r2
 8001422:	d005      	beq.n	8001430 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	4313      	orrs	r3, r2
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
 800142e:	e00d      	b.n	800144c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2208      	movs	r2, #8
 8001434:	4013      	ands	r3, r2
 8001436:	d005      	beq.n	8001444 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	0152      	lsls	r2, r2, #5
 800143e:	4313      	orrs	r3, r2
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	e003      	b.n	800144c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0018      	movs	r0, r3
 8001448:	f000 f975 	bl	8001736 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4013      	ands	r3, r2
 8001454:	d028      	beq.n	80014a8 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	0052      	lsls	r2, r2, #1
 800145e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d004      	beq.n	8001474 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	0018      	movs	r0, r3
 800146e:	f000 f952 	bl	8001716 <HAL_CAN_TxMailbox1CompleteCallback>
 8001472:	e019      	b.n	80014a8 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4013      	ands	r3, r2
 800147c:	d005      	beq.n	800148a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	0192      	lsls	r2, r2, #6
 8001484:	4313      	orrs	r3, r2
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
 8001488:	e00e      	b.n	80014a8 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4013      	ands	r3, r2
 8001492:	d005      	beq.n	80014a0 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	2280      	movs	r2, #128	; 0x80
 8001498:	01d2      	lsls	r2, r2, #7
 800149a:	4313      	orrs	r3, r2
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	e003      	b.n	80014a8 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	0018      	movs	r0, r3
 80014a4:	f000 f94f 	bl	8001746 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	025b      	lsls	r3, r3, #9
 80014ae:	4013      	ands	r3, r2
 80014b0:	d028      	beq.n	8001504 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	0252      	lsls	r2, r2, #9
 80014ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	029b      	lsls	r3, r3, #10
 80014c2:	4013      	ands	r3, r2
 80014c4:	d004      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 f92c 	bl	8001726 <HAL_CAN_TxMailbox2CompleteCallback>
 80014ce:	e019      	b.n	8001504 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	4013      	ands	r3, r2
 80014d8:	d005      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	0212      	lsls	r2, r2, #8
 80014e0:	4313      	orrs	r3, r2
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
 80014e4:	e00e      	b.n	8001504 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	031b      	lsls	r3, r3, #12
 80014ec:	4013      	ands	r3, r2
 80014ee:	d005      	beq.n	80014fc <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	0252      	lsls	r2, r2, #9
 80014f6:	4313      	orrs	r3, r2
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	e003      	b.n	8001504 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 f929 	bl	8001756 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	2208      	movs	r2, #8
 8001508:	4013      	ands	r3, r2
 800150a:	d00c      	beq.n	8001526 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2210      	movs	r2, #16
 8001510:	4013      	ands	r3, r2
 8001512:	d008      	beq.n	8001526 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	4313      	orrs	r3, r2
 800151c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2210      	movs	r2, #16
 8001524:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	2204      	movs	r2, #4
 800152a:	4013      	ands	r3, r2
 800152c:	d00b      	beq.n	8001546 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2208      	movs	r2, #8
 8001532:	4013      	ands	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2208      	movs	r2, #8
 800153c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f000 f910 	bl	8001766 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	2202      	movs	r2, #2
 800154a:	4013      	ands	r3, r2
 800154c:	d009      	beq.n	8001562 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
 8001558:	d003      	beq.n	8001562 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0018      	movs	r0, r3
 800155e:	f7fe ffef 	bl	8000540 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	2240      	movs	r2, #64	; 0x40
 8001566:	4013      	ands	r3, r2
 8001568:	d00c      	beq.n	8001584 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2210      	movs	r2, #16
 800156e:	4013      	ands	r3, r2
 8001570:	d008      	beq.n	8001584 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	00d2      	lsls	r2, r2, #3
 8001578:	4313      	orrs	r3, r2
 800157a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2210      	movs	r2, #16
 8001582:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	2220      	movs	r2, #32
 8001588:	4013      	ands	r3, r2
 800158a:	d00b      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2208      	movs	r2, #8
 8001590:	4013      	ands	r3, r2
 8001592:	d007      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2208      	movs	r2, #8
 800159a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 f8f1 	bl	8001786 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	2210      	movs	r2, #16
 80015a8:	4013      	ands	r3, r2
 80015aa:	d009      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2203      	movs	r2, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	d003      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 f8db 	bl	8001776 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015c0:	6a3a      	ldr	r2, [r7, #32]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	029b      	lsls	r3, r3, #10
 80015c6:	4013      	ands	r3, r2
 80015c8:	d00b      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	2210      	movs	r2, #16
 80015ce:	4013      	ands	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2210      	movs	r2, #16
 80015d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 f8da 	bl	8001796 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015e2:	6a3a      	ldr	r2, [r7, #32]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	4013      	ands	r3, r2
 80015ea:	d00b      	beq.n	8001604 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2208      	movs	r2, #8
 80015f0:	4013      	ands	r3, r2
 80015f2:	d007      	beq.n	8001604 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2208      	movs	r2, #8
 80015fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 f8d1 	bl	80017a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	4013      	ands	r3, r2
 800160c:	d100      	bne.n	8001610 <HAL_CAN_IRQHandler+0x25c>
 800160e:	e071      	b.n	80016f4 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	2204      	movs	r2, #4
 8001614:	4013      	ands	r3, r2
 8001616:	d100      	bne.n	800161a <HAL_CAN_IRQHandler+0x266>
 8001618:	e068      	b.n	80016ec <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800161a:	6a3a      	ldr	r2, [r7, #32]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4013      	ands	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2201      	movs	r2, #1
 8001628:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800162a:	d003      	beq.n	8001634 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	2201      	movs	r2, #1
 8001630:	4313      	orrs	r3, r2
 8001632:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2202      	movs	r2, #2
 8001642:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001644:	d003      	beq.n	800164e <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	2202      	movs	r2, #2
 800164a:	4313      	orrs	r3, r2
 800164c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800164e:	6a3a      	ldr	r2, [r7, #32]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4013      	ands	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2204      	movs	r2, #4
 800165c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800165e:	d003      	beq.n	8001668 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	2204      	movs	r2, #4
 8001664:	4313      	orrs	r3, r2
 8001666:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001668:	6a3a      	ldr	r2, [r7, #32]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	4013      	ands	r3, r2
 8001670:	d03c      	beq.n	80016ec <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2270      	movs	r2, #112	; 0x70
 8001676:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001678:	d038      	beq.n	80016ec <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2270      	movs	r2, #112	; 0x70
 800167e:	4013      	ands	r3, r2
 8001680:	2b30      	cmp	r3, #48	; 0x30
 8001682:	d016      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x2fe>
 8001684:	d804      	bhi.n	8001690 <HAL_CAN_IRQHandler+0x2dc>
 8001686:	2b10      	cmp	r3, #16
 8001688:	d009      	beq.n	800169e <HAL_CAN_IRQHandler+0x2ea>
 800168a:	2b20      	cmp	r3, #32
 800168c:	d00c      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800168e:	e025      	b.n	80016dc <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8001690:	2b50      	cmp	r3, #80	; 0x50
 8001692:	d018      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x312>
 8001694:	2b60      	cmp	r3, #96	; 0x60
 8001696:	d01b      	beq.n	80016d0 <HAL_CAN_IRQHandler+0x31c>
 8001698:	2b40      	cmp	r3, #64	; 0x40
 800169a:	d00f      	beq.n	80016bc <HAL_CAN_IRQHandler+0x308>
            break;
 800169c:	e01e      	b.n	80016dc <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	2208      	movs	r2, #8
 80016a2:	4313      	orrs	r3, r2
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016a6:	e019      	b.n	80016dc <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	2210      	movs	r2, #16
 80016ac:	4313      	orrs	r3, r2
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016b0:	e014      	b.n	80016dc <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	2220      	movs	r2, #32
 80016b6:	4313      	orrs	r3, r2
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016ba:	e00f      	b.n	80016dc <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	2240      	movs	r2, #64	; 0x40
 80016c0:	4313      	orrs	r3, r2
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016c4:	e00a      	b.n	80016dc <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	4313      	orrs	r3, r2
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016ce:	e005      	b.n	80016dc <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	0052      	lsls	r2, r2, #1
 80016d6:	4313      	orrs	r3, r2
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016da:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699a      	ldr	r2, [r3, #24]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2170      	movs	r1, #112	; 0x70
 80016e8:	438a      	bics	r2, r1
 80016ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2204      	movs	r2, #4
 80016f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	0018      	movs	r0, r3
 800170a:	f7fe ff75 	bl	80005f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b00a      	add	sp, #40	; 0x28
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b002      	add	sp, #8
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b002      	add	sp, #8
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b002      	add	sp, #8
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b002      	add	sp, #8
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0002      	movs	r2, r0
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b7f      	cmp	r3, #127	; 0x7f
 80017ca:	d809      	bhi.n	80017e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	001a      	movs	r2, r3
 80017d2:	231f      	movs	r3, #31
 80017d4:	401a      	ands	r2, r3
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_EnableIRQ+0x30>)
 80017d8:	2101      	movs	r1, #1
 80017da:	4091      	lsls	r1, r2
 80017dc:	000a      	movs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
  }
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	0002      	movs	r2, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001800:	d828      	bhi.n	8001854 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001802:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <__NVIC_SetPriority+0xd4>)
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b25b      	sxtb	r3, r3
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	33c0      	adds	r3, #192	; 0xc0
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	589b      	ldr	r3, [r3, r2]
 8001812:	1dfa      	adds	r2, r7, #7
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	0011      	movs	r1, r2
 8001818:	2203      	movs	r2, #3
 800181a:	400a      	ands	r2, r1
 800181c:	00d2      	lsls	r2, r2, #3
 800181e:	21ff      	movs	r1, #255	; 0xff
 8001820:	4091      	lsls	r1, r2
 8001822:	000a      	movs	r2, r1
 8001824:	43d2      	mvns	r2, r2
 8001826:	401a      	ands	r2, r3
 8001828:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	22ff      	movs	r2, #255	; 0xff
 8001830:	401a      	ands	r2, r3
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	0018      	movs	r0, r3
 8001838:	2303      	movs	r3, #3
 800183a:	4003      	ands	r3, r0
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001840:	481f      	ldr	r0, [pc, #124]	; (80018c0 <__NVIC_SetPriority+0xd4>)
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b25b      	sxtb	r3, r3
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	430a      	orrs	r2, r1
 800184c:	33c0      	adds	r3, #192	; 0xc0
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001852:	e031      	b.n	80018b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <__NVIC_SetPriority+0xd8>)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	0019      	movs	r1, r3
 800185c:	230f      	movs	r3, #15
 800185e:	400b      	ands	r3, r1
 8001860:	3b08      	subs	r3, #8
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3306      	adds	r3, #6
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	18d3      	adds	r3, r2, r3
 800186a:	3304      	adds	r3, #4
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	1dfa      	adds	r2, r7, #7
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	0011      	movs	r1, r2
 8001874:	2203      	movs	r2, #3
 8001876:	400a      	ands	r2, r1
 8001878:	00d2      	lsls	r2, r2, #3
 800187a:	21ff      	movs	r1, #255	; 0xff
 800187c:	4091      	lsls	r1, r2
 800187e:	000a      	movs	r2, r1
 8001880:	43d2      	mvns	r2, r2
 8001882:	401a      	ands	r2, r3
 8001884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	401a      	ands	r2, r3
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	0018      	movs	r0, r3
 8001894:	2303      	movs	r3, #3
 8001896:	4003      	ands	r3, r0
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189c:	4809      	ldr	r0, [pc, #36]	; (80018c4 <__NVIC_SetPriority+0xd8>)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	001c      	movs	r4, r3
 80018a4:	230f      	movs	r3, #15
 80018a6:	4023      	ands	r3, r4
 80018a8:	3b08      	subs	r3, #8
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	430a      	orrs	r2, r1
 80018ae:	3306      	adds	r3, #6
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	18c3      	adds	r3, r0, r3
 80018b4:	3304      	adds	r3, #4
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b003      	add	sp, #12
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <SysTick_Config+0x40>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e010      	b.n	8001900 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <SysTick_Config+0x44>)
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	3a01      	subs	r2, #1
 80018e4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	2301      	movs	r3, #1
 80018e8:	425b      	negs	r3, r3
 80018ea:	2103      	movs	r1, #3
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff ff7d 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <SysTick_Config+0x44>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x44>)
 80018fa:	2207      	movs	r2, #7
 80018fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fe:	2300      	movs	r3, #0
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b002      	add	sp, #8
 8001906:	bd80      	pop	{r7, pc}
 8001908:	00ffffff 	.word	0x00ffffff
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	210f      	movs	r1, #15
 800191c:	187b      	adds	r3, r7, r1
 800191e:	1c02      	adds	r2, r0, #0
 8001920:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	187b      	adds	r3, r7, r1
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b25b      	sxtb	r3, r3
 800192a:	0011      	movs	r1, r2
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b004      	add	sp, #16
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	0002      	movs	r2, r0
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b25b      	sxtb	r3, r3
 800194c:	0018      	movs	r0, r3
 800194e:	f7ff ff33 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff ffaf 	bl	80018c8 <SysTick_Config>
 800196a:	0003      	movs	r3, r0
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b002      	add	sp, #8
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	e155      	b.n	8001c30 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4091      	lsls	r1, r2
 800198e:	000a      	movs	r2, r1
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d100      	bne.n	800199c <HAL_GPIO_Init+0x28>
 800199a:	e146      	b.n	8001c2a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x38>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b12      	cmp	r3, #18
 80019aa:	d123      	bne.n	80019f4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	58d3      	ldr	r3, [r2, r3]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2207      	movs	r2, #7
 80019be:	4013      	ands	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	409a      	lsls	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	43da      	mvns	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2107      	movs	r1, #7
 80019d8:	400b      	ands	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	409a      	lsls	r2, r3
 80019de:	0013      	movs	r3, r2
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	6939      	ldr	r1, [r7, #16]
 80019f2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	409a      	lsls	r2, r3
 8001a02:	0013      	movs	r3, r2
 8001a04:	43da      	mvns	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2203      	movs	r2, #3
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d00b      	beq.n	8001a48 <HAL_GPIO_Init+0xd4>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d007      	beq.n	8001a48 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3c:	2b11      	cmp	r3, #17
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b12      	cmp	r3, #18
 8001a46:	d130      	bne.n	8001aaa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	409a      	lsls	r2, r3
 8001a56:	0013      	movs	r3, r2
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	0013      	movs	r3, r2
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7e:	2201      	movs	r2, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	43da      	mvns	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	2201      	movs	r2, #1
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	43da      	mvns	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	409a      	lsls	r2, r3
 8001acc:	0013      	movs	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	055b      	lsls	r3, r3, #21
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d100      	bne.n	8001ae8 <HAL_GPIO_Init+0x174>
 8001ae6:	e0a0      	b.n	8001c2a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae8:	4b57      	ldr	r3, [pc, #348]	; (8001c48 <HAL_GPIO_Init+0x2d4>)
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	4b56      	ldr	r3, [pc, #344]	; (8001c48 <HAL_GPIO_Init+0x2d4>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	430a      	orrs	r2, r1
 8001af2:	619a      	str	r2, [r3, #24]
 8001af4:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <HAL_GPIO_Init+0x2d4>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b00:	4a52      	ldr	r2, [pc, #328]	; (8001c4c <HAL_GPIO_Init+0x2d8>)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	589b      	ldr	r3, [r3, r2]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2203      	movs	r2, #3
 8001b12:	4013      	ands	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	2390      	movs	r3, #144	; 0x90
 8001b28:	05db      	lsls	r3, r3, #23
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a47      	ldr	r2, [pc, #284]	; (8001c50 <HAL_GPIO_Init+0x2dc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x1ea>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a46      	ldr	r2, [pc, #280]	; (8001c54 <HAL_GPIO_Init+0x2e0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x1e6>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a45      	ldr	r2, [pc, #276]	; (8001c58 <HAL_GPIO_Init+0x2e4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x1e2>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a44      	ldr	r2, [pc, #272]	; (8001c5c <HAL_GPIO_Init+0x2e8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x1de>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e008      	b.n	8001b64 <HAL_GPIO_Init+0x1f0>
 8001b52:	2305      	movs	r3, #5
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x1f0>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e004      	b.n	8001b64 <HAL_GPIO_Init+0x1f0>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_Init+0x1f0>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_GPIO_Init+0x1f0>
 8001b62:	2300      	movs	r3, #0
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	2103      	movs	r1, #3
 8001b68:	400a      	ands	r2, r1
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	4093      	lsls	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b74:	4935      	ldr	r1, [pc, #212]	; (8001c4c <HAL_GPIO_Init+0x2d8>)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	025b      	lsls	r3, r3, #9
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001bac:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	029b      	lsls	r3, r3, #10
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43da      	mvns	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	035b      	lsls	r3, r3, #13
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	039b      	lsls	r3, r3, #14
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	40da      	lsrs	r2, r3
 8001c38:	1e13      	subs	r3, r2, #0
 8001c3a:	d000      	beq.n	8001c3e <HAL_GPIO_Init+0x2ca>
 8001c3c:	e6a2      	b.n	8001984 <HAL_GPIO_Init+0x10>
  } 
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b006      	add	sp, #24
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	48001000 	.word	0x48001000
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	0008      	movs	r0, r1
 8001c6e:	0011      	movs	r1, r2
 8001c70:	1cbb      	adds	r3, r7, #2
 8001c72:	1c02      	adds	r2, r0, #0
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	1c7b      	adds	r3, r7, #1
 8001c78:	1c0a      	adds	r2, r1, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7c:	1c7b      	adds	r3, r7, #1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c84:	1cbb      	adds	r3, r7, #2
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c8e:	1cbb      	adds	r3, r7, #2
 8001c90:	881a      	ldrh	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	000a      	movs	r2, r1
 8001ca8:	1cbb      	adds	r3, r7, #2
 8001caa:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	1cba      	adds	r2, r7, #2
 8001cb2:	8812      	ldrh	r2, [r2, #0]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cb8:	1cbb      	adds	r3, r7, #2
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001cc2:	e003      	b.n	8001ccc <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc4:	1cbb      	adds	r3, r7, #2
 8001cc6:	881a      	ldrh	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd6:	b08b      	sub	sp, #44	; 0x2c
 8001cd8:	af06      	add	r7, sp, #24
 8001cda:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0d4      	b.n	8001e90 <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a6b      	ldr	r2, [pc, #428]	; (8001e98 <HAL_PCD_Init+0x1c4>)
 8001cea:	5c9b      	ldrb	r3, [r3, r2]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d108      	bne.n	8001d04 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	238a      	movs	r3, #138	; 0x8a
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f005 f918 	bl	8006f34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a64      	ldr	r2, [pc, #400]	; (8001e98 <HAL_PCD_Init+0x1c4>)
 8001d08:	2103      	movs	r1, #3
 8001d0a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f002 f9d7 	bl	80040c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d16:	230f      	movs	r3, #15
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	e043      	b.n	8001da8 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d20:	200f      	movs	r0, #15
 8001d22:	183b      	adds	r3, r7, r0
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	2129      	movs	r1, #41	; 0x29
 8001d2a:	015b      	lsls	r3, r3, #5
 8001d2c:	18d3      	adds	r3, r2, r3
 8001d2e:	185b      	adds	r3, r3, r1
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d34:	183b      	adds	r3, r7, r0
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	2128      	movs	r1, #40	; 0x28
 8001d3c:	015b      	lsls	r3, r3, #5
 8001d3e:	18d3      	adds	r3, r2, r3
 8001d40:	185b      	adds	r3, r3, r1
 8001d42:	183a      	adds	r2, r7, r0
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	183a      	adds	r2, r7, r0
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	b291      	uxth	r1, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	015b      	lsls	r3, r3, #5
 8001d56:	18d3      	adds	r3, r2, r3
 8001d58:	3336      	adds	r3, #54	; 0x36
 8001d5a:	1c0a      	adds	r2, r1, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d5e:	183b      	adds	r3, r7, r0
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	212b      	movs	r1, #43	; 0x2b
 8001d66:	015b      	lsls	r3, r3, #5
 8001d68:	18d3      	adds	r3, r2, r3
 8001d6a:	185b      	adds	r3, r3, r1
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d70:	183b      	adds	r3, r7, r0
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	015b      	lsls	r3, r3, #5
 8001d78:	18d3      	adds	r3, r2, r3
 8001d7a:	3338      	adds	r3, #56	; 0x38
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d80:	183b      	adds	r3, r7, r0
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	015b      	lsls	r3, r3, #5
 8001d88:	18d3      	adds	r3, r2, r3
 8001d8a:	333c      	adds	r3, #60	; 0x3c
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d90:	183b      	adds	r3, r7, r0
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3202      	adds	r2, #2
 8001d98:	0152      	lsls	r2, r2, #5
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	183b      	adds	r3, r7, r0
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	183b      	adds	r3, r7, r0
 8001da4:	3201      	adds	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	230f      	movs	r3, #15
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	781a      	ldrb	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3b4      	bcc.n	8001d20 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db6:	230f      	movs	r3, #15
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e03f      	b.n	8001e40 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dc0:	200f      	movs	r0, #15
 8001dc2:	183b      	adds	r3, r7, r0
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	232a      	movs	r3, #42	; 0x2a
 8001dca:	33ff      	adds	r3, #255	; 0xff
 8001dcc:	0152      	lsls	r2, r2, #5
 8001dce:	188a      	adds	r2, r1, r2
 8001dd0:	18d3      	adds	r3, r2, r3
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dd6:	183b      	adds	r3, r7, r0
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	2394      	movs	r3, #148	; 0x94
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	0152      	lsls	r2, r2, #5
 8001de2:	188a      	adds	r2, r1, r2
 8001de4:	18d3      	adds	r3, r2, r3
 8001de6:	183a      	adds	r2, r7, r0
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dec:	183b      	adds	r3, r7, r0
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	232c      	movs	r3, #44	; 0x2c
 8001df4:	33ff      	adds	r3, #255	; 0xff
 8001df6:	0152      	lsls	r2, r2, #5
 8001df8:	188a      	adds	r2, r1, r2
 8001dfa:	18d3      	adds	r3, r2, r3
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e00:	183b      	adds	r3, r7, r0
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	239c      	movs	r3, #156	; 0x9c
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	0152      	lsls	r2, r2, #5
 8001e0c:	188a      	adds	r2, r1, r2
 8001e0e:	18d3      	adds	r3, r2, r3
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e14:	183b      	adds	r3, r7, r0
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	239e      	movs	r3, #158	; 0x9e
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	0152      	lsls	r2, r2, #5
 8001e20:	188a      	adds	r2, r1, r2
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e28:	183b      	adds	r3, r7, r0
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	320a      	adds	r2, #10
 8001e30:	0152      	lsls	r2, r2, #5
 8001e32:	2100      	movs	r1, #0
 8001e34:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e36:	183b      	adds	r3, r7, r0
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	183b      	adds	r3, r7, r0
 8001e3c:	3201      	adds	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	230f      	movs	r3, #15
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3b8      	bcc.n	8001dc0 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	466a      	mov	r2, sp
 8001e56:	0011      	movs	r1, r2
 8001e58:	001a      	movs	r2, r3
 8001e5a:	3210      	adds	r2, #16
 8001e5c:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001e5e:	c170      	stmia	r1!, {r4, r5, r6}
 8001e60:	ca30      	ldmia	r2!, {r4, r5}
 8001e62:	c130      	stmia	r1!, {r4, r5}
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f002 f94b 	bl	8004104 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2224      	movs	r2, #36	; 0x24
 8001e72:	2100      	movs	r1, #0
 8001e74:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_PCD_Init+0x1c4>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d103      	bne.n	8001e8e <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 fef9 	bl	8002c80 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b005      	add	sp, #20
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e98:	00000229 	.word	0x00000229

08001e9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	238a      	movs	r3, #138	; 0x8a
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_PCD_Start+0x18>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e014      	b.n	8001ede <HAL_PCD_Start+0x42>
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	238a      	movs	r3, #138	; 0x8a
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	2101      	movs	r1, #1
 8001ebc:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f003 f976 	bl	80051b4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f002 f8df 	bl	8004090 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	238a      	movs	r3, #138	; 0x8a
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	2100      	movs	r1, #0
 8001eda:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b002      	add	sp, #8
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f003 f973 	bl	80051e0 <USB_ReadInterrupts>
 8001efa:	0002      	movs	r2, r0
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	401a      	ands	r2, r3
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d103      	bne.n	8001f12 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 fb9b 	bl	8002648 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f003 f962 	bl	80051e0 <USB_ReadInterrupts>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	401a      	ands	r2, r3
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d114      	bne.n	8001f56 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2244      	movs	r2, #68	; 0x44
 8001f32:	5a9b      	ldrh	r3, [r3, r2]
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	49a8      	ldr	r1, [pc, #672]	; (80021dc <HAL_PCD_IRQHandler+0x2f4>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	b291      	uxth	r1, r2
 8001f40:	2244      	movs	r2, #68	; 0x44
 8001f42:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f005 f878 	bl	800703c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	0018      	movs	r0, r3
 8001f52:	f000 f951 	bl	80021f8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f003 f940 	bl	80051e0 <USB_ReadInterrupts>
 8001f60:	0002      	movs	r2, r0
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	01db      	lsls	r3, r3, #7
 8001f66:	401a      	ands	r2, r3
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	01db      	lsls	r3, r3, #7
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d10b      	bne.n	8001f88 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2244      	movs	r2, #68	; 0x44
 8001f76:	5a9b      	ldrh	r3, [r3, r2]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4998      	ldr	r1, [pc, #608]	; (80021e0 <HAL_PCD_IRQHandler+0x2f8>)
 8001f80:	400a      	ands	r2, r1
 8001f82:	b291      	uxth	r1, r2
 8001f84:	2244      	movs	r2, #68	; 0x44
 8001f86:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f003 f927 	bl	80051e0 <USB_ReadInterrupts>
 8001f92:	0002      	movs	r2, r0
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	019b      	lsls	r3, r3, #6
 8001f98:	401a      	ands	r2, r3
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	019b      	lsls	r3, r3, #6
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d10b      	bne.n	8001fba <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2244      	movs	r2, #68	; 0x44
 8001fa8:	5a9b      	ldrh	r3, [r3, r2]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	498c      	ldr	r1, [pc, #560]	; (80021e4 <HAL_PCD_IRQHandler+0x2fc>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	b291      	uxth	r1, r2
 8001fb6:	2244      	movs	r2, #68	; 0x44
 8001fb8:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f003 f90e 	bl	80051e0 <USB_ReadInterrupts>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	015b      	lsls	r3, r3, #5
 8001fca:	401a      	ands	r2, r3
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	015b      	lsls	r3, r3, #5
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d137      	bne.n	8002044 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2240      	movs	r2, #64	; 0x40
 8001fda:	5a9b      	ldrh	r3, [r3, r2]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	438a      	bics	r2, r1
 8001fe6:	b291      	uxth	r1, r2
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	5a9b      	ldrh	r3, [r3, r2]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2108      	movs	r1, #8
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	b291      	uxth	r1, r2
 8002000:	2240      	movs	r2, #64	; 0x40
 8002002:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	2398      	movs	r3, #152	; 0x98
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d109      	bne.n	8002024 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	2398      	movs	r3, #152	; 0x98
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	2100      	movs	r1, #0
 8002018:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2100      	movs	r1, #0
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fe58 	bl	8002cd4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0018      	movs	r0, r3
 8002028:	f005 f848 	bl	80070bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2244      	movs	r2, #68	; 0x44
 8002032:	5a9b      	ldrh	r3, [r3, r2]
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	496b      	ldr	r1, [pc, #428]	; (80021e8 <HAL_PCD_IRQHandler+0x300>)
 800203c:	400a      	ands	r2, r1
 800203e:	b291      	uxth	r1, r2
 8002040:	2244      	movs	r2, #68	; 0x44
 8002042:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0018      	movs	r0, r3
 800204a:	f003 f8c9 	bl	80051e0 <USB_ReadInterrupts>
 800204e:	0002      	movs	r2, r0
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	401a      	ands	r2, r3
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	429a      	cmp	r2, r3
 800205c:	d134      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2240      	movs	r2, #64	; 0x40
 8002064:	5a9b      	ldrh	r3, [r3, r2]
 8002066:	b29a      	uxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2108      	movs	r1, #8
 800206e:	430a      	orrs	r2, r1
 8002070:	b291      	uxth	r1, r2
 8002072:	2240      	movs	r2, #64	; 0x40
 8002074:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2244      	movs	r2, #68	; 0x44
 800207c:	5a9b      	ldrh	r3, [r3, r2]
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4959      	ldr	r1, [pc, #356]	; (80021ec <HAL_PCD_IRQHandler+0x304>)
 8002086:	400a      	ands	r2, r1
 8002088:	b291      	uxth	r1, r2
 800208a:	2244      	movs	r2, #68	; 0x44
 800208c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	5a9b      	ldrh	r3, [r3, r2]
 8002096:	b29a      	uxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2104      	movs	r1, #4
 800209e:	430a      	orrs	r2, r1
 80020a0:	b291      	uxth	r1, r2
 80020a2:	2240      	movs	r2, #64	; 0x40
 80020a4:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f003 f898 	bl	80051e0 <USB_ReadInterrupts>
 80020b0:	0002      	movs	r2, r0
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	015b      	lsls	r3, r3, #5
 80020b6:	401a      	ands	r2, r3
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	429a      	cmp	r2, r3
 80020be:	d003      	beq.n	80020c8 <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f004 ffde 	bl	8007084 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f003 f887 	bl	80051e0 <USB_ReadInterrupts>
 80020d2:	0002      	movs	r2, r0
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	d145      	bne.n	8002168 <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2244      	movs	r2, #68	; 0x44
 80020e2:	5a9b      	ldrh	r3, [r3, r2]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	438a      	bics	r2, r1
 80020ee:	b291      	uxth	r1, r2
 80020f0:	2244      	movs	r2, #68	; 0x44
 80020f2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	2398      	movs	r3, #152	; 0x98
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d12f      	bne.n	8002160 <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2240      	movs	r2, #64	; 0x40
 8002106:	5a9b      	ldrh	r3, [r3, r2]
 8002108:	b29a      	uxth	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2104      	movs	r1, #4
 8002110:	430a      	orrs	r2, r1
 8002112:	b291      	uxth	r1, r2
 8002114:	2240      	movs	r2, #64	; 0x40
 8002116:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2240      	movs	r2, #64	; 0x40
 800211e:	5a9b      	ldrh	r3, [r3, r2]
 8002120:	b29a      	uxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2108      	movs	r1, #8
 8002128:	430a      	orrs	r2, r1
 800212a:	b291      	uxth	r1, r2
 800212c:	2240      	movs	r2, #64	; 0x40
 800212e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	2398      	movs	r3, #152	; 0x98
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	2101      	movs	r1, #1
 8002138:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2254      	movs	r2, #84	; 0x54
 8002140:	5a9b      	ldrh	r3, [r3, r2]
 8002142:	b29b      	uxth	r3, r3
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	223c      	movs	r2, #60	; 0x3c
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	2399      	movs	r3, #153	; 0x99
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2101      	movs	r1, #1
 8002158:	0018      	movs	r0, r3
 800215a:	f000 fdbb 	bl	8002cd4 <HAL_PCDEx_LPM_Callback>
 800215e:	e003      	b.n	8002168 <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	0018      	movs	r0, r3
 8002164:	f004 ff8e 	bl	8007084 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0018      	movs	r0, r3
 800216e:	f003 f837 	bl	80051e0 <USB_ReadInterrupts>
 8002172:	0002      	movs	r2, r0
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	401a      	ands	r2, r3
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	429a      	cmp	r2, r3
 8002180:	d10f      	bne.n	80021a2 <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2244      	movs	r2, #68	; 0x44
 8002188:	5a9b      	ldrh	r3, [r3, r2]
 800218a:	b29a      	uxth	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4917      	ldr	r1, [pc, #92]	; (80021f0 <HAL_PCD_IRQHandler+0x308>)
 8002192:	400a      	ands	r2, r1
 8002194:	b291      	uxth	r1, r2
 8002196:	2244      	movs	r2, #68	; 0x44
 8002198:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0018      	movs	r0, r3
 800219e:	f004 ff3e 	bl	800701e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f003 f81a 	bl	80051e0 <USB_ReadInterrupts>
 80021ac:	0002      	movs	r2, r0
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	401a      	ands	r2, r3
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d10b      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2244      	movs	r2, #68	; 0x44
 80021c2:	5a9b      	ldrh	r3, [r3, r2]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	490a      	ldr	r1, [pc, #40]	; (80021f4 <HAL_PCD_IRQHandler+0x30c>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	b291      	uxth	r1, r2
 80021d0:	2244      	movs	r2, #68	; 0x44
 80021d2:	5299      	strh	r1, [r3, r2]
  }
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	fffffbff 	.word	0xfffffbff
 80021e0:	ffffbfff 	.word	0xffffbfff
 80021e4:	ffffdfff 	.word	0xffffdfff
 80021e8:	ffffefff 	.word	0xffffefff
 80021ec:	fffff7ff 	.word	0xfffff7ff
 80021f0:	fffffdff 	.word	0xfffffdff
 80021f4:	fffffeff 	.word	0xfffffeff

080021f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	000a      	movs	r2, r1
 8002202:	1cfb      	adds	r3, r7, #3
 8002204:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	238a      	movs	r3, #138	; 0x8a
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_PCD_SetAddress+0x1e>
 8002212:	2302      	movs	r3, #2
 8002214:	e017      	b.n	8002246 <HAL_PCD_SetAddress+0x4e>
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	238a      	movs	r3, #138	; 0x8a
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	2101      	movs	r1, #1
 800221e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1cfa      	adds	r2, r7, #3
 8002224:	2124      	movs	r1, #36	; 0x24
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	1cfb      	adds	r3, r7, #3
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	0019      	movs	r1, r3
 8002234:	0010      	movs	r0, r2
 8002236:	f002 ffa9 	bl	800518c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	238a      	movs	r3, #138	; 0x8a
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	2100      	movs	r1, #0
 8002242:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b002      	add	sp, #8
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800224e:	b590      	push	{r4, r7, lr}
 8002250:	b085      	sub	sp, #20
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	000c      	movs	r4, r1
 8002258:	0010      	movs	r0, r2
 800225a:	0019      	movs	r1, r3
 800225c:	1cfb      	adds	r3, r7, #3
 800225e:	1c22      	adds	r2, r4, #0
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	003b      	movs	r3, r7
 8002264:	1c02      	adds	r2, r0, #0
 8002266:	801a      	strh	r2, [r3, #0]
 8002268:	1cbb      	adds	r3, r7, #2
 800226a:	1c0a      	adds	r2, r1, #0
 800226c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800226e:	230b      	movs	r3, #11
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002276:	1cfb      	adds	r3, r7, #3
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b25b      	sxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	da0c      	bge.n	800229a <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002280:	1cfb      	adds	r3, r7, #3
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2207      	movs	r2, #7
 8002286:	4013      	ands	r3, r2
 8002288:	015b      	lsls	r3, r3, #5
 800228a:	3328      	adds	r3, #40	; 0x28
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	18d3      	adds	r3, r2, r3
 8002290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	705a      	strb	r2, [r3, #1]
 8002298:	e00c      	b.n	80022b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800229a:	1cfb      	adds	r3, r7, #3
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2207      	movs	r2, #7
 80022a0:	4013      	ands	r3, r2
 80022a2:	015b      	lsls	r3, r3, #5
 80022a4:	3329      	adds	r3, #41	; 0x29
 80022a6:	33ff      	adds	r3, #255	; 0xff
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	18d3      	adds	r3, r2, r3
 80022ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022b4:	1cfb      	adds	r3, r7, #3
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2207      	movs	r2, #7
 80022ba:	4013      	ands	r3, r2
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022c2:	003b      	movs	r3, r7
 80022c4:	881a      	ldrh	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1cba      	adds	r2, r7, #2
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022e4:	1cbb      	adds	r3, r7, #2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d102      	bne.n	80022f2 <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	238a      	movs	r3, #138	; 0x8a
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_PCD_EP_Open+0xb4>
 80022fe:	2302      	movs	r3, #2
 8002300:	e013      	b.n	800232a <HAL_PCD_EP_Open+0xdc>
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	238a      	movs	r3, #138	; 0x8a
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	2101      	movs	r1, #1
 800230a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	0011      	movs	r1, r2
 8002314:	0018      	movs	r0, r3
 8002316:	f001 ff25 	bl	8004164 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	238a      	movs	r3, #138	; 0x8a
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	2100      	movs	r1, #0
 8002322:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002324:	230b      	movs	r3, #11
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	781b      	ldrb	r3, [r3, #0]
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b005      	add	sp, #20
 8002330:	bd90      	pop	{r4, r7, pc}

08002332 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	000a      	movs	r2, r1
 800233c:	1cfb      	adds	r3, r7, #3
 800233e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002340:	1cfb      	adds	r3, r7, #3
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b25b      	sxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	da0c      	bge.n	8002364 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800234a:	1cfb      	adds	r3, r7, #3
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2207      	movs	r2, #7
 8002350:	4013      	ands	r3, r2
 8002352:	015b      	lsls	r3, r3, #5
 8002354:	3328      	adds	r3, #40	; 0x28
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	18d3      	adds	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	705a      	strb	r2, [r3, #1]
 8002362:	e00c      	b.n	800237e <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002364:	1cfb      	adds	r3, r7, #3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2207      	movs	r2, #7
 800236a:	4013      	ands	r3, r2
 800236c:	015b      	lsls	r3, r3, #5
 800236e:	3329      	adds	r3, #41	; 0x29
 8002370:	33ff      	adds	r3, #255	; 0xff
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	18d3      	adds	r3, r2, r3
 8002376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800237e:	1cfb      	adds	r3, r7, #3
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2207      	movs	r2, #7
 8002384:	4013      	ands	r3, r2
 8002386:	b2da      	uxtb	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	238a      	movs	r3, #138	; 0x8a
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_PCD_EP_Close+0x6a>
 8002398:	2302      	movs	r3, #2
 800239a:	e011      	b.n	80023c0 <HAL_PCD_EP_Close+0x8e>
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	238a      	movs	r3, #138	; 0x8a
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	2101      	movs	r1, #1
 80023a4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	0011      	movs	r1, r2
 80023ae:	0018      	movs	r0, r3
 80023b0:	f002 f9d0 	bl	8004754 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	238a      	movs	r3, #138	; 0x8a
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	2100      	movs	r1, #0
 80023bc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b004      	add	sp, #16
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	200b      	movs	r0, #11
 80023d6:	183b      	adds	r3, r7, r0
 80023d8:	1c0a      	adds	r2, r1, #0
 80023da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023dc:	0001      	movs	r1, r0
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2207      	movs	r2, #7
 80023e4:	4013      	ands	r3, r2
 80023e6:	015b      	lsls	r3, r3, #5
 80023e8:	3329      	adds	r3, #41	; 0x29
 80023ea:	33ff      	adds	r3, #255	; 0xff
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	18d3      	adds	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2200      	movs	r2, #0
 8002402:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2200      	movs	r2, #0
 8002408:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800240a:	187b      	adds	r3, r7, r1
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2207      	movs	r2, #7
 8002410:	4013      	ands	r3, r2
 8002412:	b2da      	uxtb	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002418:	187b      	adds	r3, r7, r1
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2207      	movs	r2, #7
 800241e:	4013      	ands	r3, r2
 8002420:	d107      	bne.n	8002432 <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	0011      	movs	r1, r2
 800242a:	0018      	movs	r0, r3
 800242c:	f002 fb08 	bl	8004a40 <USB_EPStartXfer>
 8002430:	e006      	b.n	8002440 <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	0011      	movs	r1, r2
 800243a:	0018      	movs	r0, r3
 800243c:	f002 fb00 	bl	8004a40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b006      	add	sp, #24
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	200b      	movs	r0, #11
 8002458:	183b      	adds	r3, r7, r0
 800245a:	1c0a      	adds	r2, r1, #0
 800245c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800245e:	0001      	movs	r1, r0
 8002460:	187b      	adds	r3, r7, r1
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2207      	movs	r2, #7
 8002466:	4013      	ands	r3, r2
 8002468:	015b      	lsls	r3, r3, #5
 800246a:	3328      	adds	r3, #40	; 0x28
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	18d3      	adds	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2201      	movs	r2, #1
 8002488:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800248a:	187b      	adds	r3, r7, r1
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2207      	movs	r2, #7
 8002490:	4013      	ands	r3, r2
 8002492:	b2da      	uxtb	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002498:	187b      	adds	r3, r7, r1
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2207      	movs	r2, #7
 800249e:	4013      	ands	r3, r2
 80024a0:	d107      	bne.n	80024b2 <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	0011      	movs	r1, r2
 80024aa:	0018      	movs	r0, r3
 80024ac:	f002 fac8 	bl	8004a40 <USB_EPStartXfer>
 80024b0:	e006      	b.n	80024c0 <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	0011      	movs	r1, r2
 80024ba:	0018      	movs	r0, r3
 80024bc:	f002 fac0 	bl	8004a40 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b006      	add	sp, #24
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	000a      	movs	r2, r1
 80024d4:	1cfb      	adds	r3, r7, #3
 80024d6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024d8:	1cfb      	adds	r3, r7, #3
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2207      	movs	r2, #7
 80024de:	401a      	ands	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d901      	bls.n	80024ec <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e050      	b.n	800258e <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024ec:	1cfb      	adds	r3, r7, #3
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da0c      	bge.n	8002510 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f6:	1cfb      	adds	r3, r7, #3
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2207      	movs	r2, #7
 80024fc:	4013      	ands	r3, r2
 80024fe:	015b      	lsls	r3, r3, #5
 8002500:	3328      	adds	r3, #40	; 0x28
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	18d3      	adds	r3, r2, r3
 8002506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	705a      	strb	r2, [r3, #1]
 800250e:	e00a      	b.n	8002526 <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002510:	1cfb      	adds	r3, r7, #3
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	015b      	lsls	r3, r3, #5
 8002516:	3329      	adds	r3, #41	; 0x29
 8002518:	33ff      	adds	r3, #255	; 0xff
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	18d3      	adds	r3, r2, r3
 800251e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252c:	1cfb      	adds	r3, r7, #3
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2207      	movs	r2, #7
 8002532:	4013      	ands	r3, r2
 8002534:	b2da      	uxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	238a      	movs	r3, #138	; 0x8a
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_PCD_EP_SetStall+0x80>
 8002546:	2302      	movs	r3, #2
 8002548:	e021      	b.n	800258e <HAL_PCD_EP_SetStall+0xc4>
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	238a      	movs	r3, #138	; 0x8a
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	2101      	movs	r1, #1
 8002552:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f002 fd41 	bl	8004fe4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002562:	1cfb      	adds	r3, r7, #3
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2207      	movs	r2, #7
 8002568:	4013      	ands	r3, r2
 800256a:	d10a      	bne.n	8002582 <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	218c      	movs	r1, #140	; 0x8c
 8002574:	0089      	lsls	r1, r1, #2
 8002576:	468c      	mov	ip, r1
 8002578:	4463      	add	r3, ip
 800257a:	0019      	movs	r1, r3
 800257c:	0010      	movs	r0, r2
 800257e:	f002 fe3d 	bl	80051fc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	238a      	movs	r3, #138	; 0x8a
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	2100      	movs	r1, #0
 800258a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b004      	add	sp, #16
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	000a      	movs	r2, r1
 80025a0:	1cfb      	adds	r3, r7, #3
 80025a2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025a4:	1cfb      	adds	r3, r7, #3
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	220f      	movs	r2, #15
 80025aa:	401a      	ands	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d901      	bls.n	80025b8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e042      	b.n	800263e <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025b8:	1cfb      	adds	r3, r7, #3
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da0c      	bge.n	80025dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c2:	1cfb      	adds	r3, r7, #3
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2207      	movs	r2, #7
 80025c8:	4013      	ands	r3, r2
 80025ca:	015b      	lsls	r3, r3, #5
 80025cc:	3328      	adds	r3, #40	; 0x28
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	18d3      	adds	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	705a      	strb	r2, [r3, #1]
 80025da:	e00c      	b.n	80025f6 <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025dc:	1cfb      	adds	r3, r7, #3
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2207      	movs	r2, #7
 80025e2:	4013      	ands	r3, r2
 80025e4:	015b      	lsls	r3, r3, #5
 80025e6:	3329      	adds	r3, #41	; 0x29
 80025e8:	33ff      	adds	r3, #255	; 0xff
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	18d3      	adds	r3, r2, r3
 80025ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025fc:	1cfb      	adds	r3, r7, #3
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2207      	movs	r2, #7
 8002602:	4013      	ands	r3, r2
 8002604:	b2da      	uxtb	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	238a      	movs	r3, #138	; 0x8a
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_PCD_EP_ClrStall+0x84>
 8002616:	2302      	movs	r3, #2
 8002618:	e011      	b.n	800263e <HAL_PCD_EP_ClrStall+0xa8>
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	238a      	movs	r3, #138	; 0x8a
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	2101      	movs	r1, #1
 8002622:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	0011      	movs	r1, r2
 800262c:	0018      	movs	r0, r3
 800262e:	f002 fd1b 	bl	8005068 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	238a      	movs	r3, #138	; 0x8a
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	2100      	movs	r1, #0
 800263a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b004      	add	sp, #16
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002650:	e2b3      	b.n	8002bba <PCD_EP_ISR_Handler+0x572>
  {
    wIstr = hpcd->Instance->ISTR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	2016      	movs	r0, #22
 8002658:	183b      	adds	r3, r7, r0
 800265a:	2144      	movs	r1, #68	; 0x44
 800265c:	5a52      	ldrh	r2, [r2, r1]
 800265e:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002660:	183b      	adds	r3, r7, r0
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	2015      	movs	r0, #21
 8002668:	183b      	adds	r3, r7, r0
 800266a:	210f      	movs	r1, #15
 800266c:	400a      	ands	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002670:	183b      	adds	r3, r7, r0
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d000      	beq.n	800267a <PCD_EP_ISR_Handler+0x32>
 8002678:	e141      	b.n	80028fe <PCD_EP_ISR_Handler+0x2b6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800267a:	2316      	movs	r3, #22
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	2210      	movs	r2, #16
 8002682:	4013      	ands	r3, r2
 8002684:	d14e      	bne.n	8002724 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	4aca      	ldr	r2, [pc, #808]	; (80029b8 <PCD_EP_ISR_Handler+0x370>)
 8002690:	4013      	ands	r3, r2
 8002692:	b29c      	uxth	r4, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4ac8      	ldr	r2, [pc, #800]	; (80029bc <PCD_EP_ISR_Handler+0x374>)
 800269a:	4322      	orrs	r2, r4
 800269c:	b292      	uxth	r2, r2
 800269e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3328      	adds	r3, #40	; 0x28
 80026a4:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2250      	movs	r2, #80	; 0x50
 80026ac:	5a9b      	ldrh	r3, [r3, r2]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	001a      	movs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	18d2      	adds	r2, r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	18d3      	adds	r3, r2, r3
 80026c0:	4abf      	ldr	r2, [pc, #764]	; (80029c0 <PCD_EP_ISR_Handler+0x378>)
 80026c2:	4694      	mov	ip, r2
 80026c4:	4463      	add	r3, ip
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	059b      	lsls	r3, r3, #22
 80026ca:	0d9a      	lsrs	r2, r3, #22
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	18d2      	adds	r2, r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2100      	movs	r1, #0
 80026e2:	0018      	movs	r0, r3
 80026e4:	f004 fc80 	bl	8006fe8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2224      	movs	r2, #36	; 0x24
 80026ec:	5c9b      	ldrb	r3, [r3, r2]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d100      	bne.n	80026f6 <PCD_EP_ISR_Handler+0xae>
 80026f4:	e261      	b.n	8002bba <PCD_EP_ISR_Handler+0x572>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d000      	beq.n	8002700 <PCD_EP_ISR_Handler+0xb8>
 80026fe:	e25c      	b.n	8002bba <PCD_EP_ISR_Handler+0x572>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	; 0x24
 8002704:	5c9b      	ldrb	r3, [r3, r2]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	4252      	negs	r2, r2
 800270c:	4313      	orrs	r3, r2
 800270e:	b2da      	uxtb	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b291      	uxth	r1, r2
 8002716:	224c      	movs	r2, #76	; 0x4c
 8002718:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2224      	movs	r2, #36	; 0x24
 800271e:	2100      	movs	r1, #0
 8002720:	5499      	strb	r1, [r3, r2]
 8002722:	e24a      	b.n	8002bba <PCD_EP_ISR_Handler+0x572>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3329      	adds	r3, #41	; 0x29
 8002728:	33ff      	adds	r3, #255	; 0xff
 800272a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2112      	movs	r1, #18
 8002732:	187b      	adds	r3, r7, r1
 8002734:	8812      	ldrh	r2, [r2, #0]
 8002736:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002738:	187b      	adds	r3, r7, r1
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4013      	ands	r3, r2
 8002742:	d033      	beq.n	80027ac <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2250      	movs	r2, #80	; 0x50
 800274a:	5a9b      	ldrh	r3, [r3, r2]
 800274c:	b29b      	uxth	r3, r3
 800274e:	001a      	movs	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	18d2      	adds	r2, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	18d3      	adds	r3, r2, r3
 800275e:	4a99      	ldr	r2, [pc, #612]	; (80029c4 <PCD_EP_ISR_Handler+0x37c>)
 8002760:	4694      	mov	ip, r2
 8002762:	4463      	add	r3, ip
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	059b      	lsls	r3, r3, #22
 8002768:	0d9a      	lsrs	r2, r3, #22
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	228c      	movs	r2, #140	; 0x8c
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	1899      	adds	r1, r3, r2
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002782:	b29b      	uxth	r3, r3
 8002784:	f002 fd87 	bl	8005296 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	4a8d      	ldr	r2, [pc, #564]	; (80029c8 <PCD_EP_ISR_Handler+0x380>)
 8002792:	4013      	ands	r3, r2
 8002794:	b29c      	uxth	r4, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	4322      	orrs	r2, r4
 800279e:	b292      	uxth	r2, r2
 80027a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f004 fbed 	bl	8006f84 <HAL_PCD_SetupStageCallback>
 80027aa:	e206      	b.n	8002bba <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027ac:	2312      	movs	r3, #18
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2200      	movs	r2, #0
 80027b2:	5e9b      	ldrsh	r3, [r3, r2]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db00      	blt.n	80027ba <PCD_EP_ISR_Handler+0x172>
 80027b8:	e1ff      	b.n	8002bba <PCD_EP_ISR_Handler+0x572>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4a81      	ldr	r2, [pc, #516]	; (80029c8 <PCD_EP_ISR_Handler+0x380>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	b29c      	uxth	r4, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	4322      	orrs	r2, r4
 80027d0:	b292      	uxth	r2, r2
 80027d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2250      	movs	r2, #80	; 0x50
 80027da:	5a9b      	ldrh	r3, [r3, r2]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	001a      	movs	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	18d2      	adds	r2, r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	18d3      	adds	r3, r2, r3
 80027ee:	4a75      	ldr	r2, [pc, #468]	; (80029c4 <PCD_EP_ISR_Handler+0x37c>)
 80027f0:	4694      	mov	ip, r2
 80027f2:	4463      	add	r3, ip
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	059b      	lsls	r3, r3, #22
 80027f8:	0d9a      	lsrs	r2, r3, #22
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01a      	beq.n	800283c <PCD_EP_ISR_Handler+0x1f4>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <PCD_EP_ISR_Handler+0x1f4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6959      	ldr	r1, [r3, #20]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800281e:	b29b      	uxth	r3, r3
 8002820:	f002 fd39 	bl	8005296 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	18d2      	adds	r2, r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2100      	movs	r1, #0
 8002836:	0018      	movs	r0, r3
 8002838:	f004 fbb9 	bl	8006fae <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	001c      	movs	r4, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2250      	movs	r2, #80	; 0x50
 8002848:	5a9b      	ldrh	r3, [r3, r2]
 800284a:	b29b      	uxth	r3, r3
 800284c:	18e4      	adds	r4, r4, r3
 800284e:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <PCD_EP_ISR_Handler+0x37c>)
 8002850:	18e3      	adds	r3, r4, r3
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10e      	bne.n	800287a <PCD_EP_ISR_Handler+0x232>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	4a5a      	ldr	r2, [pc, #360]	; (80029cc <PCD_EP_ISR_Handler+0x384>)
 8002862:	4013      	ands	r3, r2
 8002864:	b29a      	uxth	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	801a      	strh	r2, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	4a53      	ldr	r2, [pc, #332]	; (80029bc <PCD_EP_ISR_Handler+0x374>)
 8002870:	4313      	orrs	r3, r2
 8002872:	b29a      	uxth	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	801a      	strh	r2, [r3, #0]
 8002878:	e02b      	b.n	80028d2 <PCD_EP_ISR_Handler+0x28a>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b3e      	cmp	r3, #62	; 0x3e
 8002880:	d812      	bhi.n	80028a8 <PCD_EP_ISR_Handler+0x260>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2201      	movs	r2, #1
 8002890:	4013      	ands	r3, r2
 8002892:	d002      	beq.n	800289a <PCD_EP_ISR_Handler+0x252>
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	3301      	adds	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	b29b      	uxth	r3, r3
 800289e:	029b      	lsls	r3, r3, #10
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	e014      	b.n	80028d2 <PCD_EP_ISR_Handler+0x28a>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	221f      	movs	r2, #31
 80028b6:	4013      	ands	r3, r2
 80028b8:	d102      	bne.n	80028c0 <PCD_EP_ISR_Handler+0x278>
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	3b01      	subs	r3, #1
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <PCD_EP_ISR_Handler+0x374>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <PCD_EP_ISR_Handler+0x388>)
 80028dc:	4013      	ands	r3, r2
 80028de:	b29c      	uxth	r4, r3
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	015b      	lsls	r3, r3, #5
 80028e4:	4063      	eors	r3, r4
 80028e6:	b29c      	uxth	r4, r3
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	019b      	lsls	r3, r3, #6
 80028ec:	4063      	eors	r3, r4
 80028ee:	b29c      	uxth	r4, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a37      	ldr	r2, [pc, #220]	; (80029d4 <PCD_EP_ISR_Handler+0x38c>)
 80028f6:	4322      	orrs	r2, r4
 80028f8:	b292      	uxth	r2, r2
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	e15d      	b.n	8002bba <PCD_EP_ISR_Handler+0x572>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	001a      	movs	r2, r3
 8002904:	2315      	movs	r3, #21
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	18d2      	adds	r2, r2, r3
 800290e:	2112      	movs	r1, #18
 8002910:	187b      	adds	r3, r7, r1
 8002912:	8812      	ldrh	r2, [r2, #0]
 8002914:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	5e9b      	ldrsh	r3, [r3, r2]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db00      	blt.n	8002922 <PCD_EP_ISR_Handler+0x2da>
 8002920:	e0f5      	b.n	8002b0e <PCD_EP_ISR_Handler+0x4c6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	001a      	movs	r2, r3
 8002928:	2115      	movs	r1, #21
 800292a:	187b      	adds	r3, r7, r1
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	18d3      	adds	r3, r2, r3
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	4a24      	ldr	r2, [pc, #144]	; (80029c8 <PCD_EP_ISR_Handler+0x380>)
 8002938:	4013      	ands	r3, r2
 800293a:	b29c      	uxth	r4, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	001a      	movs	r2, r3
 8002942:	187b      	adds	r3, r7, r1
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	18d3      	adds	r3, r2, r3
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	4322      	orrs	r2, r4
 800294e:	b292      	uxth	r2, r2
 8002950:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002952:	187b      	adds	r3, r7, r1
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	015b      	lsls	r3, r3, #5
 8002958:	3329      	adds	r3, #41	; 0x29
 800295a:	33ff      	adds	r3, #255	; 0xff
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	18d3      	adds	r3, r2, r3
 8002960:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	7b1b      	ldrb	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d136      	bne.n	80029d8 <PCD_EP_ISR_Handler+0x390>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2250      	movs	r2, #80	; 0x50
 8002970:	5a9b      	ldrh	r3, [r3, r2]
 8002972:	b29b      	uxth	r3, r3
 8002974:	001a      	movs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	18d2      	adds	r2, r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	18d3      	adds	r3, r2, r3
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <PCD_EP_ISR_Handler+0x37c>)
 8002986:	4694      	mov	ip, r2
 8002988:	4463      	add	r3, ip
 800298a:	881a      	ldrh	r2, [r3, #0]
 800298c:	211e      	movs	r1, #30
 800298e:	187b      	adds	r3, r7, r1
 8002990:	0592      	lsls	r2, r2, #22
 8002992:	0d92      	lsrs	r2, r2, #22
 8002994:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 8002996:	187b      	adds	r3, r7, r1
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d100      	bne.n	80029a0 <PCD_EP_ISR_Handler+0x358>
 800299e:	e08b      	b.n	8002ab8 <PCD_EP_ISR_Handler+0x470>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6959      	ldr	r1, [r3, #20]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88da      	ldrh	r2, [r3, #6]
 80029ac:	231e      	movs	r3, #30
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	f002 fc70 	bl	8005296 <USB_ReadPMA>
 80029b6:	e07f      	b.n	8002ab8 <PCD_EP_ISR_Handler+0x470>
 80029b8:	ffff8f0f 	.word	0xffff8f0f
 80029bc:	ffff8000 	.word	0xffff8000
 80029c0:	00000402 	.word	0x00000402
 80029c4:	00000406 	.word	0x00000406
 80029c8:	00000f8f 	.word	0x00000f8f
 80029cc:	ffff83ff 	.word	0xffff83ff
 80029d0:	ffffbf8f 	.word	0xffffbf8f
 80029d4:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	001a      	movs	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	18d3      	adds	r3, r2, r3
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	001a      	movs	r2, r3
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	01db      	lsls	r3, r3, #7
 80029f0:	4013      	ands	r3, r2
 80029f2:	d025      	beq.n	8002a40 <PCD_EP_ISR_Handler+0x3f8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2250      	movs	r2, #80	; 0x50
 80029fa:	5a9b      	ldrh	r3, [r3, r2]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	001a      	movs	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	18d2      	adds	r2, r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	18d3      	adds	r3, r2, r3
 8002a0e:	4a72      	ldr	r2, [pc, #456]	; (8002bd8 <PCD_EP_ISR_Handler+0x590>)
 8002a10:	4694      	mov	ip, r2
 8002a12:	4463      	add	r3, ip
 8002a14:	881a      	ldrh	r2, [r3, #0]
 8002a16:	211e      	movs	r1, #30
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	0592      	lsls	r2, r2, #22
 8002a1c:	0d92      	lsrs	r2, r2, #22
 8002a1e:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d030      	beq.n	8002a8a <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6959      	ldr	r1, [r3, #20]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	891a      	ldrh	r2, [r3, #8]
 8002a34:	231e      	movs	r3, #30
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	f002 fc2c 	bl	8005296 <USB_ReadPMA>
 8002a3e:	e024      	b.n	8002a8a <PCD_EP_ISR_Handler+0x442>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2250      	movs	r2, #80	; 0x50
 8002a46:	5a9b      	ldrh	r3, [r3, r2]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	18d2      	adds	r2, r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	18d3      	adds	r3, r2, r3
 8002a5a:	4a60      	ldr	r2, [pc, #384]	; (8002bdc <PCD_EP_ISR_Handler+0x594>)
 8002a5c:	4694      	mov	ip, r2
 8002a5e:	4463      	add	r3, ip
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	211e      	movs	r1, #30
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	0592      	lsls	r2, r2, #22
 8002a68:	0d92      	lsrs	r2, r2, #22
 8002a6a:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6959      	ldr	r1, [r3, #20]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	895a      	ldrh	r2, [r3, #10]
 8002a80:	231e      	movs	r3, #30
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	f002 fc06 	bl	8005296 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	001a      	movs	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	18d3      	adds	r3, r2, r3
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4a50      	ldr	r2, [pc, #320]	; (8002be0 <PCD_EP_ISR_Handler+0x598>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b29c      	uxth	r4, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	18d3      	adds	r3, r2, r3
 8002ab0:	4a4c      	ldr	r2, [pc, #304]	; (8002be4 <PCD_EP_ISR_Handler+0x59c>)
 8002ab2:	4322      	orrs	r2, r4
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	211e      	movs	r1, #30
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	18d2      	adds	r2, r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	18d2      	adds	r2, r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <PCD_EP_ISR_Handler+0x4a4>
 8002ade:	231e      	movs	r3, #30
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	881a      	ldrh	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d207      	bcs.n	8002afc <PCD_EP_ISR_Handler+0x4b4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	781a      	ldrb	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0011      	movs	r1, r2
 8002af4:	0018      	movs	r0, r3
 8002af6:	f004 fa5a 	bl	8006fae <HAL_PCD_DataOutStageCallback>
 8002afa:	e008      	b.n	8002b0e <PCD_EP_ISR_Handler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	7819      	ldrb	r1, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fc5d 	bl	80023c8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b0e:	2312      	movs	r3, #18
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	2280      	movs	r2, #128	; 0x80
 8002b16:	4013      	ands	r3, r2
 8002b18:	d04f      	beq.n	8002bba <PCD_EP_ISR_Handler+0x572>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b1a:	2115      	movs	r1, #21
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	015b      	lsls	r3, r3, #5
 8002b22:	3328      	adds	r3, #40	; 0x28
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	18d3      	adds	r3, r2, r3
 8002b28:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	001a      	movs	r2, r3
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	18d3      	adds	r3, r2, r3
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <PCD_EP_ISR_Handler+0x5a0>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	b29c      	uxth	r4, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	001a      	movs	r2, r3
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	18d3      	adds	r3, r2, r3
 8002b50:	4a26      	ldr	r2, [pc, #152]	; (8002bec <PCD_EP_ISR_Handler+0x5a4>)
 8002b52:	4322      	orrs	r2, r4
 8002b54:	b292      	uxth	r2, r2
 8002b56:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2250      	movs	r2, #80	; 0x50
 8002b5e:	5a9b      	ldrh	r3, [r3, r2]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	001a      	movs	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	18d2      	adds	r2, r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	18d3      	adds	r3, r2, r3
 8002b72:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <PCD_EP_ISR_Handler+0x590>)
 8002b74:	4694      	mov	ip, r2
 8002b76:	4463      	add	r3, ip
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	059b      	lsls	r3, r3, #22
 8002b7c:	0d9a      	lsrs	r2, r3, #22
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	18d2      	adds	r2, r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <PCD_EP_ISR_Handler+0x560>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f004 fa21 	bl	8006fe8 <HAL_PCD_DataInStageCallback>
 8002ba6:	e008      	b.n	8002bba <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	7819      	ldrb	r1, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fc48 	bl	800244a <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2244      	movs	r2, #68	; 0x44
 8002bc0:	5a9b      	ldrh	r3, [r3, r2]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	b21b      	sxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	da00      	bge.n	8002bcc <PCD_EP_ISR_Handler+0x584>
 8002bca:	e542      	b.n	8002652 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b009      	add	sp, #36	; 0x24
 8002bd4:	bd90      	pop	{r4, r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	00000402 	.word	0x00000402
 8002bdc:	00000406 	.word	0x00000406
 8002be0:	ffff8f8f 	.word	0xffff8f8f
 8002be4:	ffff80c0 	.word	0xffff80c0
 8002be8:	ffff8f0f 	.word	0xffff8f0f
 8002bec:	ffff8000 	.word	0xffff8000

08002bf0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	0008      	movs	r0, r1
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	240a      	movs	r4, #10
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	1c02      	adds	r2, r0, #0
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	2308      	movs	r3, #8
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	1c0a      	adds	r2, r1, #0
 8002c0c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	4013      	ands	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	2207      	movs	r2, #7
 8002c24:	4013      	ands	r3, r2
 8002c26:	015b      	lsls	r3, r3, #5
 8002c28:	3328      	adds	r3, #40	; 0x28
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	18d3      	adds	r3, r2, r3
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e008      	b.n	8002c44 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c32:	230a      	movs	r3, #10
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	015b      	lsls	r3, r3, #5
 8002c3a:	3329      	adds	r3, #41	; 0x29
 8002c3c:	33ff      	adds	r3, #255	; 0xff
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c44:	2308      	movs	r3, #8
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	80da      	strh	r2, [r3, #6]
 8002c5c:	e00b      	b.n	8002c76 <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2201      	movs	r2, #1
 8002c62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b007      	add	sp, #28
 8002c7e:	bd90      	pop	{r4, r7, pc}

08002c80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	239a      	movs	r3, #154	; 0x9a
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	2101      	movs	r1, #1
 8002c96:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	2398      	movs	r3, #152	; 0x98
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2254      	movs	r2, #84	; 0x54
 8002ca6:	5a9b      	ldrh	r3, [r3, r2]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2201      	movs	r2, #1
 8002cac:	4313      	orrs	r3, r2
 8002cae:	b299      	uxth	r1, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2254      	movs	r2, #84	; 0x54
 8002cb4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2254      	movs	r2, #84	; 0x54
 8002cba:	5a9b      	ldrh	r3, [r3, r2]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b299      	uxth	r1, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2254      	movs	r2, #84	; 0x54
 8002cc8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b004      	add	sp, #16
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	000a      	movs	r2, r1
 8002cde:	1cfb      	adds	r3, r7, #3
 8002ce0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b002      	add	sp, #8
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f000 fb76 	bl	80033ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	d100      	bne.n	8002d0c <HAL_RCC_OscConfig+0x20>
 8002d0a:	e08e      	b.n	8002e2a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d0c:	4bc5      	ldr	r3, [pc, #788]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	220c      	movs	r2, #12
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d00e      	beq.n	8002d36 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d18:	4bc2      	ldr	r3, [pc, #776]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	220c      	movs	r2, #12
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d117      	bne.n	8002d54 <HAL_RCC_OscConfig+0x68>
 8002d24:	4bbf      	ldr	r3, [pc, #764]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	23c0      	movs	r3, #192	; 0xc0
 8002d2a:	025b      	lsls	r3, r3, #9
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	025b      	lsls	r3, r3, #9
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d10e      	bne.n	8002d54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d36:	4bbb      	ldr	r3, [pc, #748]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	029b      	lsls	r3, r3, #10
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d100      	bne.n	8002d44 <HAL_RCC_OscConfig+0x58>
 8002d42:	e071      	b.n	8002e28 <HAL_RCC_OscConfig+0x13c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d000      	beq.n	8002d4e <HAL_RCC_OscConfig+0x62>
 8002d4c:	e06c      	b.n	8002e28 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f000 fb4c 	bl	80033ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x80>
 8002d5c:	4bb1      	ldr	r3, [pc, #708]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4bb0      	ldr	r3, [pc, #704]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d62:	2180      	movs	r1, #128	; 0x80
 8002d64:	0249      	lsls	r1, r1, #9
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e02f      	b.n	8002dcc <HAL_RCC_OscConfig+0xe0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10c      	bne.n	8002d8e <HAL_RCC_OscConfig+0xa2>
 8002d74:	4bab      	ldr	r3, [pc, #684]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4baa      	ldr	r3, [pc, #680]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d7a:	49ab      	ldr	r1, [pc, #684]	; (8003028 <HAL_RCC_OscConfig+0x33c>)
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	4ba8      	ldr	r3, [pc, #672]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4ba7      	ldr	r3, [pc, #668]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d86:	49a9      	ldr	r1, [pc, #676]	; (800302c <HAL_RCC_OscConfig+0x340>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e01e      	b.n	8002dcc <HAL_RCC_OscConfig+0xe0>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	d10e      	bne.n	8002db4 <HAL_RCC_OscConfig+0xc8>
 8002d96:	4ba3      	ldr	r3, [pc, #652]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4ba2      	ldr	r3, [pc, #648]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	02c9      	lsls	r1, r1, #11
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	4b9f      	ldr	r3, [pc, #636]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b9e      	ldr	r3, [pc, #632]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	0249      	lsls	r1, r1, #9
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0xe0>
 8002db4:	4b9b      	ldr	r3, [pc, #620]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b9a      	ldr	r3, [pc, #616]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002dba:	499b      	ldr	r1, [pc, #620]	; (8003028 <HAL_RCC_OscConfig+0x33c>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4b98      	ldr	r3, [pc, #608]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b97      	ldr	r3, [pc, #604]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002dc6:	4999      	ldr	r1, [pc, #612]	; (800302c <HAL_RCC_OscConfig+0x340>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d014      	beq.n	8002dfe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fd ff46 	bl	8000c64 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dde:	f7fd ff41 	bl	8000c64 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e2fd      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df0:	4b8c      	ldr	r3, [pc, #560]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0xf2>
 8002dfc:	e015      	b.n	8002e2a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fd ff31 	bl	8000c64 <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fd ff2c 	bl	8000c64 <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e2e8      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	4b82      	ldr	r3, [pc, #520]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	029b      	lsls	r3, r3, #10
 8002e22:	4013      	ands	r3, r2
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x11c>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	d100      	bne.n	8002e36 <HAL_RCC_OscConfig+0x14a>
 8002e34:	e06c      	b.n	8002f10 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e36:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e40:	4b78      	ldr	r3, [pc, #480]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	220c      	movs	r2, #12
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d11f      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1a0>
 8002e4c:	4b75      	ldr	r3, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	23c0      	movs	r3, #192	; 0xc0
 8002e52:	025b      	lsls	r3, r3, #9
 8002e54:	401a      	ands	r2, r3
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b71      	ldr	r3, [pc, #452]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2202      	movs	r2, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x188>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e2bb      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b6b      	ldr	r3, [pc, #428]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	22f8      	movs	r2, #248	; 0xf8
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00da      	lsls	r2, r3, #3
 8002e84:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e041      	b.n	8002f10 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d024      	beq.n	8002ede <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b62      	ldr	r3, [pc, #392]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fd fee0 	bl	8000c64 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eaa:	f7fd fedb 	bl	8000c64 <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e297      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d0f1      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b57      	ldr	r3, [pc, #348]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	22f8      	movs	r2, #248	; 0xf8
 8002ecc:	4393      	bics	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	00da      	lsls	r2, r3, #3
 8002ed6:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e018      	b.n	8002f10 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ede:	4b51      	ldr	r3, [pc, #324]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fd febb 	bl	8000c64 <HAL_GetTick>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef4:	f7fd feb6 	bl	8000c64 <HAL_GetTick>
 8002ef8:	0002      	movs	r2, r0
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e272      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d1f1      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2208      	movs	r2, #8
 8002f16:	4013      	ands	r3, r2
 8002f18:	d036      	beq.n	8002f88 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b40      	ldr	r3, [pc, #256]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002f28:	2101      	movs	r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fd fe99 	bl	8000c64 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fd fe94 	bl	8000c64 <HAL_GetTick>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e250      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d0f1      	beq.n	8002f38 <HAL_RCC_OscConfig+0x24c>
 8002f54:	e018      	b.n	8002f88 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f56:	4b33      	ldr	r3, [pc, #204]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5a:	4b32      	ldr	r3, [pc, #200]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	438a      	bics	r2, r1
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7fd fe7f 	bl	8000c64 <HAL_GetTick>
 8002f66:	0003      	movs	r3, r0
 8002f68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fd fe7a 	bl	8000c64 <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e236      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7e:	4b29      	ldr	r3, [pc, #164]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2202      	movs	r2, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	d1f1      	bne.n	8002f6c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d100      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2a8>
 8002f92:	e0b5      	b.n	8003100 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f94:	231f      	movs	r3, #31
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	055b      	lsls	r3, r3, #21
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d111      	bne.n	8002fcc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	0549      	lsls	r1, r1, #21
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	61da      	str	r2, [r3, #28]
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	055b      	lsls	r3, r3, #21
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fc4:	231f      	movs	r3, #31
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_RCC_OscConfig+0x344>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d11a      	bne.n	800300e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <HAL_RCC_OscConfig+0x344>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_RCC_OscConfig+0x344>)
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	0049      	lsls	r1, r1, #1
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe6:	f7fd fe3d 	bl	8000c64 <HAL_GetTick>
 8002fea:	0003      	movs	r3, r0
 8002fec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff0:	f7fd fe38 	bl	8000c64 <HAL_GetTick>
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1f4      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_OscConfig+0x344>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4013      	ands	r3, r2
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d10e      	bne.n	8003034 <HAL_RCC_OscConfig+0x348>
 8003016:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	4b02      	ldr	r3, [pc, #8]	; (8003024 <HAL_RCC_OscConfig+0x338>)
 800301c:	2101      	movs	r1, #1
 800301e:	430a      	orrs	r2, r1
 8003020:	621a      	str	r2, [r3, #32]
 8003022:	e035      	b.n	8003090 <HAL_RCC_OscConfig+0x3a4>
 8003024:	40021000 	.word	0x40021000
 8003028:	fffeffff 	.word	0xfffeffff
 800302c:	fffbffff 	.word	0xfffbffff
 8003030:	40007000 	.word	0x40007000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10c      	bne.n	8003056 <HAL_RCC_OscConfig+0x36a>
 800303c:	4bca      	ldr	r3, [pc, #808]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	4bc9      	ldr	r3, [pc, #804]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003042:	2101      	movs	r1, #1
 8003044:	438a      	bics	r2, r1
 8003046:	621a      	str	r2, [r3, #32]
 8003048:	4bc7      	ldr	r3, [pc, #796]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800304a:	6a1a      	ldr	r2, [r3, #32]
 800304c:	4bc6      	ldr	r3, [pc, #792]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800304e:	2104      	movs	r1, #4
 8003050:	438a      	bics	r2, r1
 8003052:	621a      	str	r2, [r3, #32]
 8003054:	e01c      	b.n	8003090 <HAL_RCC_OscConfig+0x3a4>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x38c>
 800305e:	4bc2      	ldr	r3, [pc, #776]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	4bc1      	ldr	r3, [pc, #772]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003064:	2104      	movs	r1, #4
 8003066:	430a      	orrs	r2, r1
 8003068:	621a      	str	r2, [r3, #32]
 800306a:	4bbf      	ldr	r3, [pc, #764]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	4bbe      	ldr	r3, [pc, #760]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003070:	2101      	movs	r1, #1
 8003072:	430a      	orrs	r2, r1
 8003074:	621a      	str	r2, [r3, #32]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0x3a4>
 8003078:	4bbb      	ldr	r3, [pc, #748]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	4bba      	ldr	r3, [pc, #744]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800307e:	2101      	movs	r1, #1
 8003080:	438a      	bics	r2, r1
 8003082:	621a      	str	r2, [r3, #32]
 8003084:	4bb8      	ldr	r3, [pc, #736]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	4bb7      	ldr	r3, [pc, #732]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800308a:	2104      	movs	r1, #4
 800308c:	438a      	bics	r2, r1
 800308e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d014      	beq.n	80030c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003098:	f7fd fde4 	bl	8000c64 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	e009      	b.n	80030b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fd fddf 	bl	8000c64 <HAL_GetTick>
 80030a6:	0002      	movs	r2, r0
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	4aaf      	ldr	r2, [pc, #700]	; (800336c <HAL_RCC_OscConfig+0x680>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e19a      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	4bac      	ldr	r3, [pc, #688]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	2202      	movs	r2, #2
 80030bc:	4013      	ands	r3, r2
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x3b6>
 80030c0:	e013      	b.n	80030ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fd fdcf 	bl	8000c64 <HAL_GetTick>
 80030c6:	0003      	movs	r3, r0
 80030c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	e009      	b.n	80030e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fd fdca 	bl	8000c64 <HAL_GetTick>
 80030d0:	0002      	movs	r2, r0
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	4aa5      	ldr	r2, [pc, #660]	; (800336c <HAL_RCC_OscConfig+0x680>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e185      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	4ba1      	ldr	r3, [pc, #644]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	2202      	movs	r2, #2
 80030e6:	4013      	ands	r3, r2
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030ea:	231f      	movs	r3, #31
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f4:	4b9c      	ldr	r3, [pc, #624]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	4b9b      	ldr	r3, [pc, #620]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80030fa:	499d      	ldr	r1, [pc, #628]	; (8003370 <HAL_RCC_OscConfig+0x684>)
 80030fc:	400a      	ands	r2, r1
 80030fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2210      	movs	r2, #16
 8003106:	4013      	ands	r3, r2
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d12a      	bne.n	8003168 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003112:	4b95      	ldr	r3, [pc, #596]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003116:	4b94      	ldr	r3, [pc, #592]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003118:	2104      	movs	r1, #4
 800311a:	430a      	orrs	r2, r1
 800311c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800311e:	4b92      	ldr	r3, [pc, #584]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003122:	4b91      	ldr	r3, [pc, #580]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003124:	2101      	movs	r1, #1
 8003126:	430a      	orrs	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fd fd9b 	bl	8000c64 <HAL_GetTick>
 800312e:	0003      	movs	r3, r0
 8003130:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003134:	f7fd fd96 	bl	8000c64 <HAL_GetTick>
 8003138:	0002      	movs	r2, r0
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e152      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003146:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	2202      	movs	r2, #2
 800314c:	4013      	ands	r3, r2
 800314e:	d0f1      	beq.n	8003134 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003150:	4b85      	ldr	r3, [pc, #532]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	22f8      	movs	r2, #248	; 0xf8
 8003156:	4393      	bics	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	00da      	lsls	r2, r3, #3
 8003160:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003162:	430a      	orrs	r2, r1
 8003164:	635a      	str	r2, [r3, #52]	; 0x34
 8003166:	e034      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	3305      	adds	r3, #5
 800316e:	d111      	bne.n	8003194 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003170:	4b7d      	ldr	r3, [pc, #500]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003174:	4b7c      	ldr	r3, [pc, #496]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003176:	2104      	movs	r1, #4
 8003178:	438a      	bics	r2, r1
 800317a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800317c:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	22f8      	movs	r2, #248	; 0xf8
 8003182:	4393      	bics	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	00da      	lsls	r2, r3, #3
 800318c:	4b76      	ldr	r3, [pc, #472]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800318e:	430a      	orrs	r2, r1
 8003190:	635a      	str	r2, [r3, #52]	; 0x34
 8003192:	e01e      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003194:	4b74      	ldr	r3, [pc, #464]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003198:	4b73      	ldr	r3, [pc, #460]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800319a:	2104      	movs	r1, #4
 800319c:	430a      	orrs	r2, r1
 800319e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80031a0:	4b71      	ldr	r3, [pc, #452]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80031a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a4:	4b70      	ldr	r3, [pc, #448]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	438a      	bics	r2, r1
 80031aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ac:	f7fd fd5a 	bl	8000c64 <HAL_GetTick>
 80031b0:	0003      	movs	r3, r0
 80031b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031b6:	f7fd fd55 	bl	8000c64 <HAL_GetTick>
 80031ba:	0002      	movs	r2, r0
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e111      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031c8:	4b67      	ldr	r3, [pc, #412]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	2202      	movs	r2, #2
 80031ce:	4013      	ands	r3, r2
 80031d0:	d1f1      	bne.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2220      	movs	r2, #32
 80031d8:	4013      	ands	r3, r2
 80031da:	d05c      	beq.n	8003296 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031dc:	4b62      	ldr	r3, [pc, #392]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	220c      	movs	r2, #12
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d00e      	beq.n	8003206 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031e8:	4b5f      	ldr	r3, [pc, #380]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	220c      	movs	r2, #12
 80031ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d114      	bne.n	800321e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031f4:	4b5c      	ldr	r3, [pc, #368]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	23c0      	movs	r3, #192	; 0xc0
 80031fa:	025b      	lsls	r3, r3, #9
 80031fc:	401a      	ands	r2, r3
 80031fe:	23c0      	movs	r3, #192	; 0xc0
 8003200:	025b      	lsls	r3, r3, #9
 8003202:	429a      	cmp	r2, r3
 8003204:	d10b      	bne.n	800321e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003206:	4b58      	ldr	r3, [pc, #352]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	025b      	lsls	r3, r3, #9
 800320e:	4013      	ands	r3, r2
 8003210:	d040      	beq.n	8003294 <HAL_RCC_OscConfig+0x5a8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d03c      	beq.n	8003294 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0e6      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01b      	beq.n	800325e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003226:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322a:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800322c:	2180      	movs	r1, #128	; 0x80
 800322e:	0249      	lsls	r1, r1, #9
 8003230:	430a      	orrs	r2, r1
 8003232:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd fd16 	bl	8000c64 <HAL_GetTick>
 8003238:	0003      	movs	r3, r0
 800323a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800323e:	f7fd fd11 	bl	8000c64 <HAL_GetTick>
 8003242:	0002      	movs	r2, r0
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0cd      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003250:	4b45      	ldr	r3, [pc, #276]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	025b      	lsls	r3, r3, #9
 8003258:	4013      	ands	r3, r2
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x552>
 800325c:	e01b      	b.n	8003296 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800325e:	4b42      	ldr	r3, [pc, #264]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003264:	4943      	ldr	r1, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x688>)
 8003266:	400a      	ands	r2, r1
 8003268:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fd fcfb 	bl	8000c64 <HAL_GetTick>
 800326e:	0003      	movs	r3, r0
 8003270:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003274:	f7fd fcf6 	bl	8000c64 <HAL_GetTick>
 8003278:	0002      	movs	r2, r0
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0b2      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003286:	4b38      	ldr	r3, [pc, #224]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	025b      	lsls	r3, r3, #9
 800328e:	4013      	ands	r3, r2
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x588>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003294:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d100      	bne.n	80032a0 <HAL_RCC_OscConfig+0x5b4>
 800329e:	e0a4      	b.n	80033ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a0:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	220c      	movs	r2, #12
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d100      	bne.n	80032ae <HAL_RCC_OscConfig+0x5c2>
 80032ac:	e078      	b.n	80033a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d14c      	bne.n	8003350 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80032bc:	492e      	ldr	r1, [pc, #184]	; (8003378 <HAL_RCC_OscConfig+0x68c>)
 80032be:	400a      	ands	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fd fccf 	bl	8000c64 <HAL_GetTick>
 80032c6:	0003      	movs	r3, r0
 80032c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fd fcca 	bl	8000c64 <HAL_GetTick>
 80032d0:	0002      	movs	r2, r0
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e086      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	049b      	lsls	r3, r3, #18
 80032e6:	4013      	ands	r3, r2
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	220f      	movs	r2, #15
 80032f0:	4393      	bics	r3, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 80032fa:	430a      	orrs	r2, r1
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a1e      	ldr	r2, [pc, #120]	; (800337c <HAL_RCC_OscConfig+0x690>)
 8003304:	4013      	ands	r3, r2
 8003306:	0019      	movs	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	431a      	orrs	r2, r3
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	0449      	lsls	r1, r1, #17
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fd fc9d 	bl	8000c64 <HAL_GetTick>
 800332a:	0003      	movs	r3, r0
 800332c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fc98 	bl	8000c64 <HAL_GetTick>
 8003334:	0002      	movs	r2, r0
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e054      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	049b      	lsls	r3, r3, #18
 800334a:	4013      	ands	r3, r2
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x644>
 800334e:	e04c      	b.n	80033ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <HAL_RCC_OscConfig+0x67c>)
 8003356:	4908      	ldr	r1, [pc, #32]	; (8003378 <HAL_RCC_OscConfig+0x68c>)
 8003358:	400a      	ands	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fd fc82 	bl	8000c64 <HAL_GetTick>
 8003360:	0003      	movs	r3, r0
 8003362:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x6a6>
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	40021000 	.word	0x40021000
 800336c:	00001388 	.word	0x00001388
 8003370:	efffffff 	.word	0xefffffff
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	feffffff 	.word	0xfeffffff
 800337c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd fc70 	bl	8000c64 <HAL_GetTick>
 8003384:	0002      	movs	r2, r0
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e02c      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_RCC_OscConfig+0x708>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	049b      	lsls	r3, r3, #18
 800339a:	4013      	ands	r3, r2
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x694>
 800339e:	e024      	b.n	80033ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e01f      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_RCC_OscConfig+0x708>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_RCC_OscConfig+0x708>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	23c0      	movs	r3, #192	; 0xc0
 80033bc:	025b      	lsls	r3, r3, #9
 80033be:	401a      	ands	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d10e      	bne.n	80033e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	220f      	movs	r2, #15
 80033cc:	401a      	ands	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	23f0      	movs	r3, #240	; 0xf0
 80033da:	039b      	lsls	r3, r3, #14
 80033dc:	401a      	ands	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b008      	add	sp, #32
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000

080033f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0bf      	b.n	800358c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_RCC_ClockConfig+0x19c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2201      	movs	r2, #1
 8003412:	4013      	ands	r3, r2
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d911      	bls.n	800343e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <HAL_RCC_ClockConfig+0x19c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	4393      	bics	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <HAL_RCC_ClockConfig+0x19c>)
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342c:	4b59      	ldr	r3, [pc, #356]	; (8003594 <HAL_RCC_ClockConfig+0x19c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d001      	beq.n	800343e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0a6      	b.n	800358c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	d015      	beq.n	8003474 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2204      	movs	r2, #4
 800344e:	4013      	ands	r3, r2
 8003450:	d006      	beq.n	8003460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003452:	4b51      	ldr	r3, [pc, #324]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 8003458:	21e0      	movs	r1, #224	; 0xe0
 800345a:	00c9      	lsls	r1, r1, #3
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003460:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	22f0      	movs	r2, #240	; 0xf0
 8003466:	4393      	bics	r3, r2
 8003468:	0019      	movs	r1, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	4b4a      	ldr	r3, [pc, #296]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2201      	movs	r2, #1
 800347a:	4013      	ands	r3, r2
 800347c:	d04c      	beq.n	8003518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b44      	ldr	r3, [pc, #272]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	029b      	lsls	r3, r3, #10
 800348e:	4013      	ands	r3, r2
 8003490:	d120      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e07a      	b.n	800358c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349e:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	049b      	lsls	r3, r3, #18
 80034a6:	4013      	ands	r3, r2
 80034a8:	d114      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e06e      	b.n	800358c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80034b6:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 80034b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	025b      	lsls	r3, r3, #9
 80034be:	4013      	ands	r3, r2
 80034c0:	d108      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e062      	b.n	800358c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	4b34      	ldr	r3, [pc, #208]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e05b      	b.n	800358c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d4:	4b30      	ldr	r3, [pc, #192]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2203      	movs	r2, #3
 80034da:	4393      	bics	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e8:	f7fd fbbc 	bl	8000c64 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f0:	e009      	b.n	8003506 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f2:	f7fd fbb7 	bl	8000c64 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <HAL_RCC_ClockConfig+0x1a4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e042      	b.n	800358c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	4b24      	ldr	r3, [pc, #144]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	220c      	movs	r2, #12
 800350c:	401a      	ands	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d1ec      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_RCC_ClockConfig+0x19c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2201      	movs	r2, #1
 800351e:	4013      	ands	r3, r2
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d211      	bcs.n	800354a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_RCC_ClockConfig+0x19c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2201      	movs	r2, #1
 800352c:	4393      	bics	r3, r2
 800352e:	0019      	movs	r1, r3
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_RCC_ClockConfig+0x19c>)
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <HAL_RCC_ClockConfig+0x19c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2201      	movs	r2, #1
 800353e:	4013      	ands	r3, r2
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d001      	beq.n	800354a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e020      	b.n	800358c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2204      	movs	r2, #4
 8003550:	4013      	ands	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003554:	4b10      	ldr	r3, [pc, #64]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <HAL_RCC_ClockConfig+0x1a8>)
 800355a:	4013      	ands	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003568:	f000 f820 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 800356c:	0001      	movs	r1, r0
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x1a0>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	220f      	movs	r2, #15
 8003576:	4013      	ands	r3, r2
 8003578:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_RCC_ClockConfig+0x1ac>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	000a      	movs	r2, r1
 800357e:	40da      	lsrs	r2, r3
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003582:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003584:	2000      	movs	r0, #0
 8003586:	f7fd fb27 	bl	8000bd8 <HAL_InitTick>
  
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b004      	add	sp, #16
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40022000 	.word	0x40022000
 8003598:	40021000 	.word	0x40021000
 800359c:	00001388 	.word	0x00001388
 80035a0:	fffff8ff 	.word	0xfffff8ff
 80035a4:	08007684 	.word	0x08007684
 80035a8:	20000000 	.word	0x20000000

080035ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b08f      	sub	sp, #60	; 0x3c
 80035b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80035b2:	2314      	movs	r3, #20
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	4a37      	ldr	r2, [pc, #220]	; (8003694 <HAL_RCC_GetSysClockFreq+0xe8>)
 80035b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035ba:	c313      	stmia	r3!, {r0, r1, r4}
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	4a35      	ldr	r2, [pc, #212]	; (8003698 <HAL_RCC_GetSysClockFreq+0xec>)
 80035c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035c6:	c313      	stmia	r3!, {r0, r1, r4}
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d0:	2300      	movs	r3, #0
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d4:	2300      	movs	r3, #0
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
 80035d8:	2300      	movs	r3, #0
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80035e0:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_RCC_GetSysClockFreq+0xf0>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	220c      	movs	r2, #12
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d006      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x52>
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d043      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0xd0>
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d144      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f8:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035fc:	e044      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	0c9b      	lsrs	r3, r3, #18
 8003602:	220f      	movs	r2, #15
 8003604:	4013      	ands	r3, r2
 8003606:	2214      	movs	r2, #20
 8003608:	18ba      	adds	r2, r7, r2
 800360a:	5cd3      	ldrb	r3, [r2, r3]
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_RCC_GetSysClockFreq+0xf0>)
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	220f      	movs	r2, #15
 8003614:	4013      	ands	r3, r2
 8003616:	1d3a      	adds	r2, r7, #4
 8003618:	5cd3      	ldrb	r3, [r2, r3]
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800361c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361e:	23c0      	movs	r3, #192	; 0xc0
 8003620:	025b      	lsls	r3, r3, #9
 8003622:	401a      	ands	r2, r3
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	025b      	lsls	r3, r3, #9
 8003628:	429a      	cmp	r2, r3
 800362a:	d109      	bne.n	8003640 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800362c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800362e:	481c      	ldr	r0, [pc, #112]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003630:	f7fc fd6a 	bl	8000108 <__udivsi3>
 8003634:	0003      	movs	r3, r0
 8003636:	001a      	movs	r2, r3
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	4353      	muls	r3, r2
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
 800363e:	e01a      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003642:	23c0      	movs	r3, #192	; 0xc0
 8003644:	025b      	lsls	r3, r3, #9
 8003646:	401a      	ands	r2, r3
 8003648:	23c0      	movs	r3, #192	; 0xc0
 800364a:	025b      	lsls	r3, r3, #9
 800364c:	429a      	cmp	r2, r3
 800364e:	d109      	bne.n	8003664 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003652:	4814      	ldr	r0, [pc, #80]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003654:	f7fc fd58 	bl	8000108 <__udivsi3>
 8003658:	0003      	movs	r3, r0
 800365a:	001a      	movs	r2, r3
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	4353      	muls	r3, r2
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
 8003662:	e008      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003666:	480e      	ldr	r0, [pc, #56]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003668:	f7fc fd4e 	bl	8000108 <__udivsi3>
 800366c:	0003      	movs	r3, r0
 800366e:	001a      	movs	r2, r3
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	4353      	muls	r3, r2
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800367a:	e005      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003680:	e002      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003686:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b00f      	add	sp, #60	; 0x3c
 8003690:	bd90      	pop	{r4, r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	08007620 	.word	0x08007620
 8003698:	08007630 	.word	0x08007630
 800369c:	40021000 	.word	0x40021000
 80036a0:	007a1200 	.word	0x007a1200
 80036a4:	02dc6c00 	.word	0x02dc6c00

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	025b      	lsls	r3, r3, #9
 80036c0:	4013      	ands	r3, r2
 80036c2:	d100      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80036c4:	e08f      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	2317      	movs	r3, #23
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ce:	4b6f      	ldr	r3, [pc, #444]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	055b      	lsls	r3, r3, #21
 80036d6:	4013      	ands	r3, r2
 80036d8:	d111      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	4b6b      	ldr	r3, [pc, #428]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	0549      	lsls	r1, r1, #21
 80036e4:	430a      	orrs	r2, r1
 80036e6:	61da      	str	r2, [r3, #28]
 80036e8:	4b68      	ldr	r3, [pc, #416]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	055b      	lsls	r3, r3, #21
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f6:	2317      	movs	r3, #23
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	4b64      	ldr	r3, [pc, #400]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4013      	ands	r3, r2
 8003708:	d11a      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370a:	4b61      	ldr	r3, [pc, #388]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b60      	ldr	r3, [pc, #384]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003710:	2180      	movs	r1, #128	; 0x80
 8003712:	0049      	lsls	r1, r1, #1
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003718:	f7fd faa4 	bl	8000c64 <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	e008      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7fd fa9f 	bl	8000c64 <HAL_GetTick>
 8003726:	0002      	movs	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b64      	cmp	r3, #100	; 0x64
 800372e:	d901      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0a6      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4b56      	ldr	r3, [pc, #344]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4013      	ands	r3, r2
 800373e:	d0f0      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003740:	4b52      	ldr	r3, [pc, #328]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	23c0      	movs	r3, #192	; 0xc0
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d034      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	23c0      	movs	r3, #192	; 0xc0
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4013      	ands	r3, r2
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	429a      	cmp	r2, r3
 8003760:	d02c      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a4b      	ldr	r2, [pc, #300]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800376c:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800376e:	6a1a      	ldr	r2, [r3, #32]
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003772:	2180      	movs	r1, #128	; 0x80
 8003774:	0249      	lsls	r1, r1, #9
 8003776:	430a      	orrs	r2, r1
 8003778:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800377a:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800377c:	6a1a      	ldr	r2, [r3, #32]
 800377e:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003780:	4945      	ldr	r1, [pc, #276]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003782:	400a      	ands	r2, r1
 8003784:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	4013      	ands	r3, r2
 8003792:	d013      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fd fa66 	bl	8000c64 <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379c:	e009      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fd fa61 	bl	8000c64 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	4a3c      	ldr	r2, [pc, #240]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e067      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	4b36      	ldr	r3, [pc, #216]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	2202      	movs	r2, #2
 80037b8:	4013      	ands	r3, r2
 80037ba:	d0f0      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037bc:	4b33      	ldr	r3, [pc, #204]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a34      	ldr	r2, [pc, #208]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	0019      	movs	r1, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4b30      	ldr	r3, [pc, #192]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037cc:	430a      	orrs	r2, r1
 80037ce:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037d0:	2317      	movs	r3, #23
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d105      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037da:	4b2c      	ldr	r3, [pc, #176]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037e0:	492f      	ldr	r1, [pc, #188]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037e2:	400a      	ands	r2, r1
 80037e4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	4013      	ands	r3, r2
 80037ee:	d009      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037f0:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	2203      	movs	r2, #3
 80037f6:	4393      	bics	r3, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003800:	430a      	orrs	r2, r1
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2202      	movs	r2, #2
 800380a:	4013      	ands	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003814:	4013      	ands	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800381e:	430a      	orrs	r2, r1
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2220      	movs	r2, #32
 8003828:	4013      	ands	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	2210      	movs	r2, #16
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800383c:	430a      	orrs	r2, r1
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	029b      	lsls	r3, r3, #10
 8003848:	4013      	ands	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	2280      	movs	r2, #128	; 0x80
 8003852:	4393      	bics	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800385c:	430a      	orrs	r2, r1
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4013      	ands	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2240      	movs	r2, #64	; 0x40
 8003872:	4393      	bics	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	4b04      	ldr	r3, [pc, #16]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800387c:	430a      	orrs	r2, r1
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b006      	add	sp, #24
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
 8003894:	fffffcff 	.word	0xfffffcff
 8003898:	fffeffff 	.word	0xfffeffff
 800389c:	00001388 	.word	0x00001388
 80038a0:	efffffff 	.word	0xefffffff
 80038a4:	fffcffff 	.word	0xfffcffff

080038a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e01e      	b.n	80038f8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	223d      	movs	r2, #61	; 0x3d
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d107      	bne.n	80038d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	223c      	movs	r2, #60	; 0x3c
 80038ca:	2100      	movs	r1, #0
 80038cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7fd f8d9 	bl	8000a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	223d      	movs	r2, #61	; 0x3d
 80038da:	2102      	movs	r1, #2
 80038dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	0019      	movs	r1, r3
 80038e8:	0010      	movs	r0, r2
 80038ea:	f000 fa49 	bl	8003d80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	223d      	movs	r2, #61	; 0x3d
 80038f2:	2101      	movs	r1, #1
 80038f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2101      	movs	r1, #1
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2207      	movs	r2, #7
 8003920:	4013      	ands	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d007      	beq.n	800393a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2101      	movs	r1, #1
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2101      	movs	r1, #1
 8003958:	438a      	bics	r2, r1
 800395a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <HAL_TIM_Base_Stop_IT+0x4c>)
 8003964:	4013      	ands	r3, r2
 8003966:	d10d      	bne.n	8003984 <HAL_TIM_Base_Stop_IT+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <HAL_TIM_Base_Stop_IT+0x50>)
 8003970:	4013      	ands	r3, r2
 8003972:	d107      	bne.n	8003984 <HAL_TIM_Base_Stop_IT+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	438a      	bics	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	00001111 	.word	0x00001111
 8003994:	00000444 	.word	0x00000444

08003998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2202      	movs	r2, #2
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d124      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2202      	movs	r2, #2
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d11d      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2203      	movs	r2, #3
 80039c2:	4252      	negs	r2, r2
 80039c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2203      	movs	r2, #3
 80039d4:	4013      	ands	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0018      	movs	r0, r3
 80039dc:	f000 f9b8 	bl	8003d50 <HAL_TIM_IC_CaptureCallback>
 80039e0:	e007      	b.n	80039f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	0018      	movs	r0, r3
 80039e6:	f000 f9ab 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 f9b7 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2204      	movs	r2, #4
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d125      	bne.n	8003a52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d11e      	bne.n	8003a52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2205      	movs	r2, #5
 8003a1a:	4252      	negs	r2, r2
 8003a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	23c0      	movs	r3, #192	; 0xc0
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0018      	movs	r0, r3
 8003a36:	f000 f98b 	bl	8003d50 <HAL_TIM_IC_CaptureCallback>
 8003a3a:	e007      	b.n	8003a4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 f97e 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	0018      	movs	r0, r3
 8003a48:	f000 f98a 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2208      	movs	r2, #8
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d124      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2208      	movs	r2, #8
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d11d      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2209      	movs	r2, #9
 8003a74:	4252      	negs	r2, r2
 8003a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	2203      	movs	r2, #3
 8003a86:	4013      	ands	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 f95f 	bl	8003d50 <HAL_TIM_IC_CaptureCallback>
 8003a92:	e007      	b.n	8003aa4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 f952 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 f95e 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2210      	movs	r2, #16
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d125      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d11e      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2211      	movs	r2, #17
 8003acc:	4252      	negs	r2, r2
 8003ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	23c0      	movs	r3, #192	; 0xc0
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 f932 	bl	8003d50 <HAL_TIM_IC_CaptureCallback>
 8003aec:	e007      	b.n	8003afe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 f925 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f000 f931 	bl	8003d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10f      	bne.n	8003b32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d108      	bne.n	8003b32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2202      	movs	r2, #2
 8003b26:	4252      	negs	r2, r2
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7fc fd99 	bl	8000664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d10f      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2280      	movs	r2, #128	; 0x80
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d108      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2281      	movs	r2, #129	; 0x81
 8003b54:	4252      	negs	r2, r2
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 fa90 	bl	8004080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d10f      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2240      	movs	r2, #64	; 0x40
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d108      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2241      	movs	r2, #65	; 0x41
 8003b82:	4252      	negs	r2, r2
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 f8f1 	bl	8003d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2220      	movs	r2, #32
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d10f      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d108      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2221      	movs	r2, #33	; 0x21
 8003bb0:	4252      	negs	r2, r2
 8003bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 fa5a 	bl	8004070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	223c      	movs	r2, #60	; 0x3c
 8003bd2:	5c9b      	ldrb	r3, [r3, r2]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIM_ConfigClockSource+0x18>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e0ab      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x170>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	223c      	movs	r2, #60	; 0x3c
 8003be0:	2101      	movs	r1, #1
 8003be2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	223d      	movs	r2, #61	; 0x3d
 8003be8:	2102      	movs	r1, #2
 8003bea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2277      	movs	r2, #119	; 0x77
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a4f      	ldr	r2, [pc, #316]	; (8003d3c <HAL_TIM_ConfigClockSource+0x178>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b40      	cmp	r3, #64	; 0x40
 8003c12:	d100      	bne.n	8003c16 <HAL_TIM_ConfigClockSource+0x52>
 8003c14:	e06b      	b.n	8003cee <HAL_TIM_ConfigClockSource+0x12a>
 8003c16:	d80e      	bhi.n	8003c36 <HAL_TIM_ConfigClockSource+0x72>
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d100      	bne.n	8003c1e <HAL_TIM_ConfigClockSource+0x5a>
 8003c1c:	e077      	b.n	8003d0e <HAL_TIM_ConfigClockSource+0x14a>
 8003c1e:	d803      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x64>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d100      	bne.n	8003c26 <HAL_TIM_ConfigClockSource+0x62>
 8003c24:	e073      	b.n	8003d0e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c26:	e07c      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d100      	bne.n	8003c2e <HAL_TIM_ConfigClockSource+0x6a>
 8003c2c:	e06f      	b.n	8003d0e <HAL_TIM_ConfigClockSource+0x14a>
 8003c2e:	2b30      	cmp	r3, #48	; 0x30
 8003c30:	d100      	bne.n	8003c34 <HAL_TIM_ConfigClockSource+0x70>
 8003c32:	e06c      	b.n	8003d0e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003c34:	e075      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003c36:	2b70      	cmp	r3, #112	; 0x70
 8003c38:	d00e      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0x94>
 8003c3a:	d804      	bhi.n	8003c46 <HAL_TIM_ConfigClockSource+0x82>
 8003c3c:	2b50      	cmp	r3, #80	; 0x50
 8003c3e:	d036      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0xea>
 8003c40:	2b60      	cmp	r3, #96	; 0x60
 8003c42:	d044      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003c44:	e06d      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	0152      	lsls	r2, r2, #5
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d068      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0x15c>
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	0192      	lsls	r2, r2, #6
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d017      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003c56:	e064      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6899      	ldr	r1, [r3, #8]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f000 f984 	bl	8003f74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2277      	movs	r2, #119	; 0x77
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]
      break;
 8003c84:	e04d      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6899      	ldr	r1, [r3, #8]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f000 f96d 	bl	8003f74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	01c9      	lsls	r1, r1, #7
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
      break;
 8003cac:	e039      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	001a      	movs	r2, r3
 8003cbc:	f000 f8e0 	bl	8003e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2150      	movs	r1, #80	; 0x50
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 f93a 	bl	8003f40 <TIM_ITRx_SetConfig>
      break;
 8003ccc:	e029      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	001a      	movs	r2, r3
 8003cdc:	f000 f8fe 	bl	8003edc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2160      	movs	r1, #96	; 0x60
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 f92a 	bl	8003f40 <TIM_ITRx_SetConfig>
      break;
 8003cec:	e019      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	f000 f8c0 	bl	8003e80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 f91a 	bl	8003f40 <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e009      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	0019      	movs	r1, r3
 8003d18:	0010      	movs	r0, r2
 8003d1a:	f000 f911 	bl	8003f40 <TIM_ITRx_SetConfig>
      break;
 8003d1e:	e000      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003d20:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	223d      	movs	r2, #61	; 0x3d
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	223c      	movs	r2, #60	; 0x3c
 8003d2e:	2100      	movs	r1, #0
 8003d30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b004      	add	sp, #16
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	ffff00ff 	.word	0xffff00ff

08003d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b002      	add	sp, #8
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d58:	46c0      	nop			; (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b002      	add	sp, #8
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b002      	add	sp, #8
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a34      	ldr	r2, [pc, #208]	; (8003e64 <TIM_Base_SetConfig+0xe4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d008      	beq.n	8003daa <TIM_Base_SetConfig+0x2a>
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	05db      	lsls	r3, r3, #23
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d003      	beq.n	8003daa <TIM_Base_SetConfig+0x2a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a30      	ldr	r2, [pc, #192]	; (8003e68 <TIM_Base_SetConfig+0xe8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2270      	movs	r2, #112	; 0x70
 8003dae:	4393      	bics	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <TIM_Base_SetConfig+0xe4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d018      	beq.n	8003df6 <TIM_Base_SetConfig+0x76>
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	05db      	lsls	r3, r3, #23
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d013      	beq.n	8003df6 <TIM_Base_SetConfig+0x76>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <TIM_Base_SetConfig+0xe8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00f      	beq.n	8003df6 <TIM_Base_SetConfig+0x76>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <TIM_Base_SetConfig+0xec>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00b      	beq.n	8003df6 <TIM_Base_SetConfig+0x76>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <TIM_Base_SetConfig+0xf0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <TIM_Base_SetConfig+0x76>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a22      	ldr	r2, [pc, #136]	; (8003e74 <TIM_Base_SetConfig+0xf4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_Base_SetConfig+0x76>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <TIM_Base_SetConfig+0xf8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d108      	bne.n	8003e08 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <TIM_Base_SetConfig+0xfc>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2280      	movs	r2, #128	; 0x80
 8003e0c:	4393      	bics	r3, r2
 8003e0e:	001a      	movs	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <TIM_Base_SetConfig+0xe4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <TIM_Base_SetConfig+0xce>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a0d      	ldr	r2, [pc, #52]	; (8003e70 <TIM_Base_SetConfig+0xf0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <TIM_Base_SetConfig+0xce>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <TIM_Base_SetConfig+0xf4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_Base_SetConfig+0xce>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <TIM_Base_SetConfig+0xf8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d103      	bne.n	8003e56 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	615a      	str	r2, [r3, #20]
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b004      	add	sp, #16
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40002000 	.word	0x40002000
 8003e70:	40014000 	.word	0x40014000
 8003e74:	40014400 	.word	0x40014400
 8003e78:	40014800 	.word	0x40014800
 8003e7c:	fffffcff 	.word	0xfffffcff

08003e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	2201      	movs	r2, #1
 8003e98:	4393      	bics	r3, r2
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	22f0      	movs	r2, #240	; 0xf0
 8003eaa:	4393      	bics	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	220a      	movs	r2, #10
 8003ebc:	4393      	bics	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b006      	add	sp, #24
 8003eda:	bd80      	pop	{r7, pc}

08003edc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	2210      	movs	r2, #16
 8003eee:	4393      	bics	r3, r2
 8003ef0:	001a      	movs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <TIM_TI2_ConfigInputStage+0x60>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	031b      	lsls	r3, r3, #12
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	22a0      	movs	r2, #160	; 0xa0
 8003f18:	4393      	bics	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	621a      	str	r2, [r3, #32]
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b006      	add	sp, #24
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	ffff0fff 	.word	0xffff0fff

08003f40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2270      	movs	r2, #112	; 0x70
 8003f54:	4393      	bics	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	2207      	movs	r2, #7
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	609a      	str	r2, [r3, #8]
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <TIM_ETR_SetConfig+0x3c>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	021a      	lsls	r2, r3, #8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	609a      	str	r2, [r3, #8]
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b006      	add	sp, #24
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	ffff00ff 	.word	0xffff00ff

08003fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	223c      	movs	r2, #60	; 0x3c
 8003fc2:	5c9b      	ldrb	r3, [r3, r2]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e047      	b.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	223c      	movs	r2, #60	; 0x3c
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	223d      	movs	r2, #61	; 0x3d
 8003fd8:	2102      	movs	r1, #2
 8003fda:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2270      	movs	r2, #112	; 0x70
 8003ff0:	4393      	bics	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00f      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	05db      	lsls	r3, r3, #23
 8004018:	429a      	cmp	r2, r3
 800401a:	d009      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a11      	ldr	r2, [pc, #68]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a10      	ldr	r2, [pc, #64]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10c      	bne.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	4393      	bics	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	4313      	orrs	r3, r2
 8004040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	223d      	movs	r2, #61	; 0x3d
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	223c      	movs	r2, #60	; 0x3c
 8004056:	2100      	movs	r1, #0
 8004058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b004      	add	sp, #16
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b002      	add	sp, #8
 800408e:	bd80      	pop	{r7, pc}

08004090 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004098:	210e      	movs	r1, #14
 800409a:	187b      	adds	r3, r7, r1
 800409c:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <USB_EnableGlobalInt+0x30>)
 800409e:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	5a9b      	ldrh	r3, [r3, r2]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	b299      	uxth	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2240      	movs	r2, #64	; 0x40
 80040b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b004      	add	sp, #16
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	ffffbf80 	.word	0xffffbf80

080040c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040cc:	210e      	movs	r1, #14
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	4a0b      	ldr	r2, [pc, #44]	; (8004100 <USB_DisableGlobalInt+0x3c>)
 80040d2:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2240      	movs	r2, #64	; 0x40
 80040d8:	5a9b      	ldrh	r3, [r3, r2]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	b21b      	sxth	r3, r3
 80040de:	187a      	adds	r2, r7, r1
 80040e0:	2100      	movs	r1, #0
 80040e2:	5e52      	ldrsh	r2, [r2, r1]
 80040e4:	43d2      	mvns	r2, r2
 80040e6:	b212      	sxth	r2, r2
 80040e8:	4013      	ands	r3, r2
 80040ea:	b21b      	sxth	r3, r3
 80040ec:	b299      	uxth	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2240      	movs	r2, #64	; 0x40
 80040f2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	ffffbf80 	.word	0xffffbf80

08004104 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004104:	b084      	sub	sp, #16
 8004106:	b590      	push	{r4, r7, lr}
 8004108:	46c6      	mov	lr, r8
 800410a:	b500      	push	{lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	2004      	movs	r0, #4
 8004114:	2410      	movs	r4, #16
 8004116:	46a4      	mov	ip, r4
 8004118:	2408      	movs	r4, #8
 800411a:	46a0      	mov	r8, r4
 800411c:	44b8      	add	r8, r7
 800411e:	44c4      	add	ip, r8
 8004120:	4460      	add	r0, ip
 8004122:	6001      	str	r1, [r0, #0]
 8004124:	6042      	str	r2, [r0, #4]
 8004126:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2240      	movs	r2, #64	; 0x40
 800412c:	2101      	movs	r1, #1
 800412e:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2240      	movs	r2, #64	; 0x40
 8004134:	2100      	movs	r1, #0
 8004136:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2244      	movs	r2, #68	; 0x44
 800413c:	2100      	movs	r1, #0
 800413e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2250      	movs	r2, #80	; 0x50
 8004144:	2100      	movs	r1, #0
 8004146:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	0018      	movs	r0, r3
 800414c:	f7ff ffa0 	bl	8004090 <USB_EnableGlobalInt>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b002      	add	sp, #8
 8004158:	bc04      	pop	{r2}
 800415a:	4690      	mov	r8, r2
 800415c:	bc90      	pop	{r4, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	b004      	add	sp, #16
 8004162:	4718      	bx	r3

08004164 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800416e:	2317      	movs	r3, #23
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	18d3      	adds	r3, r2, r3
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29a      	uxth	r2, r3
 8004184:	2314      	movs	r3, #20
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	49b2      	ldr	r1, [pc, #712]	; (8004454 <USB_ActivateEndpoint+0x2f0>)
 800418a:	400a      	ands	r2, r1
 800418c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	78db      	ldrb	r3, [r3, #3]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d020      	beq.n	80041d8 <USB_ActivateEndpoint+0x74>
 8004196:	dc02      	bgt.n	800419e <USB_ActivateEndpoint+0x3a>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <USB_ActivateEndpoint+0x44>
 800419c:	e025      	b.n	80041ea <USB_ActivateEndpoint+0x86>
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d00b      	beq.n	80041ba <USB_ActivateEndpoint+0x56>
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d00f      	beq.n	80041c6 <USB_ActivateEndpoint+0x62>
 80041a6:	e020      	b.n	80041ea <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041a8:	2214      	movs	r2, #20
 80041aa:	18bb      	adds	r3, r7, r2
 80041ac:	18ba      	adds	r2, r7, r2
 80041ae:	8812      	ldrh	r2, [r2, #0]
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	0089      	lsls	r1, r1, #2
 80041b4:	430a      	orrs	r2, r1
 80041b6:	801a      	strh	r2, [r3, #0]
      break;
 80041b8:	e01c      	b.n	80041f4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80041ba:	2214      	movs	r2, #20
 80041bc:	18bb      	adds	r3, r7, r2
 80041be:	18ba      	adds	r2, r7, r2
 80041c0:	8812      	ldrh	r2, [r2, #0]
 80041c2:	801a      	strh	r2, [r3, #0]
      break;
 80041c4:	e016      	b.n	80041f4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041c6:	2214      	movs	r2, #20
 80041c8:	18bb      	adds	r3, r7, r2
 80041ca:	18ba      	adds	r2, r7, r2
 80041cc:	8812      	ldrh	r2, [r2, #0]
 80041ce:	21c0      	movs	r1, #192	; 0xc0
 80041d0:	00c9      	lsls	r1, r1, #3
 80041d2:	430a      	orrs	r2, r1
 80041d4:	801a      	strh	r2, [r3, #0]
      break;
 80041d6:	e00d      	b.n	80041f4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041d8:	2214      	movs	r2, #20
 80041da:	18bb      	adds	r3, r7, r2
 80041dc:	18ba      	adds	r2, r7, r2
 80041de:	8812      	ldrh	r2, [r2, #0]
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	00c9      	lsls	r1, r1, #3
 80041e4:	430a      	orrs	r2, r1
 80041e6:	801a      	strh	r2, [r3, #0]
      break;
 80041e8:	e004      	b.n	80041f4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80041ea:	2317      	movs	r3, #23
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	2201      	movs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]
      break;
 80041f2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	2214      	movs	r2, #20
 8004200:	18ba      	adds	r2, r7, r2
 8004202:	8812      	ldrh	r2, [r2, #0]
 8004204:	4994      	ldr	r1, [pc, #592]	; (8004458 <USB_ActivateEndpoint+0x2f4>)
 8004206:	430a      	orrs	r2, r1
 8004208:	b292      	uxth	r2, r2
 800420a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	b21b      	sxth	r3, r3
 800421c:	4a8f      	ldr	r2, [pc, #572]	; (800445c <USB_ActivateEndpoint+0x2f8>)
 800421e:	4013      	ands	r3, r2
 8004220:	b21a      	sxth	r2, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b21b      	sxth	r3, r3
 8004228:	4313      	orrs	r3, r2
 800422a:	b21b      	sxth	r3, r3
 800422c:	b29c      	uxth	r4, r3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	18d3      	adds	r3, r2, r3
 8004238:	4a87      	ldr	r2, [pc, #540]	; (8004458 <USB_ActivateEndpoint+0x2f4>)
 800423a:	4322      	orrs	r2, r4
 800423c:	b292      	uxth	r2, r2
 800423e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	7b1b      	ldrb	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d000      	beq.n	800424a <USB_ActivateEndpoint+0xe6>
 8004248:	e11a      	b.n	8004480 <USB_ActivateEndpoint+0x31c>
  {
    if (ep->is_in != 0U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d062      	beq.n	8004318 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004252:	687c      	ldr	r4, [r7, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2250      	movs	r2, #80	; 0x50
 8004258:	5a9b      	ldrh	r3, [r3, r2]
 800425a:	b29b      	uxth	r3, r3
 800425c:	18e4      	adds	r4, r4, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	18e3      	adds	r3, r4, r3
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	00d2      	lsls	r2, r2, #3
 800426a:	4694      	mov	ip, r2
 800426c:	4463      	add	r3, ip
 800426e:	001c      	movs	r4, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	88db      	ldrh	r3, [r3, #6]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	b29b      	uxth	r3, r3
 8004278:	18db      	adds	r3, r3, r3
 800427a:	b29b      	uxth	r3, r3
 800427c:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	18d3      	adds	r3, r2, r3
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29c      	uxth	r4, r3
 800428c:	0022      	movs	r2, r4
 800428e:	2340      	movs	r3, #64	; 0x40
 8004290:	4013      	ands	r3, r2
 8004292:	d012      	beq.n	80042ba <USB_ActivateEndpoint+0x156>
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	18d3      	adds	r3, r2, r3
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	4a6e      	ldr	r2, [pc, #440]	; (800445c <USB_ActivateEndpoint+0x2f8>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	b29c      	uxth	r4, r3
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	18d3      	adds	r3, r2, r3
 80042b2:	4a6b      	ldr	r2, [pc, #428]	; (8004460 <USB_ActivateEndpoint+0x2fc>)
 80042b4:	4322      	orrs	r2, r4
 80042b6:	b292      	uxth	r2, r2
 80042b8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	78db      	ldrb	r3, [r3, #3]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d016      	beq.n	80042f0 <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	18d3      	adds	r3, r2, r3
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	4a64      	ldr	r2, [pc, #400]	; (8004464 <USB_ActivateEndpoint+0x300>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	b29c      	uxth	r4, r3
 80042d6:	2320      	movs	r3, #32
 80042d8:	4063      	eors	r3, r4
 80042da:	b29c      	uxth	r4, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	4a5c      	ldr	r2, [pc, #368]	; (8004458 <USB_ActivateEndpoint+0x2f4>)
 80042e8:	4322      	orrs	r2, r4
 80042ea:	b292      	uxth	r2, r2
 80042ec:	801a      	strh	r2, [r3, #0]
 80042ee:	e21a      	b.n	8004726 <USB_ActivateEndpoint+0x5c2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	18d3      	adds	r3, r2, r3
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	4a59      	ldr	r2, [pc, #356]	; (8004464 <USB_ActivateEndpoint+0x300>)
 8004300:	4013      	ands	r3, r2
 8004302:	b29c      	uxth	r4, r3
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	18d3      	adds	r3, r2, r3
 800430e:	4a52      	ldr	r2, [pc, #328]	; (8004458 <USB_ActivateEndpoint+0x2f4>)
 8004310:	4322      	orrs	r2, r4
 8004312:	b292      	uxth	r2, r2
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e206      	b.n	8004726 <USB_ActivateEndpoint+0x5c2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004318:	687c      	ldr	r4, [r7, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2250      	movs	r2, #80	; 0x50
 800431e:	5a9b      	ldrh	r3, [r3, r2]
 8004320:	b29b      	uxth	r3, r3
 8004322:	18e4      	adds	r4, r4, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	18e3      	adds	r3, r4, r3
 800432c:	4a4e      	ldr	r2, [pc, #312]	; (8004468 <USB_ActivateEndpoint+0x304>)
 800432e:	4694      	mov	ip, r2
 8004330:	4463      	add	r3, ip
 8004332:	001c      	movs	r4, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	88db      	ldrh	r3, [r3, #6]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	18db      	adds	r3, r3, r3
 800433e:	b29b      	uxth	r3, r3
 8004340:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004342:	687c      	ldr	r4, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2250      	movs	r2, #80	; 0x50
 8004348:	5a9b      	ldrh	r3, [r3, r2]
 800434a:	b29b      	uxth	r3, r3
 800434c:	18e4      	adds	r4, r4, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	18e3      	adds	r3, r4, r3
 8004356:	4a45      	ldr	r2, [pc, #276]	; (800446c <USB_ActivateEndpoint+0x308>)
 8004358:	4694      	mov	ip, r2
 800435a:	4463      	add	r3, ip
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10e      	bne.n	8004384 <USB_ActivateEndpoint+0x220>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	4a41      	ldr	r2, [pc, #260]	; (8004470 <USB_ActivateEndpoint+0x30c>)
 800436c:	4013      	ands	r3, r2
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	801a      	strh	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	4a3e      	ldr	r2, [pc, #248]	; (8004474 <USB_ActivateEndpoint+0x310>)
 800437a:	4313      	orrs	r3, r2
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	801a      	strh	r2, [r3, #0]
 8004382:	e02b      	b.n	80043dc <USB_ActivateEndpoint+0x278>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b3e      	cmp	r3, #62	; 0x3e
 800438a:	d812      	bhi.n	80043b2 <USB_ActivateEndpoint+0x24e>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2201      	movs	r2, #1
 800439a:	4013      	ands	r3, r2
 800439c:	d002      	beq.n	80043a4 <USB_ActivateEndpoint+0x240>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	3301      	adds	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	029b      	lsls	r3, r3, #10
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	e014      	b.n	80043dc <USB_ActivateEndpoint+0x278>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	221f      	movs	r2, #31
 80043c0:	4013      	ands	r3, r2
 80043c2:	d102      	bne.n	80043ca <USB_ActivateEndpoint+0x266>
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	029b      	lsls	r3, r3, #10
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	4a28      	ldr	r2, [pc, #160]	; (8004474 <USB_ActivateEndpoint+0x310>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	18d3      	adds	r3, r2, r3
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29c      	uxth	r4, r3
 80043ea:	0022      	movs	r2, r4
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	01db      	lsls	r3, r3, #7
 80043f0:	4013      	ands	r3, r2
 80043f2:	d012      	beq.n	800441a <USB_ActivateEndpoint+0x2b6>
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	18d3      	adds	r3, r2, r3
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	4a16      	ldr	r2, [pc, #88]	; (800445c <USB_ActivateEndpoint+0x2f8>)
 8004404:	4013      	ands	r3, r2
 8004406:	b29c      	uxth	r4, r3
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	18d3      	adds	r3, r2, r3
 8004412:	4a19      	ldr	r2, [pc, #100]	; (8004478 <USB_ActivateEndpoint+0x314>)
 8004414:	4322      	orrs	r2, r4
 8004416:	b292      	uxth	r2, r2
 8004418:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	18d3      	adds	r3, r2, r3
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <USB_ActivateEndpoint+0x318>)
 800442a:	4013      	ands	r3, r2
 800442c:	b29c      	uxth	r4, r3
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	015b      	lsls	r3, r3, #5
 8004432:	4063      	eors	r3, r4
 8004434:	b29c      	uxth	r4, r3
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	019b      	lsls	r3, r3, #6
 800443a:	4063      	eors	r3, r4
 800443c:	b29c      	uxth	r4, r3
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	18d3      	adds	r3, r2, r3
 8004448:	4a03      	ldr	r2, [pc, #12]	; (8004458 <USB_ActivateEndpoint+0x2f4>)
 800444a:	4322      	orrs	r2, r4
 800444c:	b292      	uxth	r2, r2
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	e169      	b.n	8004726 <USB_ActivateEndpoint+0x5c2>
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	ffff898f 	.word	0xffff898f
 8004458:	ffff8080 	.word	0xffff8080
 800445c:	ffff8f8f 	.word	0xffff8f8f
 8004460:	ffff80c0 	.word	0xffff80c0
 8004464:	ffff8fbf 	.word	0xffff8fbf
 8004468:	00000404 	.word	0x00000404
 800446c:	00000406 	.word	0x00000406
 8004470:	ffff83ff 	.word	0xffff83ff
 8004474:	ffff8000 	.word	0xffff8000
 8004478:	ffffc080 	.word	0xffffc080
 800447c:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	18d3      	adds	r3, r2, r3
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	4aa9      	ldr	r2, [pc, #676]	; (8004734 <USB_ActivateEndpoint+0x5d0>)
 8004490:	4013      	ands	r3, r2
 8004492:	b29c      	uxth	r4, r3
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	18d3      	adds	r3, r2, r3
 800449e:	4aa6      	ldr	r2, [pc, #664]	; (8004738 <USB_ActivateEndpoint+0x5d4>)
 80044a0:	4322      	orrs	r2, r4
 80044a2:	b292      	uxth	r2, r2
 80044a4:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044a6:	687c      	ldr	r4, [r7, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2250      	movs	r2, #80	; 0x50
 80044ac:	5a9b      	ldrh	r3, [r3, r2]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	18e4      	adds	r4, r4, r3
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	18e3      	adds	r3, r4, r3
 80044ba:	2280      	movs	r2, #128	; 0x80
 80044bc:	00d2      	lsls	r2, r2, #3
 80044be:	4694      	mov	ip, r2
 80044c0:	4463      	add	r3, ip
 80044c2:	001c      	movs	r4, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	891b      	ldrh	r3, [r3, #8]
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	18db      	adds	r3, r3, r3
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8023      	strh	r3, [r4, #0]
 80044d2:	687c      	ldr	r4, [r7, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2250      	movs	r2, #80	; 0x50
 80044d8:	5a9b      	ldrh	r3, [r3, r2]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	18e4      	adds	r4, r4, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	18e3      	adds	r3, r4, r3
 80044e6:	4a95      	ldr	r2, [pc, #596]	; (800473c <USB_ActivateEndpoint+0x5d8>)
 80044e8:	4694      	mov	ip, r2
 80044ea:	4463      	add	r3, ip
 80044ec:	001c      	movs	r4, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	895b      	ldrh	r3, [r3, #10]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	18db      	adds	r3, r3, r3
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	785b      	ldrb	r3, [r3, #1]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d000      	beq.n	8004506 <USB_ActivateEndpoint+0x3a2>
 8004504:	e07e      	b.n	8004604 <USB_ActivateEndpoint+0x4a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	18d3      	adds	r3, r2, r3
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29c      	uxth	r4, r3
 8004514:	0022      	movs	r2, r4
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	01db      	lsls	r3, r3, #7
 800451a:	4013      	ands	r3, r2
 800451c:	d012      	beq.n	8004544 <USB_ActivateEndpoint+0x3e0>
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	18d3      	adds	r3, r2, r3
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	4a81      	ldr	r2, [pc, #516]	; (8004734 <USB_ActivateEndpoint+0x5d0>)
 800452e:	4013      	ands	r3, r2
 8004530:	b29c      	uxth	r4, r3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	18d3      	adds	r3, r2, r3
 800453c:	4a80      	ldr	r2, [pc, #512]	; (8004740 <USB_ActivateEndpoint+0x5dc>)
 800453e:	4322      	orrs	r2, r4
 8004540:	b292      	uxth	r2, r2
 8004542:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	18d3      	adds	r3, r2, r3
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29c      	uxth	r4, r3
 8004552:	0022      	movs	r2, r4
 8004554:	2340      	movs	r3, #64	; 0x40
 8004556:	4013      	ands	r3, r2
 8004558:	d012      	beq.n	8004580 <USB_ActivateEndpoint+0x41c>
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	18d3      	adds	r3, r2, r3
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	4a72      	ldr	r2, [pc, #456]	; (8004734 <USB_ActivateEndpoint+0x5d0>)
 800456a:	4013      	ands	r3, r2
 800456c:	b29c      	uxth	r4, r3
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	18d3      	adds	r3, r2, r3
 8004578:	4a72      	ldr	r2, [pc, #456]	; (8004744 <USB_ActivateEndpoint+0x5e0>)
 800457a:	4322      	orrs	r2, r4
 800457c:	b292      	uxth	r2, r2
 800457e:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	18d3      	adds	r3, r2, r3
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	4a69      	ldr	r2, [pc, #420]	; (8004734 <USB_ActivateEndpoint+0x5d0>)
 8004590:	4013      	ands	r3, r2
 8004592:	b29c      	uxth	r4, r3
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	18d3      	adds	r3, r2, r3
 800459e:	4a69      	ldr	r2, [pc, #420]	; (8004744 <USB_ActivateEndpoint+0x5e0>)
 80045a0:	4322      	orrs	r2, r4
 80045a2:	b292      	uxth	r2, r2
 80045a4:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	18d3      	adds	r3, r2, r3
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4a64      	ldr	r2, [pc, #400]	; (8004748 <USB_ActivateEndpoint+0x5e4>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	b29c      	uxth	r4, r3
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	015b      	lsls	r3, r3, #5
 80045be:	4063      	eors	r3, r4
 80045c0:	b29c      	uxth	r4, r3
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	4063      	eors	r3, r4
 80045c8:	b29c      	uxth	r4, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	4a5d      	ldr	r2, [pc, #372]	; (800474c <USB_ActivateEndpoint+0x5e8>)
 80045d6:	4322      	orrs	r2, r4
 80045d8:	b292      	uxth	r2, r2
 80045da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	18d3      	adds	r3, r2, r3
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	4a59      	ldr	r2, [pc, #356]	; (8004750 <USB_ActivateEndpoint+0x5ec>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	b29c      	uxth	r4, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	18d3      	adds	r3, r2, r3
 80045fa:	4a54      	ldr	r2, [pc, #336]	; (800474c <USB_ActivateEndpoint+0x5e8>)
 80045fc:	4322      	orrs	r2, r4
 80045fe:	b292      	uxth	r2, r2
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e090      	b.n	8004726 <USB_ActivateEndpoint+0x5c2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29c      	uxth	r4, r3
 8004612:	0022      	movs	r2, r4
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	01db      	lsls	r3, r3, #7
 8004618:	4013      	ands	r3, r2
 800461a:	d012      	beq.n	8004642 <USB_ActivateEndpoint+0x4de>
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	18d3      	adds	r3, r2, r3
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	4a42      	ldr	r2, [pc, #264]	; (8004734 <USB_ActivateEndpoint+0x5d0>)
 800462c:	4013      	ands	r3, r2
 800462e:	b29c      	uxth	r4, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	18d3      	adds	r3, r2, r3
 800463a:	4a41      	ldr	r2, [pc, #260]	; (8004740 <USB_ActivateEndpoint+0x5dc>)
 800463c:	4322      	orrs	r2, r4
 800463e:	b292      	uxth	r2, r2
 8004640:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	18d3      	adds	r3, r2, r3
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29c      	uxth	r4, r3
 8004650:	0022      	movs	r2, r4
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	4013      	ands	r3, r2
 8004656:	d012      	beq.n	800467e <USB_ActivateEndpoint+0x51a>
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	4a33      	ldr	r2, [pc, #204]	; (8004734 <USB_ActivateEndpoint+0x5d0>)
 8004668:	4013      	ands	r3, r2
 800466a:	b29c      	uxth	r4, r3
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	4a33      	ldr	r2, [pc, #204]	; (8004744 <USB_ActivateEndpoint+0x5e0>)
 8004678:	4322      	orrs	r2, r4
 800467a:	b292      	uxth	r2, r2
 800467c:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	18d3      	adds	r3, r2, r3
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	4a29      	ldr	r2, [pc, #164]	; (8004734 <USB_ActivateEndpoint+0x5d0>)
 800468e:	4013      	ands	r3, r2
 8004690:	b29c      	uxth	r4, r3
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	18d3      	adds	r3, r2, r3
 800469c:	4a28      	ldr	r2, [pc, #160]	; (8004740 <USB_ActivateEndpoint+0x5dc>)
 800469e:	4322      	orrs	r2, r4
 80046a0:	b292      	uxth	r2, r2
 80046a2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	78db      	ldrb	r3, [r3, #3]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d016      	beq.n	80046da <USB_ActivateEndpoint+0x576>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	18d3      	adds	r3, r2, r3
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	4a25      	ldr	r2, [pc, #148]	; (8004750 <USB_ActivateEndpoint+0x5ec>)
 80046bc:	4013      	ands	r3, r2
 80046be:	b29c      	uxth	r4, r3
 80046c0:	2320      	movs	r3, #32
 80046c2:	4063      	eors	r3, r4
 80046c4:	b29c      	uxth	r4, r3
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	18d3      	adds	r3, r2, r3
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <USB_ActivateEndpoint+0x5e8>)
 80046d2:	4322      	orrs	r2, r4
 80046d4:	b292      	uxth	r2, r2
 80046d6:	801a      	strh	r2, [r3, #0]
 80046d8:	e012      	b.n	8004700 <USB_ActivateEndpoint+0x59c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	18d3      	adds	r3, r2, r3
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <USB_ActivateEndpoint+0x5ec>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	b29c      	uxth	r4, r3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	18d3      	adds	r3, r2, r3
 80046f8:	4a14      	ldr	r2, [pc, #80]	; (800474c <USB_ActivateEndpoint+0x5e8>)
 80046fa:	4322      	orrs	r2, r4
 80046fc:	b292      	uxth	r2, r2
 80046fe:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <USB_ActivateEndpoint+0x5e4>)
 8004710:	4013      	ands	r3, r2
 8004712:	b29c      	uxth	r4, r3
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	18d3      	adds	r3, r2, r3
 800471e:	4a0b      	ldr	r2, [pc, #44]	; (800474c <USB_ActivateEndpoint+0x5e8>)
 8004720:	4322      	orrs	r2, r4
 8004722:	b292      	uxth	r2, r2
 8004724:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8004726:	2317      	movs	r3, #23
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	781b      	ldrb	r3, [r3, #0]
}
 800472c:	0018      	movs	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	b007      	add	sp, #28
 8004732:	bd90      	pop	{r4, r7, pc}
 8004734:	ffff8f8f 	.word	0xffff8f8f
 8004738:	ffff8180 	.word	0xffff8180
 800473c:	00000404 	.word	0x00000404
 8004740:	ffffc080 	.word	0xffffc080
 8004744:	ffff80c0 	.word	0xffff80c0
 8004748:	ffffbf8f 	.word	0xffffbf8f
 800474c:	ffff8080 	.word	0xffff8080
 8004750:	ffff8fbf 	.word	0xffff8fbf

08004754 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	7b1b      	ldrb	r3, [r3, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d168      	bne.n	8004838 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	785b      	ldrb	r3, [r3, #1]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d031      	beq.n	80047d2 <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	18d3      	adds	r3, r2, r3
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29c      	uxth	r4, r3
 800477c:	0022      	movs	r2, r4
 800477e:	2340      	movs	r3, #64	; 0x40
 8004780:	4013      	ands	r3, r2
 8004782:	d012      	beq.n	80047aa <USB_DeactivateEndpoint+0x56>
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	18d3      	adds	r3, r2, r3
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	4aa5      	ldr	r2, [pc, #660]	; (8004a28 <USB_DeactivateEndpoint+0x2d4>)
 8004794:	4013      	ands	r3, r2
 8004796:	b29c      	uxth	r4, r3
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	18d3      	adds	r3, r2, r3
 80047a2:	4aa2      	ldr	r2, [pc, #648]	; (8004a2c <USB_DeactivateEndpoint+0x2d8>)
 80047a4:	4322      	orrs	r2, r4
 80047a6:	b292      	uxth	r2, r2
 80047a8:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	18d3      	adds	r3, r2, r3
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4a9d      	ldr	r2, [pc, #628]	; (8004a30 <USB_DeactivateEndpoint+0x2dc>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	b29c      	uxth	r4, r3
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	18d3      	adds	r3, r2, r3
 80047c8:	4a9a      	ldr	r2, [pc, #616]	; (8004a34 <USB_DeactivateEndpoint+0x2e0>)
 80047ca:	4322      	orrs	r2, r4
 80047cc:	b292      	uxth	r2, r2
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	e124      	b.n	8004a1c <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	18d3      	adds	r3, r2, r3
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29c      	uxth	r4, r3
 80047e0:	0022      	movs	r2, r4
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	01db      	lsls	r3, r3, #7
 80047e6:	4013      	ands	r3, r2
 80047e8:	d012      	beq.n	8004810 <USB_DeactivateEndpoint+0xbc>
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	18d3      	adds	r3, r2, r3
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	4a8b      	ldr	r2, [pc, #556]	; (8004a28 <USB_DeactivateEndpoint+0x2d4>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	b29c      	uxth	r4, r3
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	18d3      	adds	r3, r2, r3
 8004808:	4a8b      	ldr	r2, [pc, #556]	; (8004a38 <USB_DeactivateEndpoint+0x2e4>)
 800480a:	4322      	orrs	r2, r4
 800480c:	b292      	uxth	r2, r2
 800480e:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	18d3      	adds	r3, r2, r3
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	4a87      	ldr	r2, [pc, #540]	; (8004a3c <USB_DeactivateEndpoint+0x2e8>)
 8004820:	4013      	ands	r3, r2
 8004822:	b29c      	uxth	r4, r3
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	18d3      	adds	r3, r2, r3
 800482e:	4a81      	ldr	r2, [pc, #516]	; (8004a34 <USB_DeactivateEndpoint+0x2e0>)
 8004830:	4322      	orrs	r2, r4
 8004832:	b292      	uxth	r2, r2
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	e0f1      	b.n	8004a1c <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d000      	beq.n	8004842 <USB_DeactivateEndpoint+0xee>
 8004840:	e076      	b.n	8004930 <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	18d3      	adds	r3, r2, r3
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29c      	uxth	r4, r3
 8004850:	0022      	movs	r2, r4
 8004852:	2380      	movs	r3, #128	; 0x80
 8004854:	01db      	lsls	r3, r3, #7
 8004856:	4013      	ands	r3, r2
 8004858:	d012      	beq.n	8004880 <USB_DeactivateEndpoint+0x12c>
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	18d3      	adds	r3, r2, r3
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	4a6f      	ldr	r2, [pc, #444]	; (8004a28 <USB_DeactivateEndpoint+0x2d4>)
 800486a:	4013      	ands	r3, r2
 800486c:	b29c      	uxth	r4, r3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	18d3      	adds	r3, r2, r3
 8004878:	4a6f      	ldr	r2, [pc, #444]	; (8004a38 <USB_DeactivateEndpoint+0x2e4>)
 800487a:	4322      	orrs	r2, r4
 800487c:	b292      	uxth	r2, r2
 800487e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	18d3      	adds	r3, r2, r3
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29c      	uxth	r4, r3
 800488e:	0022      	movs	r2, r4
 8004890:	2340      	movs	r3, #64	; 0x40
 8004892:	4013      	ands	r3, r2
 8004894:	d012      	beq.n	80048bc <USB_DeactivateEndpoint+0x168>
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	18d3      	adds	r3, r2, r3
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4a60      	ldr	r2, [pc, #384]	; (8004a28 <USB_DeactivateEndpoint+0x2d4>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29c      	uxth	r4, r3
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	18d3      	adds	r3, r2, r3
 80048b4:	4a5d      	ldr	r2, [pc, #372]	; (8004a2c <USB_DeactivateEndpoint+0x2d8>)
 80048b6:	4322      	orrs	r2, r4
 80048b8:	b292      	uxth	r2, r2
 80048ba:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	18d3      	adds	r3, r2, r3
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4a57      	ldr	r2, [pc, #348]	; (8004a28 <USB_DeactivateEndpoint+0x2d4>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	b29c      	uxth	r4, r3
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	18d3      	adds	r3, r2, r3
 80048da:	4a54      	ldr	r2, [pc, #336]	; (8004a2c <USB_DeactivateEndpoint+0x2d8>)
 80048dc:	4322      	orrs	r2, r4
 80048de:	b292      	uxth	r2, r2
 80048e0:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	18d3      	adds	r3, r2, r3
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4a52      	ldr	r2, [pc, #328]	; (8004a3c <USB_DeactivateEndpoint+0x2e8>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	b29c      	uxth	r4, r3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	18d3      	adds	r3, r2, r3
 8004900:	4a4c      	ldr	r2, [pc, #304]	; (8004a34 <USB_DeactivateEndpoint+0x2e0>)
 8004902:	4322      	orrs	r2, r4
 8004904:	b292      	uxth	r2, r2
 8004906:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	18d3      	adds	r3, r2, r3
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	4a46      	ldr	r2, [pc, #280]	; (8004a30 <USB_DeactivateEndpoint+0x2dc>)
 8004918:	4013      	ands	r3, r2
 800491a:	b29c      	uxth	r4, r3
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	18d3      	adds	r3, r2, r3
 8004926:	4a43      	ldr	r2, [pc, #268]	; (8004a34 <USB_DeactivateEndpoint+0x2e0>)
 8004928:	4322      	orrs	r2, r4
 800492a:	b292      	uxth	r2, r2
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	e075      	b.n	8004a1c <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	18d3      	adds	r3, r2, r3
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29c      	uxth	r4, r3
 800493e:	0022      	movs	r2, r4
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	01db      	lsls	r3, r3, #7
 8004944:	4013      	ands	r3, r2
 8004946:	d012      	beq.n	800496e <USB_DeactivateEndpoint+0x21a>
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	18d3      	adds	r3, r2, r3
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <USB_DeactivateEndpoint+0x2d4>)
 8004958:	4013      	ands	r3, r2
 800495a:	b29c      	uxth	r4, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	18d3      	adds	r3, r2, r3
 8004966:	4a34      	ldr	r2, [pc, #208]	; (8004a38 <USB_DeactivateEndpoint+0x2e4>)
 8004968:	4322      	orrs	r2, r4
 800496a:	b292      	uxth	r2, r2
 800496c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	18d3      	adds	r3, r2, r3
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29c      	uxth	r4, r3
 800497c:	0022      	movs	r2, r4
 800497e:	2340      	movs	r3, #64	; 0x40
 8004980:	4013      	ands	r3, r2
 8004982:	d012      	beq.n	80049aa <USB_DeactivateEndpoint+0x256>
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	18d3      	adds	r3, r2, r3
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	4a25      	ldr	r2, [pc, #148]	; (8004a28 <USB_DeactivateEndpoint+0x2d4>)
 8004994:	4013      	ands	r3, r2
 8004996:	b29c      	uxth	r4, r3
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	18d3      	adds	r3, r2, r3
 80049a2:	4a22      	ldr	r2, [pc, #136]	; (8004a2c <USB_DeactivateEndpoint+0x2d8>)
 80049a4:	4322      	orrs	r2, r4
 80049a6:	b292      	uxth	r2, r2
 80049a8:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	18d3      	adds	r3, r2, r3
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	4a1b      	ldr	r2, [pc, #108]	; (8004a28 <USB_DeactivateEndpoint+0x2d4>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	b29c      	uxth	r4, r3
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	18d3      	adds	r3, r2, r3
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <USB_DeactivateEndpoint+0x2e4>)
 80049ca:	4322      	orrs	r2, r4
 80049cc:	b292      	uxth	r2, r2
 80049ce:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	18d3      	adds	r3, r2, r3
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <USB_DeactivateEndpoint+0x2dc>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	b29c      	uxth	r4, r3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	18d3      	adds	r3, r2, r3
 80049ee:	4a11      	ldr	r2, [pc, #68]	; (8004a34 <USB_DeactivateEndpoint+0x2e0>)
 80049f0:	4322      	orrs	r2, r4
 80049f2:	b292      	uxth	r2, r2
 80049f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	18d3      	adds	r3, r2, r3
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4a0d      	ldr	r2, [pc, #52]	; (8004a3c <USB_DeactivateEndpoint+0x2e8>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	b29c      	uxth	r4, r3
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	18d3      	adds	r3, r2, r3
 8004a14:	4a07      	ldr	r2, [pc, #28]	; (8004a34 <USB_DeactivateEndpoint+0x2e0>)
 8004a16:	4322      	orrs	r2, r4
 8004a18:	b292      	uxth	r2, r2
 8004a1a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b003      	add	sp, #12
 8004a24:	bd90      	pop	{r4, r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	ffff8f8f 	.word	0xffff8f8f
 8004a2c:	ffff80c0 	.word	0xffff80c0
 8004a30:	ffff8fbf 	.word	0xffff8fbf
 8004a34:	ffff8080 	.word	0xffff8080
 8004a38:	ffffc080 	.word	0xffffc080
 8004a3c:	ffffbf8f 	.word	0xffffbf8f

08004a40 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b095      	sub	sp, #84	; 0x54
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d000      	beq.n	8004a54 <USB_EPStartXfer+0x14>
 8004a52:	e163      	b.n	8004d1c <USB_EPStartXfer+0x2dc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d909      	bls.n	8004a74 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6c:	1ad2      	subs	r2, r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	619a      	str	r2, [r3, #24]
 8004a72:	e005      	b.n	8004a80 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	7b1b      	ldrb	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d11b      	bne.n	8004ac0 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6959      	ldr	r1, [r3, #20]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	88da      	ldrh	r2, [r3, #6]
 8004a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fbbb 	bl	8005210 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a9a:	687c      	ldr	r4, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2250      	movs	r2, #80	; 0x50
 8004aa0:	5a9b      	ldrh	r3, [r3, r2]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	18e4      	adds	r4, r4, r3
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	18e3      	adds	r3, r4, r3
 8004aae:	4acc      	ldr	r2, [pc, #816]	; (8004de0 <USB_EPStartXfer+0x3a0>)
 8004ab0:	4694      	mov	ip, r2
 8004ab2:	4463      	add	r3, ip
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	801a      	strh	r2, [r3, #0]
 8004abe:	e113      	b.n	8004ce8 <USB_EPStartXfer+0x2a8>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	001a      	movs	r2, r3
 8004ad0:	2340      	movs	r3, #64	; 0x40
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d067      	beq.n	8004ba6 <USB_EPStartXfer+0x166>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ad6:	687c      	ldr	r4, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d147      	bne.n	8004b70 <USB_EPStartXfer+0x130>
 8004ae0:	687c      	ldr	r4, [r7, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2250      	movs	r2, #80	; 0x50
 8004ae6:	5a9b      	ldrh	r3, [r3, r2]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	18e4      	adds	r4, r4, r3
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	18e3      	adds	r3, r4, r3
 8004af4:	4abb      	ldr	r2, [pc, #748]	; (8004de4 <USB_EPStartXfer+0x3a4>)
 8004af6:	4694      	mov	ip, r2
 8004af8:	4463      	add	r3, ip
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10e      	bne.n	8004b20 <USB_EPStartXfer+0xe0>
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	4ab8      	ldr	r2, [pc, #736]	; (8004de8 <USB_EPStartXfer+0x3a8>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	801a      	strh	r2, [r3, #0]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	4ab5      	ldr	r2, [pc, #724]	; (8004dec <USB_EPStartXfer+0x3ac>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	e03c      	b.n	8004b9a <USB_EPStartXfer+0x15a>
 8004b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b22:	2b3e      	cmp	r3, #62	; 0x3e
 8004b24:	d810      	bhi.n	8004b48 <USB_EPStartXfer+0x108>
 8004b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2e:	2201      	movs	r2, #1
 8004b30:	4013      	ands	r3, r2
 8004b32:	d002      	beq.n	8004b3a <USB_EPStartXfer+0xfa>
 8004b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b36:	3301      	adds	r3, #1
 8004b38:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	029b      	lsls	r3, r3, #10
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	801a      	strh	r2, [r3, #0]
 8004b46:	e028      	b.n	8004b9a <USB_EPStartXfer+0x15a>
 8004b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b50:	221f      	movs	r2, #31
 8004b52:	4013      	ands	r3, r2
 8004b54:	d102      	bne.n	8004b5c <USB_EPStartXfer+0x11c>
 8004b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	4aa1      	ldr	r2, [pc, #644]	; (8004dec <USB_EPStartXfer+0x3ac>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	801a      	strh	r2, [r3, #0]
 8004b6e:	e014      	b.n	8004b9a <USB_EPStartXfer+0x15a>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d110      	bne.n	8004b9a <USB_EPStartXfer+0x15a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2250      	movs	r2, #80	; 0x50
 8004b7c:	5a9b      	ldrh	r3, [r3, r2]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	18e4      	adds	r4, r4, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	18e3      	adds	r3, r4, r3
 8004b8a:	4a96      	ldr	r2, [pc, #600]	; (8004de4 <USB_EPStartXfer+0x3a4>)
 8004b8c:	4694      	mov	ip, r2
 8004b8e:	4463      	add	r3, ip
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004b9a:	234e      	movs	r3, #78	; 0x4e
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	8952      	ldrh	r2, [r2, #10]
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e066      	b.n	8004c74 <USB_EPStartXfer+0x234>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d147      	bne.n	8004c3e <USB_EPStartXfer+0x1fe>
 8004bae:	687c      	ldr	r4, [r7, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2250      	movs	r2, #80	; 0x50
 8004bb4:	5a9b      	ldrh	r3, [r3, r2]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	18e4      	adds	r4, r4, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	18e3      	adds	r3, r4, r3
 8004bc2:	4a87      	ldr	r2, [pc, #540]	; (8004de0 <USB_EPStartXfer+0x3a0>)
 8004bc4:	4694      	mov	ip, r2
 8004bc6:	4463      	add	r3, ip
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10e      	bne.n	8004bee <USB_EPStartXfer+0x1ae>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	4a84      	ldr	r2, [pc, #528]	; (8004de8 <USB_EPStartXfer+0x3a8>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	4a82      	ldr	r2, [pc, #520]	; (8004dec <USB_EPStartXfer+0x3ac>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	e03d      	b.n	8004c6a <USB_EPStartXfer+0x22a>
 8004bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8004bf2:	d810      	bhi.n	8004c16 <USB_EPStartXfer+0x1d6>
 8004bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d002      	beq.n	8004c08 <USB_EPStartXfer+0x1c8>
 8004c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c04:	3301      	adds	r3, #1
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40
 8004c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	029b      	lsls	r3, r3, #10
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	801a      	strh	r2, [r3, #0]
 8004c14:	e029      	b.n	8004c6a <USB_EPStartXfer+0x22a>
 8004c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1e:	221f      	movs	r2, #31
 8004c20:	4013      	ands	r3, r2
 8004c22:	d102      	bne.n	8004c2a <USB_EPStartXfer+0x1ea>
 8004c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c26:	3b01      	subs	r3, #1
 8004c28:	643b      	str	r3, [r7, #64]	; 0x40
 8004c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	029b      	lsls	r3, r3, #10
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	4a6e      	ldr	r2, [pc, #440]	; (8004dec <USB_EPStartXfer+0x3ac>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	e015      	b.n	8004c6a <USB_EPStartXfer+0x22a>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d111      	bne.n	8004c6a <USB_EPStartXfer+0x22a>
 8004c46:	687c      	ldr	r4, [r7, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2250      	movs	r2, #80	; 0x50
 8004c4c:	5a9b      	ldrh	r3, [r3, r2]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	18e4      	adds	r4, r4, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	18e3      	adds	r3, r4, r3
 8004c5a:	4a61      	ldr	r2, [pc, #388]	; (8004de0 <USB_EPStartXfer+0x3a0>)
 8004c5c:	4694      	mov	ip, r2
 8004c5e:	4463      	add	r3, ip
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8004c6a:	234e      	movs	r3, #78	; 0x4e
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	8912      	ldrh	r2, [r2, #8]
 8004c72:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6959      	ldr	r1, [r3, #20]
 8004c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7a:	b29c      	uxth	r4, r3
 8004c7c:	234e      	movs	r3, #78	; 0x4e
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	881a      	ldrh	r2, [r3, #0]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	0023      	movs	r3, r4
 8004c86:	f000 fac3 	bl	8005210 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d113      	bne.n	8004cba <USB_EPStartXfer+0x27a>
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	18d3      	adds	r3, r2, r3
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	4a53      	ldr	r2, [pc, #332]	; (8004df0 <USB_EPStartXfer+0x3b0>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	b29c      	uxth	r4, r3
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	18d3      	adds	r3, r2, r3
 8004cb0:	4a50      	ldr	r2, [pc, #320]	; (8004df4 <USB_EPStartXfer+0x3b4>)
 8004cb2:	4322      	orrs	r2, r4
 8004cb4:	b292      	uxth	r2, r2
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	e016      	b.n	8004ce8 <USB_EPStartXfer+0x2a8>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d112      	bne.n	8004ce8 <USB_EPStartXfer+0x2a8>
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	18d3      	adds	r3, r2, r3
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4a47      	ldr	r2, [pc, #284]	; (8004df0 <USB_EPStartXfer+0x3b0>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	b29c      	uxth	r4, r3
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	18d3      	adds	r3, r2, r3
 8004ce0:	4a45      	ldr	r2, [pc, #276]	; (8004df8 <USB_EPStartXfer+0x3b8>)
 8004ce2:	4322      	orrs	r2, r4
 8004ce4:	b292      	uxth	r2, r2
 8004ce6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	18d3      	adds	r3, r2, r3
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	4a41      	ldr	r2, [pc, #260]	; (8004dfc <USB_EPStartXfer+0x3bc>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	b29c      	uxth	r4, r3
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	4063      	eors	r3, r4
 8004d00:	b29c      	uxth	r4, r3
 8004d02:	2320      	movs	r3, #32
 8004d04:	4063      	eors	r3, r4
 8004d06:	b29c      	uxth	r4, r3
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	18d3      	adds	r3, r2, r3
 8004d12:	4a3b      	ldr	r2, [pc, #236]	; (8004e00 <USB_EPStartXfer+0x3c0>)
 8004d14:	4322      	orrs	r2, r4
 8004d16:	b292      	uxth	r2, r2
 8004d18:	801a      	strh	r2, [r3, #0]
 8004d1a:	e152      	b.n	8004fc2 <USB_EPStartXfer+0x582>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d909      	bls.n	8004d3c <USB_EPStartXfer+0x2fc>
    {
      len = ep->maxpacket;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d34:	1ad2      	subs	r2, r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	619a      	str	r2, [r3, #24]
 8004d3a:	e005      	b.n	8004d48 <USB_EPStartXfer+0x308>
    }
    else
    {
      len = ep->xfer_len;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2200      	movs	r2, #0
 8004d46:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	7b1b      	ldrb	r3, [r3, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d159      	bne.n	8004e04 <USB_EPStartXfer+0x3c4>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004d50:	687c      	ldr	r4, [r7, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2250      	movs	r2, #80	; 0x50
 8004d56:	5a9b      	ldrh	r3, [r3, r2]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	18e4      	adds	r4, r4, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	18e3      	adds	r3, r4, r3
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <USB_EPStartXfer+0x3a4>)
 8004d66:	4694      	mov	ip, r2
 8004d68:	4463      	add	r3, ip
 8004d6a:	623b      	str	r3, [r7, #32]
 8004d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10e      	bne.n	8004d90 <USB_EPStartXfer+0x350>
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <USB_EPStartXfer+0x3a8>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <USB_EPStartXfer+0x3ac>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	e0fd      	b.n	8004f8c <USB_EPStartXfer+0x54c>
 8004d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d92:	2b3e      	cmp	r3, #62	; 0x3e
 8004d94:	d810      	bhi.n	8004db8 <USB_EPStartXfer+0x378>
 8004d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4013      	ands	r3, r2
 8004da2:	d002      	beq.n	8004daa <USB_EPStartXfer+0x36a>
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	3301      	adds	r3, #1
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	029b      	lsls	r3, r3, #10
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	801a      	strh	r2, [r3, #0]
 8004db6:	e0e9      	b.n	8004f8c <USB_EPStartXfer+0x54c>
 8004db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc0:	221f      	movs	r2, #31
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d102      	bne.n	8004dcc <USB_EPStartXfer+0x38c>
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	029b      	lsls	r3, r3, #10
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	4a05      	ldr	r2, [pc, #20]	; (8004dec <USB_EPStartXfer+0x3ac>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e0d5      	b.n	8004f8c <USB_EPStartXfer+0x54c>
 8004de0:	00000402 	.word	0x00000402
 8004de4:	00000406 	.word	0x00000406
 8004de8:	ffff83ff 	.word	0xffff83ff
 8004dec:	ffff8000 	.word	0xffff8000
 8004df0:	ffff8f8f 	.word	0xffff8f8f
 8004df4:	ffff80c0 	.word	0xffff80c0
 8004df8:	ffffc080 	.word	0xffffc080
 8004dfc:	ffff8fbf 	.word	0xffff8fbf
 8004e00:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d147      	bne.n	8004e9c <USB_EPStartXfer+0x45c>
 8004e0c:	687c      	ldr	r4, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2250      	movs	r2, #80	; 0x50
 8004e12:	5a9b      	ldrh	r3, [r3, r2]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	18e4      	adds	r4, r4, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	18e3      	adds	r3, r4, r3
 8004e20:	4a6a      	ldr	r2, [pc, #424]	; (8004fcc <USB_EPStartXfer+0x58c>)
 8004e22:	4694      	mov	ip, r2
 8004e24:	4463      	add	r3, ip
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10e      	bne.n	8004e4c <USB_EPStartXfer+0x40c>
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	4a67      	ldr	r2, [pc, #412]	; (8004fd0 <USB_EPStartXfer+0x590>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	4a64      	ldr	r2, [pc, #400]	; (8004fd4 <USB_EPStartXfer+0x594>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	e03d      	b.n	8004ec8 <USB_EPStartXfer+0x488>
 8004e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e50:	d810      	bhi.n	8004e74 <USB_EPStartXfer+0x434>
 8004e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d002      	beq.n	8004e66 <USB_EPStartXfer+0x426>
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	3301      	adds	r3, #1
 8004e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	029b      	lsls	r3, r3, #10
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	e029      	b.n	8004ec8 <USB_EPStartXfer+0x488>
 8004e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7c:	221f      	movs	r2, #31
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d102      	bne.n	8004e88 <USB_EPStartXfer+0x448>
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	3b01      	subs	r3, #1
 8004e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	029b      	lsls	r3, r3, #10
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	4a50      	ldr	r2, [pc, #320]	; (8004fd4 <USB_EPStartXfer+0x594>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	801a      	strh	r2, [r3, #0]
 8004e9a:	e015      	b.n	8004ec8 <USB_EPStartXfer+0x488>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d111      	bne.n	8004ec8 <USB_EPStartXfer+0x488>
 8004ea4:	687c      	ldr	r4, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2250      	movs	r2, #80	; 0x50
 8004eaa:	5a9b      	ldrh	r3, [r3, r2]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	18e4      	adds	r4, r4, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	18e3      	adds	r3, r4, r3
 8004eb8:	4a44      	ldr	r2, [pc, #272]	; (8004fcc <USB_EPStartXfer+0x58c>)
 8004eba:	4694      	mov	ip, r2
 8004ebc:	4463      	add	r3, ip
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	801a      	strh	r2, [r3, #0]
 8004ec8:	687c      	ldr	r4, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	785b      	ldrb	r3, [r3, #1]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d147      	bne.n	8004f62 <USB_EPStartXfer+0x522>
 8004ed2:	687c      	ldr	r4, [r7, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2250      	movs	r2, #80	; 0x50
 8004ed8:	5a9b      	ldrh	r3, [r3, r2]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	18e4      	adds	r4, r4, r3
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	18e3      	adds	r3, r4, r3
 8004ee6:	4a3c      	ldr	r2, [pc, #240]	; (8004fd8 <USB_EPStartXfer+0x598>)
 8004ee8:	4694      	mov	ip, r2
 8004eea:	4463      	add	r3, ip
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
 8004eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10e      	bne.n	8004f12 <USB_EPStartXfer+0x4d2>
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	4a35      	ldr	r2, [pc, #212]	; (8004fd0 <USB_EPStartXfer+0x590>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	4a33      	ldr	r2, [pc, #204]	; (8004fd4 <USB_EPStartXfer+0x594>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e03c      	b.n	8004f8c <USB_EPStartXfer+0x54c>
 8004f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f14:	2b3e      	cmp	r3, #62	; 0x3e
 8004f16:	d810      	bhi.n	8004f3a <USB_EPStartXfer+0x4fa>
 8004f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f20:	2201      	movs	r2, #1
 8004f22:	4013      	ands	r3, r2
 8004f24:	d002      	beq.n	8004f2c <USB_EPStartXfer+0x4ec>
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f28:	3301      	adds	r3, #1
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	029b      	lsls	r3, r3, #10
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e028      	b.n	8004f8c <USB_EPStartXfer+0x54c>
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f42:	221f      	movs	r2, #31
 8004f44:	4013      	ands	r3, r2
 8004f46:	d102      	bne.n	8004f4e <USB_EPStartXfer+0x50e>
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	029b      	lsls	r3, r3, #10
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <USB_EPStartXfer+0x594>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	801a      	strh	r2, [r3, #0]
 8004f60:	e014      	b.n	8004f8c <USB_EPStartXfer+0x54c>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	785b      	ldrb	r3, [r3, #1]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d110      	bne.n	8004f8c <USB_EPStartXfer+0x54c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2250      	movs	r2, #80	; 0x50
 8004f6e:	5a9b      	ldrh	r3, [r3, r2]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	18e4      	adds	r4, r4, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	18e3      	adds	r3, r4, r3
 8004f7c:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <USB_EPStartXfer+0x598>)
 8004f7e:	4694      	mov	ip, r2
 8004f80:	4463      	add	r3, ip
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	18d3      	adds	r3, r2, r3
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	4a10      	ldr	r2, [pc, #64]	; (8004fdc <USB_EPStartXfer+0x59c>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	b29c      	uxth	r4, r3
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	015b      	lsls	r3, r3, #5
 8004fa4:	4063      	eors	r3, r4
 8004fa6:	b29c      	uxth	r4, r3
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	019b      	lsls	r3, r3, #6
 8004fac:	4063      	eors	r3, r4
 8004fae:	b29c      	uxth	r4, r3
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	18d3      	adds	r3, r2, r3
 8004fba:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <USB_EPStartXfer+0x5a0>)
 8004fbc:	4322      	orrs	r2, r4
 8004fbe:	b292      	uxth	r2, r2
 8004fc0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b015      	add	sp, #84	; 0x54
 8004fca:	bd90      	pop	{r4, r7, pc}
 8004fcc:	00000402 	.word	0x00000402
 8004fd0:	ffff83ff 	.word	0xffff83ff
 8004fd4:	ffff8000 	.word	0xffff8000
 8004fd8:	00000406 	.word	0x00000406
 8004fdc:	ffffbf8f 	.word	0xffffbf8f
 8004fe0:	ffff8080 	.word	0xffff8080

08004fe4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	18d3      	adds	r3, r2, r3
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	4a15      	ldr	r2, [pc, #84]	; (800505c <USB_EPSetStall+0x78>)
 8005006:	4013      	ands	r3, r2
 8005008:	b29c      	uxth	r4, r3
 800500a:	2310      	movs	r3, #16
 800500c:	4063      	eors	r3, r4
 800500e:	b29c      	uxth	r4, r3
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	18d3      	adds	r3, r2, r3
 800501a:	4a11      	ldr	r2, [pc, #68]	; (8005060 <USB_EPSetStall+0x7c>)
 800501c:	4322      	orrs	r2, r4
 800501e:	b292      	uxth	r2, r2
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	e016      	b.n	8005052 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	18d3      	adds	r3, r2, r3
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	4a0c      	ldr	r2, [pc, #48]	; (8005064 <USB_EPSetStall+0x80>)
 8005034:	4013      	ands	r3, r2
 8005036:	b29c      	uxth	r4, r3
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	015b      	lsls	r3, r3, #5
 800503c:	4063      	eors	r3, r4
 800503e:	b29c      	uxth	r4, r3
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	18d3      	adds	r3, r2, r3
 800504a:	4a05      	ldr	r2, [pc, #20]	; (8005060 <USB_EPSetStall+0x7c>)
 800504c:	4322      	orrs	r2, r4
 800504e:	b292      	uxth	r2, r2
 8005050:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	0018      	movs	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	b003      	add	sp, #12
 800505a:	bd90      	pop	{r4, r7, pc}
 800505c:	ffff8fbf 	.word	0xffff8fbf
 8005060:	ffff8080 	.word	0xffff8080
 8005064:	ffffbf8f 	.word	0xffffbf8f

08005068 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	7b1b      	ldrb	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d000      	beq.n	800507c <USB_EPClearStall+0x14>
 800507a:	e076      	b.n	800516a <USB_EPClearStall+0x102>
  {
    if (ep->is_in != 0U)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d038      	beq.n	80050f6 <USB_EPClearStall+0x8e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	18d3      	adds	r3, r2, r3
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29c      	uxth	r4, r3
 8005092:	0022      	movs	r2, r4
 8005094:	2340      	movs	r3, #64	; 0x40
 8005096:	4013      	ands	r3, r2
 8005098:	d012      	beq.n	80050c0 <USB_EPClearStall+0x58>
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	18d3      	adds	r3, r2, r3
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	4a32      	ldr	r2, [pc, #200]	; (8005174 <USB_EPClearStall+0x10c>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	b29c      	uxth	r4, r3
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	18d3      	adds	r3, r2, r3
 80050b8:	4a2f      	ldr	r2, [pc, #188]	; (8005178 <USB_EPClearStall+0x110>)
 80050ba:	4322      	orrs	r2, r4
 80050bc:	b292      	uxth	r2, r2
 80050be:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	78db      	ldrb	r3, [r3, #3]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d050      	beq.n	800516a <USB_EPClearStall+0x102>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	18d3      	adds	r3, r2, r3
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	4a29      	ldr	r2, [pc, #164]	; (800517c <USB_EPClearStall+0x114>)
 80050d8:	4013      	ands	r3, r2
 80050da:	b29c      	uxth	r4, r3
 80050dc:	2320      	movs	r3, #32
 80050de:	4063      	eors	r3, r4
 80050e0:	b29c      	uxth	r4, r3
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	18d3      	adds	r3, r2, r3
 80050ec:	4a24      	ldr	r2, [pc, #144]	; (8005180 <USB_EPClearStall+0x118>)
 80050ee:	4322      	orrs	r2, r4
 80050f0:	b292      	uxth	r2, r2
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	e039      	b.n	800516a <USB_EPClearStall+0x102>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	18d3      	adds	r3, r2, r3
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29c      	uxth	r4, r3
 8005104:	0022      	movs	r2, r4
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	01db      	lsls	r3, r3, #7
 800510a:	4013      	ands	r3, r2
 800510c:	d012      	beq.n	8005134 <USB_EPClearStall+0xcc>
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	18d3      	adds	r3, r2, r3
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	4a15      	ldr	r2, [pc, #84]	; (8005174 <USB_EPClearStall+0x10c>)
 800511e:	4013      	ands	r3, r2
 8005120:	b29c      	uxth	r4, r3
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	18d3      	adds	r3, r2, r3
 800512c:	4a15      	ldr	r2, [pc, #84]	; (8005184 <USB_EPClearStall+0x11c>)
 800512e:	4322      	orrs	r2, r4
 8005130:	b292      	uxth	r2, r2
 8005132:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	18d3      	adds	r3, r2, r3
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	4a11      	ldr	r2, [pc, #68]	; (8005188 <USB_EPClearStall+0x120>)
 8005144:	4013      	ands	r3, r2
 8005146:	b29c      	uxth	r4, r3
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	015b      	lsls	r3, r3, #5
 800514c:	4063      	eors	r3, r4
 800514e:	b29c      	uxth	r4, r3
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	019b      	lsls	r3, r3, #6
 8005154:	4063      	eors	r3, r4
 8005156:	b29c      	uxth	r4, r3
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	18d3      	adds	r3, r2, r3
 8005162:	4a07      	ldr	r2, [pc, #28]	; (8005180 <USB_EPClearStall+0x118>)
 8005164:	4322      	orrs	r2, r4
 8005166:	b292      	uxth	r2, r2
 8005168:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b003      	add	sp, #12
 8005172:	bd90      	pop	{r4, r7, pc}
 8005174:	ffff8f8f 	.word	0xffff8f8f
 8005178:	ffff80c0 	.word	0xffff80c0
 800517c:	ffff8fbf 	.word	0xffff8fbf
 8005180:	ffff8080 	.word	0xffff8080
 8005184:	ffffc080 	.word	0xffffc080
 8005188:	ffffbf8f 	.word	0xffffbf8f

0800518c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	000a      	movs	r2, r1
 8005196:	1cfb      	adds	r3, r7, #3
 8005198:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800519a:	1cfb      	adds	r3, r7, #3
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	224c      	movs	r2, #76	; 0x4c
 80051a6:	2180      	movs	r1, #128	; 0x80
 80051a8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	0018      	movs	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b002      	add	sp, #8
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2258      	movs	r2, #88	; 0x58
 80051c0:	5a9b      	ldrh	r3, [r3, r2]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	4a05      	ldr	r2, [pc, #20]	; (80051dc <USB_DevConnect+0x28>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	b299      	uxth	r1, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2258      	movs	r2, #88	; 0x58
 80051ce:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b002      	add	sp, #8
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	ffff8000 	.word	0xffff8000

080051e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2244      	movs	r2, #68	; 0x44
 80051ec:	5a9b      	ldrh	r3, [r3, r2]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80051f2:	68fb      	ldr	r3, [r7, #12]
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b004      	add	sp, #16
 80051fa:	bd80      	pop	{r7, pc}

080051fc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	0018      	movs	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08c      	sub	sp, #48	; 0x30
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	0019      	movs	r1, r3
 800521c:	1dbb      	adds	r3, r7, #6
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	1d3b      	adds	r3, r7, #4
 8005222:	1c0a      	adds	r2, r1, #0
 8005224:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005238:	1dbb      	adds	r3, r7, #6
 800523a:	881a      	ldrh	r2, [r3, #0]
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	18d3      	adds	r3, r2, r3
 8005240:	2280      	movs	r2, #128	; 0x80
 8005242:	00d2      	lsls	r2, r2, #3
 8005244:	4694      	mov	ip, r2
 8005246:	4463      	add	r3, ip
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524e:	e01b      	b.n	8005288 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	3301      	adds	r3, #1
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	b29b      	uxth	r3, r3
 8005266:	001a      	movs	r2, r3
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	b29a      	uxth	r2, r3
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	3302      	adds	r3, #2
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	3301      	adds	r3, #1
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	3b01      	subs	r3, #1
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e0      	bne.n	8005250 <USB_WritePMA+0x40>
  }
}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	b00c      	add	sp, #48	; 0x30
 8005294:	bd80      	pop	{r7, pc}

08005296 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b08a      	sub	sp, #40	; 0x28
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	0019      	movs	r1, r3
 80052a2:	1dbb      	adds	r3, r7, #6
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	1d3b      	adds	r3, r7, #4
 80052a8:	1c0a      	adds	r2, r1, #0
 80052aa:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80052ac:	1d3b      	adds	r3, r7, #4
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80052be:	1dbb      	adds	r3, r7, #6
 80052c0:	881a      	ldrh	r2, [r3, #0]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	2280      	movs	r2, #128	; 0x80
 80052c8:	00d2      	lsls	r2, r2, #3
 80052ca:	4694      	mov	ip, r2
 80052cc:	4463      	add	r3, ip
 80052ce:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	e018      	b.n	8005308 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	3302      	adds	r3, #2
 80052e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3301      	adds	r3, #1
 80052f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	3301      	adds	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	3b01      	subs	r3, #1
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e3      	bne.n	80052d6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800530e:	1d3b      	adds	r3, r7, #4
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	2201      	movs	r2, #1
 8005314:	4013      	ands	r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	b2da      	uxtb	r2, r3
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	701a      	strb	r2, [r3, #0]
  }
}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	b00a      	add	sp, #40	; 0x28
 8005332:	bd80      	pop	{r7, pc}

08005334 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	000a      	movs	r2, r1
 800533e:	1cfb      	adds	r3, r7, #3
 8005340:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005342:	230f      	movs	r3, #15
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	2200      	movs	r2, #0
 8005348:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	2340      	movs	r3, #64	; 0x40
 800534e:	2203      	movs	r2, #3
 8005350:	2181      	movs	r1, #129	; 0x81
 8005352:	f001 ff4f 	bl	80071f4 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	2340      	movs	r3, #64	; 0x40
 8005360:	2203      	movs	r2, #3
 8005362:	2101      	movs	r1, #1
 8005364:	f001 ff46 	bl	80071f4 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	23b6      	movs	r3, #182	; 0xb6
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	2101      	movs	r1, #1
 8005370:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005372:	2054      	movs	r0, #84	; 0x54
 8005374:	f002 f8c0 	bl	80074f8 <USBD_static_malloc>
 8005378:	0001      	movs	r1, r0
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	23ae      	movs	r3, #174	; 0xae
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	23ae      	movs	r3, #174	; 0xae
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	58d3      	ldr	r3, [r2, r3]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 800538e:	230f      	movs	r3, #15
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	e014      	b.n	80053c2 <USBD_CUSTOM_HID_Init+0x8e>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	23ae      	movs	r3, #174	; 0xae
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	58d3      	ldr	r3, [r2, r3]
 80053a0:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2250      	movs	r2, #80	; 0x50
 80053a6:	2100      	movs	r1, #0
 80053a8:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	23af      	movs	r3, #175	; 0xaf
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	58d3      	ldr	r3, [r2, r3]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	2340      	movs	r3, #64	; 0x40
 80053bc:	2101      	movs	r1, #1
 80053be:	f002 f863 	bl	8007488 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80053c2:	230f      	movs	r3, #15
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	781b      	ldrb	r3, [r3, #0]
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b004      	add	sp, #16
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	000a      	movs	r2, r1
 80053da:	1cfb      	adds	r3, r7, #3
 80053dc:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2181      	movs	r1, #129	; 0x81
 80053e2:	0018      	movs	r0, r3
 80053e4:	f001 ff3d 	bl	8007262 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2101      	movs	r1, #1
 80053f2:	0018      	movs	r0, r3
 80053f4:	f001 ff35 	bl	8007262 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	23b6      	movs	r3, #182	; 0xb6
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	2100      	movs	r1, #0
 8005400:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	23ae      	movs	r3, #174	; 0xae
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	58d3      	ldr	r3, [r2, r3]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d011      	beq.n	8005432 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	23af      	movs	r3, #175	; 0xaf
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	58d3      	ldr	r3, [r2, r3]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	23ae      	movs	r3, #174	; 0xae
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	58d3      	ldr	r3, [r2, r3]
 8005422:	0018      	movs	r0, r3
 8005424:	f002 f874 	bl	8007510 <USBD_static_free>
    pdev->pClassData = NULL;
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	23ae      	movs	r3, #174	; 0xae
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	2100      	movs	r1, #0
 8005430:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	23ae      	movs	r3, #174	; 0xae
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	58d3      	ldr	r3, [r2, r3]
 800544e:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005450:	231e      	movs	r3, #30
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2200      	movs	r2, #0
 8005456:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 8005458:	2300      	movs	r3, #0
 800545a:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800545c:	230e      	movs	r3, #14
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	2200      	movs	r2, #0
 8005462:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005464:	2317      	movs	r3, #23
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	001a      	movs	r2, r3
 8005472:	2360      	movs	r3, #96	; 0x60
 8005474:	4013      	ands	r3, r2
 8005476:	d044      	beq.n	8005502 <USBD_CUSTOM_HID_Setup+0xc6>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d000      	beq.n	800547e <USBD_CUSTOM_HID_Setup+0x42>
 800547c:	e0d5      	b.n	800562a <USBD_CUSTOM_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b0b      	cmp	r3, #11
 8005484:	d831      	bhi.n	80054ea <USBD_CUSTOM_HID_Setup+0xae>
 8005486:	009a      	lsls	r2, r3, #2
 8005488:	4b71      	ldr	r3, [pc, #452]	; (8005650 <USBD_CUSTOM_HID_Setup+0x214>)
 800548a:	18d3      	adds	r3, r2, r3
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	885b      	ldrh	r3, [r3, #2]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	001a      	movs	r2, r3
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800549c:	e030      	b.n	8005500 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	3340      	adds	r3, #64	; 0x40
 80054a2:	0019      	movs	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	0018      	movs	r0, r3
 80054aa:	f001 fb2f 	bl	8006b0c <USBD_CtlSendData>
          break;
 80054ae:	e027      	b.n	8005500 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	885b      	ldrh	r3, [r3, #2]
 80054b4:	0a1b      	lsrs	r3, r3, #8
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	001a      	movs	r2, r3
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80054c0:	e01e      	b.n	8005500 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	3344      	adds	r3, #68	; 0x44
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	0018      	movs	r0, r3
 80054ce:	f001 fb1d 	bl	8006b0c <USBD_CtlSendData>
          break;
 80054d2:	e015      	b.n	8005500 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2201      	movs	r2, #1
 80054d8:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80054da:	6939      	ldr	r1, [r7, #16]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	88da      	ldrh	r2, [r3, #6]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	0018      	movs	r0, r3
 80054e4:	f001 fb45 	bl	8006b72 <USBD_CtlPrepareRx>
          break;
 80054e8:	e00a      	b.n	8005500 <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	0011      	movs	r1, r2
 80054f0:	0018      	movs	r0, r3
 80054f2:	f001 fa8c 	bl	8006a0e <USBD_CtlError>
          ret = USBD_FAIL;
 80054f6:	2317      	movs	r3, #23
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	2202      	movs	r2, #2
 80054fc:	701a      	strb	r2, [r3, #0]
          break;
 80054fe:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005500:	e09e      	b.n	8005640 <USBD_CUSTOM_HID_Setup+0x204>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b06      	cmp	r3, #6
 8005508:	d021      	beq.n	800554e <USBD_CUSTOM_HID_Setup+0x112>
 800550a:	dc02      	bgt.n	8005512 <USBD_CUSTOM_HID_Setup+0xd6>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <USBD_CUSTOM_HID_Setup+0xe0>
 8005510:	e07f      	b.n	8005612 <USBD_CUSTOM_HID_Setup+0x1d6>
 8005512:	2b0a      	cmp	r3, #10
 8005514:	d04b      	beq.n	80055ae <USBD_CUSTOM_HID_Setup+0x172>
 8005516:	2b0b      	cmp	r3, #11
 8005518:	d063      	beq.n	80055e2 <USBD_CUSTOM_HID_Setup+0x1a6>
 800551a:	e07a      	b.n	8005612 <USBD_CUSTOM_HID_Setup+0x1d6>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	23a7      	movs	r3, #167	; 0xa7
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	5cd3      	ldrb	r3, [r2, r3]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d107      	bne.n	8005538 <USBD_CUSTOM_HID_Setup+0xfc>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005528:	230e      	movs	r3, #14
 800552a:	18f9      	adds	r1, r7, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	0018      	movs	r0, r3
 8005532:	f001 faeb 	bl	8006b0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005536:	e077      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0011      	movs	r1, r2
 800553e:	0018      	movs	r0, r3
 8005540:	f001 fa65 	bl	8006a0e <USBD_CtlError>
            ret = USBD_FAIL;
 8005544:	2317      	movs	r3, #23
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	2202      	movs	r2, #2
 800554a:	701a      	strb	r2, [r3, #0]
          break;
 800554c:	e06c      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	885b      	ldrh	r3, [r3, #2]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b22      	cmp	r3, #34	; 0x22
 8005558:	d10f      	bne.n	800557a <USBD_CUSTOM_HID_Setup+0x13e>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	88db      	ldrh	r3, [r3, #6]
 800555e:	221e      	movs	r2, #30
 8005560:	18ba      	adds	r2, r7, r2
 8005562:	b299      	uxth	r1, r3
 8005564:	2921      	cmp	r1, #33	; 0x21
 8005566:	d900      	bls.n	800556a <USBD_CUSTOM_HID_Setup+0x12e>
 8005568:	2321      	movs	r3, #33	; 0x21
 800556a:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	23af      	movs	r3, #175	; 0xaf
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	58d3      	ldr	r3, [r2, r3]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	e010      	b.n	800559c <USBD_CUSTOM_HID_Setup+0x160>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	885b      	ldrh	r3, [r3, #2]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b21      	cmp	r3, #33	; 0x21
 8005584:	d10a      	bne.n	800559c <USBD_CUSTOM_HID_Setup+0x160>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005586:	4b33      	ldr	r3, [pc, #204]	; (8005654 <USBD_CUSTOM_HID_Setup+0x218>)
 8005588:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	88db      	ldrh	r3, [r3, #6]
 800558e:	221e      	movs	r2, #30
 8005590:	18ba      	adds	r2, r7, r2
 8005592:	b299      	uxth	r1, r3
 8005594:	2909      	cmp	r1, #9
 8005596:	d900      	bls.n	800559a <USBD_CUSTOM_HID_Setup+0x15e>
 8005598:	2309      	movs	r3, #9
 800559a:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800559c:	231e      	movs	r3, #30
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	881a      	ldrh	r2, [r3, #0]
 80055a2:	69b9      	ldr	r1, [r7, #24]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	0018      	movs	r0, r3
 80055a8:	f001 fab0 	bl	8006b0c <USBD_CtlSendData>
          break;
 80055ac:	e03c      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	23a7      	movs	r3, #167	; 0xa7
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	5cd3      	ldrb	r3, [r2, r3]
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d108      	bne.n	80055cc <USBD_CUSTOM_HID_Setup+0x190>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3348      	adds	r3, #72	; 0x48
 80055be:	0019      	movs	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	0018      	movs	r0, r3
 80055c6:	f001 faa1 	bl	8006b0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055ca:	e02d      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0011      	movs	r1, r2
 80055d2:	0018      	movs	r0, r3
 80055d4:	f001 fa1b 	bl	8006a0e <USBD_CtlError>
            ret = USBD_FAIL;
 80055d8:	2317      	movs	r3, #23
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	2202      	movs	r2, #2
 80055de:	701a      	strb	r2, [r3, #0]
          break;
 80055e0:	e022      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	23a7      	movs	r3, #167	; 0xa7
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	5cd3      	ldrb	r3, [r2, r3]
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d106      	bne.n	80055fc <USBD_CUSTOM_HID_Setup+0x1c0>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	885b      	ldrh	r3, [r3, #2]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	001a      	movs	r2, r3
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055fa:	e015      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	0011      	movs	r1, r2
 8005602:	0018      	movs	r0, r3
 8005604:	f001 fa03 	bl	8006a0e <USBD_CtlError>
            ret = USBD_FAIL;
 8005608:	2317      	movs	r3, #23
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	2202      	movs	r2, #2
 800560e:	701a      	strb	r2, [r3, #0]
          break;
 8005610:	e00a      	b.n	8005628 <USBD_CUSTOM_HID_Setup+0x1ec>

        default:
          USBD_CtlError(pdev, req);
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	0011      	movs	r1, r2
 8005618:	0018      	movs	r0, r3
 800561a:	f001 f9f8 	bl	8006a0e <USBD_CtlError>
          ret = USBD_FAIL;
 800561e:	2317      	movs	r3, #23
 8005620:	18fb      	adds	r3, r7, r3
 8005622:	2202      	movs	r2, #2
 8005624:	701a      	strb	r2, [r3, #0]
          break;
 8005626:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005628:	e00a      	b.n	8005640 <USBD_CUSTOM_HID_Setup+0x204>

    default:
      USBD_CtlError(pdev, req);
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	0011      	movs	r1, r2
 8005630:	0018      	movs	r0, r3
 8005632:	f001 f9ec 	bl	8006a0e <USBD_CtlError>
      ret = USBD_FAIL;
 8005636:	2317      	movs	r3, #23
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	2202      	movs	r2, #2
 800563c:	701a      	strb	r2, [r3, #0]
      break;
 800563e:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8005640:	2317      	movs	r3, #23
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	781b      	ldrb	r3, [r3, #0]
}
 8005646:	0018      	movs	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	b008      	add	sp, #32
 800564c:	bd80      	pop	{r7, pc}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	08007694 	.word	0x08007694
 8005654:	200000c8 	.word	0x200000c8

08005658 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	1dbb      	adds	r3, r7, #6
 8005664:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	23ae      	movs	r3, #174	; 0xae
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	58d3      	ldr	r3, [r2, r3]
 800566e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	23a7      	movs	r3, #167	; 0xa7
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	5cd3      	ldrb	r3, [r2, r3]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d112      	bne.n	80056a2 <USBD_CUSTOM_HID_SendReport+0x4a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2250      	movs	r2, #80	; 0x50
 8005680:	5c9b      	ldrb	r3, [r3, r2]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <USBD_CUSTOM_HID_SendReport+0x46>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2250      	movs	r2, #80	; 0x50
 800568a:	2101      	movs	r1, #1
 800568c:	5499      	strb	r1, [r3, r2]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800568e:	1dbb      	adds	r3, r7, #6
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	2181      	movs	r1, #129	; 0x81
 8005698:	f001 febe 	bl	8007418 <USBD_LL_Transmit>
 800569c:	e001      	b.n	80056a2 <USBD_CUSTOM_HID_SendReport+0x4a>
    }
    else
    {
      return USBD_BUSY;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <USBD_CUSTOM_HID_SendReport+0x4c>
    }
  }
  return USBD_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b006      	add	sp, #24
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2229      	movs	r2, #41	; 0x29
 80056b8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80056ba:	4b02      	ldr	r3, [pc, #8]	; (80056c4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 80056bc:	0018      	movs	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	b002      	add	sp, #8
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000044 	.word	0x20000044

080056c8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2229      	movs	r2, #41	; 0x29
 80056d4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80056d6:	4b02      	ldr	r3, [pc, #8]	; (80056e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 80056d8:	0018      	movs	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	b002      	add	sp, #8
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000070 	.word	0x20000070

080056e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2229      	movs	r2, #41	; 0x29
 80056f0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80056f2:	4b02      	ldr	r3, [pc, #8]	; (80056fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	2000009c 	.word	0x2000009c

08005700 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	000a      	movs	r2, r1
 800570a:	1cfb      	adds	r3, r7, #3
 800570c:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	23ae      	movs	r3, #174	; 0xae
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	58d3      	ldr	r3, [r2, r3]
 8005716:	2250      	movs	r2, #80	; 0x50
 8005718:	2100      	movs	r1, #0
 800571a:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	b002      	add	sp, #8
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	000a      	movs	r2, r1
 8005730:	1cfb      	adds	r3, r7, #3
 8005732:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	23ae      	movs	r3, #174	; 0xae
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	58d3      	ldr	r3, [r2, r3]
 800573c:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	23af      	movs	r3, #175	; 0xaf
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	58d3      	ldr	r3, [r2, r3]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	7810      	ldrb	r0, [r2, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	7852      	ldrb	r2, [r2, #1]
 8005750:	0011      	movs	r1, r2
 8005752:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	2101      	movs	r1, #1
 800575c:	f001 fe94 	bl	8007488 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	0018      	movs	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	b004      	add	sp, #16
 8005768:	bd80      	pop	{r7, pc}

0800576a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	23ae      	movs	r3, #174	; 0xae
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	58d3      	ldr	r3, [r2, r3]
 800577a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d10d      	bne.n	80057a0 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	23af      	movs	r3, #175	; 0xaf
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	58d3      	ldr	r3, [r2, r3]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	7810      	ldrb	r0, [r2, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	7852      	ldrb	r2, [r2, #1]
 8005796:	0011      	movs	r1, r2
 8005798:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b004      	add	sp, #16
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	220a      	movs	r2, #10
 80057b8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80057ba:	4b02      	ldr	r3, [pc, #8]	; (80057c4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b002      	add	sp, #8
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	200000d4 	.word	0x200000d4

080057c8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80057d2:	230f      	movs	r3, #15
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	2202      	movs	r2, #2
 80057d8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <USBD_CUSTOM_HID_RegisterInterface+0x2a>
  {
    pdev->pUserData = fops;
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	23af      	movs	r3, #175	; 0xaf
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80057ea:	230f      	movs	r3, #15
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80057f2:	230f      	movs	r3, #15
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	781b      	ldrb	r3, [r3, #0]
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b004      	add	sp, #16
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	1dfb      	adds	r3, r7, #7
 800580c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005814:	2302      	movs	r3, #2
 8005816:	e020      	b.n	800585a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	23ad      	movs	r3, #173	; 0xad
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	58d3      	ldr	r3, [r2, r3]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	23ad      	movs	r3, #173	; 0xad
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	2100      	movs	r1, #0
 800582c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	23ac      	movs	r3, #172	; 0xac
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	23a7      	movs	r3, #167	; 0xa7
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	2101      	movs	r1, #1
 8005846:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1dfa      	adds	r2, r7, #7
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	0018      	movs	r0, r3
 8005854:	f001 fc50 	bl	80070f8 <USBD_LL_Init>

  return USBD_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	0018      	movs	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	b004      	add	sp, #16
 8005860:	bd80      	pop	{r7, pc}

08005862 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800586c:	230f      	movs	r3, #15
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	2200      	movs	r2, #0
 8005872:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	23ad      	movs	r3, #173	; 0xad
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005884:	230f      	movs	r3, #15
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e003      	b.n	8005896 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800588e:	230f      	movs	r3, #15
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	2202      	movs	r2, #2
 8005894:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005896:	230f      	movs	r3, #15
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	781b      	ldrb	r3, [r3, #0]
}
 800589c:	0018      	movs	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	b004      	add	sp, #16
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f001 fc7a 	bl	80071a8 <USBD_LL_Start>

  return USBD_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	0018      	movs	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b002      	add	sp, #8
 80058bc:	bd80      	pop	{r7, pc}

080058be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b002      	add	sp, #8
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	000a      	movs	r2, r1
 80058da:	1cfb      	adds	r3, r7, #3
 80058dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058de:	230f      	movs	r3, #15
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	2202      	movs	r2, #2
 80058e4:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	23ad      	movs	r3, #173	; 0xad
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	58d3      	ldr	r3, [r2, r3]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00f      	beq.n	8005912 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	23ad      	movs	r3, #173	; 0xad
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	58d3      	ldr	r3, [r2, r3]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	1cfa      	adds	r2, r7, #3
 80058fe:	7811      	ldrb	r1, [r2, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	0010      	movs	r0, r2
 8005904:	4798      	blx	r3
 8005906:	1e03      	subs	r3, r0, #0
 8005908:	d103      	bne.n	8005912 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 800590a:	230f      	movs	r3, #15
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	2200      	movs	r2, #0
 8005910:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005912:	230f      	movs	r3, #15
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	781b      	ldrb	r3, [r3, #0]
}
 8005918:	0018      	movs	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	b004      	add	sp, #16
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	000a      	movs	r2, r1
 800592a:	1cfb      	adds	r3, r7, #3
 800592c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	23ad      	movs	r3, #173	; 0xad
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	58d3      	ldr	r3, [r2, r3]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	1cfa      	adds	r2, r7, #3
 800593a:	7811      	ldrb	r1, [r2, #0]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	0010      	movs	r0, r2
 8005940:	4798      	blx	r3

  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	22aa      	movs	r2, #170	; 0xaa
 800595a:	0092      	lsls	r2, r2, #2
 800595c:	4694      	mov	ip, r2
 800595e:	4463      	add	r3, ip
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	0011      	movs	r1, r2
 8005964:	0018      	movs	r0, r3
 8005966:	f001 f817 	bl	8006998 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	23a5      	movs	r3, #165	; 0xa5
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	2101      	movs	r1, #1
 8005972:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <USBD_LL_SetupStage+0xb4>)
 8005978:	5a9b      	ldrh	r3, [r3, r2]
 800597a:	0019      	movs	r1, r3
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	23a6      	movs	r3, #166	; 0xa6
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	23aa      	movs	r3, #170	; 0xaa
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	5cd3      	ldrb	r3, [r2, r3]
 800598c:	001a      	movs	r2, r3
 800598e:	231f      	movs	r3, #31
 8005990:	4013      	ands	r3, r2
 8005992:	2b01      	cmp	r3, #1
 8005994:	d00d      	beq.n	80059b2 <USBD_LL_SetupStage+0x66>
 8005996:	d302      	bcc.n	800599e <USBD_LL_SetupStage+0x52>
 8005998:	2b02      	cmp	r3, #2
 800599a:	d014      	beq.n	80059c6 <USBD_LL_SetupStage+0x7a>
 800599c:	e01d      	b.n	80059da <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	22aa      	movs	r2, #170	; 0xaa
 80059a2:	0092      	lsls	r2, r2, #2
 80059a4:	189a      	adds	r2, r3, r2
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	0011      	movs	r1, r2
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 fa10 	bl	8005dd0 <USBD_StdDevReq>
      break;
 80059b0:	e020      	b.n	80059f4 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	22aa      	movs	r2, #170	; 0xaa
 80059b6:	0092      	lsls	r2, r2, #2
 80059b8:	189a      	adds	r2, r3, r2
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	0011      	movs	r1, r2
 80059be:	0018      	movs	r0, r3
 80059c0:	f000 fa78 	bl	8005eb4 <USBD_StdItfReq>
      break;
 80059c4:	e016      	b.n	80059f4 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	22aa      	movs	r2, #170	; 0xaa
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	189a      	adds	r2, r3, r2
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0011      	movs	r1, r2
 80059d2:	0018      	movs	r0, r3
 80059d4:	f000 fac5 	bl	8005f62 <USBD_StdEPReq>
      break;
 80059d8:	e00c      	b.n	80059f4 <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	23aa      	movs	r3, #170	; 0xaa
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	5cd3      	ldrb	r3, [r2, r3]
 80059e2:	227f      	movs	r2, #127	; 0x7f
 80059e4:	4393      	bics	r3, r2
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	0011      	movs	r1, r2
 80059ec:	0018      	movs	r0, r3
 80059ee:	f001 fc64 	bl	80072ba <USBD_LL_StallEP>
      break;
 80059f2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b002      	add	sp, #8
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	000002ae 	.word	0x000002ae

08005a04 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	200b      	movs	r0, #11
 8005a10:	183b      	adds	r3, r7, r0
 8005a12:	1c0a      	adds	r2, r1, #0
 8005a14:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a16:	183b      	adds	r3, r7, r0
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d154      	bne.n	8005ac8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3355      	adds	r3, #85	; 0x55
 8005a22:	33ff      	adds	r3, #255	; 0xff
 8005a24:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	23a5      	movs	r3, #165	; 0xa5
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	58d3      	ldr	r3, [r2, r3]
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d139      	bne.n	8005aa6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d919      	bls.n	8005a72 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	1ad2      	subs	r2, r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d203      	bcs.n	8005a60 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	e002      	b.n	8005a66 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	001a      	movs	r2, r3
 8005a6c:	f001 f8a5 	bl	8006bba <USBD_CtlContinueRx>
 8005a70:	e045      	b.n	8005afe <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	23ad      	movs	r3, #173	; 0xad
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	58d3      	ldr	r3, [r2, r3]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00d      	beq.n	8005a9c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	23a7      	movs	r3, #167	; 0xa7
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d107      	bne.n	8005a9c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	23ad      	movs	r3, #173	; 0xad
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	58d3      	ldr	r3, [r2, r3]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	0010      	movs	r0, r2
 8005a9a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f001 f89e 	bl	8006be0 <USBD_CtlSendStatus>
 8005aa4:	e02b      	b.n	8005afe <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	23a5      	movs	r3, #165	; 0xa5
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	58d3      	ldr	r3, [r2, r3]
 8005aae:	2b05      	cmp	r3, #5
 8005ab0:	d125      	bne.n	8005afe <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	23a5      	movs	r3, #165	; 0xa5
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	2100      	movs	r1, #0
 8005aba:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f001 fbfa 	bl	80072ba <USBD_LL_StallEP>
 8005ac6:	e01a      	b.n	8005afe <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	23ad      	movs	r3, #173	; 0xad
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	58d3      	ldr	r3, [r2, r3]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d011      	beq.n	8005afa <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	23a7      	movs	r3, #167	; 0xa7
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d10b      	bne.n	8005afa <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	23ad      	movs	r3, #173	; 0xad
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	58d3      	ldr	r3, [r2, r3]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	220b      	movs	r2, #11
 8005aee:	18ba      	adds	r2, r7, r2
 8005af0:	7811      	ldrb	r1, [r2, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	0010      	movs	r0, r2
 8005af6:	4798      	blx	r3
 8005af8:	e001      	b.n	8005afe <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005afa:	2302      	movs	r3, #2
 8005afc:	e000      	b.n	8005b00 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	0018      	movs	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b006      	add	sp, #24
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	200b      	movs	r0, #11
 8005b14:	183b      	adds	r3, r7, r0
 8005b16:	1c0a      	adds	r2, r1, #0
 8005b18:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b1a:	183b      	adds	r3, r7, r0
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d000      	beq.n	8005b24 <USBD_LL_DataInStage+0x1c>
 8005b22:	e08e      	b.n	8005c42 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3314      	adds	r3, #20
 8005b28:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	23a5      	movs	r3, #165	; 0xa5
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	58d3      	ldr	r3, [r2, r3]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d164      	bne.n	8005c00 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d915      	bls.n	8005b6e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	1ad2      	subs	r2, r2, r3
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 fff6 	bl	8006b4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	2300      	movs	r3, #0
 8005b64:	2200      	movs	r2, #0
 8005b66:	2100      	movs	r1, #0
 8005b68:	f001 fc8e 	bl	8007488 <USBD_LL_PrepareReceive>
 8005b6c:	e059      	b.n	8005c22 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	0019      	movs	r1, r3
 8005b78:	0010      	movs	r0, r2
 8005b7a:	f7fa fb4b 	bl	8000214 <__aeabi_uidivmod>
 8005b7e:	1e0b      	subs	r3, r1, #0
 8005b80:	d11f      	bne.n	8005bc2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d319      	bcc.n	8005bc2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	23a6      	movs	r3, #166	; 0xa6
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d211      	bcs.n	8005bc2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f000 ffd1 	bl	8006b4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	23a6      	movs	r3, #166	; 0xa6
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2100      	movs	r1, #0
 8005bbc:	f001 fc64 	bl	8007488 <USBD_LL_PrepareReceive>
 8005bc0:	e02f      	b.n	8005c22 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	23ad      	movs	r3, #173	; 0xad
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	58d3      	ldr	r3, [r2, r3]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00d      	beq.n	8005bec <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	23a7      	movs	r3, #167	; 0xa7
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d107      	bne.n	8005bec <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	23ad      	movs	r3, #173	; 0xad
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	58d3      	ldr	r3, [r2, r3]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	0010      	movs	r0, r2
 8005bea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2180      	movs	r1, #128	; 0x80
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f001 fb62 	bl	80072ba <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f001 f805 	bl	8006c08 <USBD_CtlReceiveStatus>
 8005bfe:	e010      	b.n	8005c22 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	23a5      	movs	r3, #165	; 0xa5
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	58d3      	ldr	r3, [r2, r3]
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d005      	beq.n	8005c18 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	23a5      	movs	r3, #165	; 0xa5
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2180      	movs	r1, #128	; 0x80
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f001 fb4c 	bl	80072ba <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	23a8      	movs	r3, #168	; 0xa8
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	5cd3      	ldrb	r3, [r2, r3]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d124      	bne.n	8005c78 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7ff fe44 	bl	80058be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	23a8      	movs	r3, #168	; 0xa8
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	54d1      	strb	r1, [r2, r3]
 8005c40:	e01a      	b.n	8005c78 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	23ad      	movs	r3, #173	; 0xad
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	58d3      	ldr	r3, [r2, r3]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d011      	beq.n	8005c74 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	23a7      	movs	r3, #167	; 0xa7
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d10b      	bne.n	8005c74 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	23ad      	movs	r3, #173	; 0xad
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	58d3      	ldr	r3, [r2, r3]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	220b      	movs	r2, #11
 8005c68:	18ba      	adds	r2, r7, r2
 8005c6a:	7811      	ldrb	r1, [r2, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	0010      	movs	r0, r2
 8005c70:	4798      	blx	r3
 8005c72:	e001      	b.n	8005c78 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c74:	2302      	movs	r3, #2
 8005c76:	e000      	b.n	8005c7a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b006      	add	sp, #24
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	2340      	movs	r3, #64	; 0x40
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2100      	movs	r1, #0
 8005c92:	f001 faaf 	bl	80071f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	23ac      	movs	r3, #172	; 0xac
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	23b2      	movs	r3, #178	; 0xb2
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	2140      	movs	r1, #64	; 0x40
 8005ca8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	2340      	movs	r3, #64	; 0x40
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2180      	movs	r1, #128	; 0x80
 8005cb2:	f001 fa9f 	bl	80071f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2240      	movs	r2, #64	; 0x40
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	23a7      	movs	r3, #167	; 0xa7
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	2101      	movs	r1, #1
 8005cca:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	23a5      	movs	r3, #165	; 0xa5
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	23a9      	movs	r3, #169	; 0xa9
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	23ae      	movs	r3, #174	; 0xae
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	58d3      	ldr	r3, [r2, r3]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	23ad      	movs	r3, #173	; 0xad
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	58d3      	ldr	r3, [r2, r3]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	b2d9      	uxtb	r1, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	0018      	movs	r0, r3
 8005d06:	4790      	blx	r2
  }

  return USBD_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b002      	add	sp, #8
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	000a      	movs	r2, r1
 8005d1c:	1cfb      	adds	r3, r7, #3
 8005d1e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1cfa      	adds	r2, r7, #3
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b002      	add	sp, #8
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	23a7      	movs	r3, #167	; 0xa7
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	5cd1      	ldrb	r1, [r2, r3]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a06      	ldr	r2, [pc, #24]	; (8005d60 <USBD_LL_Suspend+0x2c>)
 8005d48:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	23a7      	movs	r3, #167	; 0xa7
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	2104      	movs	r1, #4
 8005d52:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	0018      	movs	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b002      	add	sp, #8
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	0000029d 	.word	0x0000029d

08005d64 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	23a7      	movs	r3, #167	; 0xa7
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	5cd3      	ldrb	r3, [r2, r3]
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d106      	bne.n	8005d86 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <USBD_LL_Resume+0x2c>)
 8005d7c:	5c99      	ldrb	r1, [r3, r2]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	23a7      	movs	r3, #167	; 0xa7
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	0018      	movs	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b002      	add	sp, #8
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	0000029d 	.word	0x0000029d

08005d94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	23a7      	movs	r3, #167	; 0xa7
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	5cd3      	ldrb	r3, [r2, r3]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d10e      	bne.n	8005dc6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	23ad      	movs	r3, #173	; 0xad
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	58d3      	ldr	r3, [r2, r3]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	23ad      	movs	r3, #173	; 0xad
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	58d3      	ldr	r3, [r2, r3]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	0010      	movs	r0, r2
 8005dc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	0018      	movs	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b002      	add	sp, #8
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dda:	230f      	movs	r3, #15
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	001a      	movs	r2, r3
 8005de8:	2360      	movs	r3, #96	; 0x60
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d004      	beq.n	8005dfa <USBD_StdDevReq+0x2a>
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d002      	beq.n	8005dfa <USBD_StdDevReq+0x2a>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <USBD_StdDevReq+0x3e>
 8005df8:	e04b      	b.n	8005e92 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	23ad      	movs	r3, #173	; 0xad
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	58d3      	ldr	r3, [r2, r3]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	0010      	movs	r0, r2
 8005e0a:	4798      	blx	r3
      break;
 8005e0c:	e048      	b.n	8005ea0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	d835      	bhi.n	8005e82 <USBD_StdDevReq+0xb2>
 8005e16:	009a      	lsls	r2, r3, #2
 8005e18:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <USBD_StdDevReq+0xe0>)
 8005e1a:	18d3      	adds	r3, r2, r3
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	0011      	movs	r1, r2
 8005e26:	0018      	movs	r0, r3
 8005e28:	f000 fa5a 	bl	80062e0 <USBD_GetDescriptor>
          break;
 8005e2c:	e030      	b.n	8005e90 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	0011      	movs	r1, r2
 8005e34:	0018      	movs	r0, r3
 8005e36:	f000 fc07 	bl	8006648 <USBD_SetAddress>
          break;
 8005e3a:	e029      	b.n	8005e90 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0011      	movs	r1, r2
 8005e42:	0018      	movs	r0, r3
 8005e44:	f000 fc54 	bl	80066f0 <USBD_SetConfig>
          break;
 8005e48:	e022      	b.n	8005e90 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0011      	movs	r1, r2
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 fcf1 	bl	8006838 <USBD_GetConfig>
          break;
 8005e56:	e01b      	b.n	8005e90 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0011      	movs	r1, r2
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f000 fd24 	bl	80068ac <USBD_GetStatus>
          break;
 8005e64:	e014      	b.n	8005e90 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	0011      	movs	r1, r2
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f000 fd57 	bl	8006920 <USBD_SetFeature>
          break;
 8005e72:	e00d      	b.n	8005e90 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	0011      	movs	r1, r2
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f000 fd66 	bl	800694c <USBD_ClrFeature>
          break;
 8005e80:	e006      	b.n	8005e90 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	0011      	movs	r1, r2
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f000 fdc0 	bl	8006a0e <USBD_CtlError>
          break;
 8005e8e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005e90:	e006      	b.n	8005ea0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0011      	movs	r1, r2
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f000 fdb8 	bl	8006a0e <USBD_CtlError>
      break;
 8005e9e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005ea0:	230f      	movs	r3, #15
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	781b      	ldrb	r3, [r3, #0]
}
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b004      	add	sp, #16
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	080076c4 	.word	0x080076c4

08005eb4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ebe:	230f      	movs	r3, #15
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	001a      	movs	r2, r3
 8005ecc:	2360      	movs	r3, #96	; 0x60
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d003      	beq.n	8005edc <USBD_StdItfReq+0x28>
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d001      	beq.n	8005edc <USBD_StdItfReq+0x28>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d136      	bne.n	8005f4a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	23a7      	movs	r3, #167	; 0xa7
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	5cd3      	ldrb	r3, [r2, r3]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d826      	bhi.n	8005f38 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	889b      	ldrh	r3, [r3, #4]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d81a      	bhi.n	8005f2a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	23ad      	movs	r3, #173	; 0xad
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	58d3      	ldr	r3, [r2, r3]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	220f      	movs	r2, #15
 8005f00:	18bc      	adds	r4, r7, r2
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	0010      	movs	r0, r2
 8005f08:	4798      	blx	r3
 8005f0a:	0003      	movs	r3, r0
 8005f0c:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	88db      	ldrh	r3, [r3, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d117      	bne.n	8005f46 <USBD_StdItfReq+0x92>
 8005f16:	230f      	movs	r3, #15
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d112      	bne.n	8005f46 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	0018      	movs	r0, r3
 8005f24:	f000 fe5c 	bl	8006be0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f28:	e00d      	b.n	8005f46 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f000 fd6c 	bl	8006a0e <USBD_CtlError>
          break;
 8005f36:	e006      	b.n	8005f46 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	0011      	movs	r1, r2
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f000 fd65 	bl	8006a0e <USBD_CtlError>
          break;
 8005f44:	e000      	b.n	8005f48 <USBD_StdItfReq+0x94>
          break;
 8005f46:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005f48:	e006      	b.n	8005f58 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	0011      	movs	r1, r2
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 fd5c 	bl	8006a0e <USBD_CtlError>
      break;
 8005f56:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b005      	add	sp, #20
 8005f60:	bd90      	pop	{r4, r7, pc}

08005f62 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005f62:	b5b0      	push	{r4, r5, r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f6c:	230f      	movs	r3, #15
 8005f6e:	18fb      	adds	r3, r7, r3
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	889a      	ldrh	r2, [r3, #4]
 8005f78:	230e      	movs	r3, #14
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	001a      	movs	r2, r3
 8005f84:	2360      	movs	r3, #96	; 0x60
 8005f86:	4013      	ands	r3, r2
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d004      	beq.n	8005f96 <USBD_StdEPReq+0x34>
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d002      	beq.n	8005f96 <USBD_StdEPReq+0x34>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <USBD_StdEPReq+0x48>
 8005f94:	e195      	b.n	80062c2 <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	23ad      	movs	r3, #173	; 0xad
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	58d3      	ldr	r3, [r2, r3]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	0010      	movs	r0, r2
 8005fa6:	4798      	blx	r3
      break;
 8005fa8:	e192      	b.n	80062d0 <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	001a      	movs	r2, r3
 8005fb0:	2360      	movs	r3, #96	; 0x60
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d10f      	bne.n	8005fd8 <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	23ad      	movs	r3, #173	; 0xad
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	58d3      	ldr	r3, [r2, r3]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	250f      	movs	r5, #15
 8005fc4:	197c      	adds	r4, r7, r5
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	0010      	movs	r0, r2
 8005fcc:	4798      	blx	r3
 8005fce:	0003      	movs	r3, r0
 8005fd0:	7023      	strb	r3, [r4, #0]

        return ret;
 8005fd2:	197b      	adds	r3, r7, r5
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	e17e      	b.n	80062d6 <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d054      	beq.n	800608a <USBD_StdEPReq+0x128>
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d003      	beq.n	8005fec <USBD_StdEPReq+0x8a>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d100      	bne.n	8005fea <USBD_StdEPReq+0x88>
 8005fe8:	e097      	b.n	800611a <USBD_StdEPReq+0x1b8>
 8005fea:	e162      	b.n	80062b2 <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	23a7      	movs	r3, #167	; 0xa7
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	5cd3      	ldrb	r3, [r2, r3]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d002      	beq.n	8005ffe <USBD_StdEPReq+0x9c>
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d01f      	beq.n	800603c <USBD_StdEPReq+0xda>
 8005ffc:	e03d      	b.n	800607a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ffe:	230e      	movs	r3, #14
 8006000:	18fb      	adds	r3, r7, r3
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d012      	beq.n	800602e <USBD_StdEPReq+0xcc>
 8006008:	230e      	movs	r3, #14
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b80      	cmp	r3, #128	; 0x80
 8006010:	d00d      	beq.n	800602e <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006012:	230e      	movs	r3, #14
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	781a      	ldrb	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	0011      	movs	r1, r2
 800601c:	0018      	movs	r0, r3
 800601e:	f001 f94c 	bl	80072ba <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2180      	movs	r1, #128	; 0x80
 8006026:	0018      	movs	r0, r3
 8006028:	f001 f947 	bl	80072ba <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800602c:	e02c      	b.n	8006088 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	0011      	movs	r1, r2
 8006034:	0018      	movs	r0, r3
 8006036:	f000 fcea 	bl	8006a0e <USBD_CtlError>
              break;
 800603a:	e025      	b.n	8006088 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	885b      	ldrh	r3, [r3, #2]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d115      	bne.n	8006070 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006044:	230e      	movs	r3, #14
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d010      	beq.n	8006070 <USBD_StdEPReq+0x10e>
 800604e:	230e      	movs	r3, #14
 8006050:	18fb      	adds	r3, r7, r3
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	d00b      	beq.n	8006070 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	88db      	ldrh	r3, [r3, #6]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d107      	bne.n	8006070 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006060:	230e      	movs	r3, #14
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	0011      	movs	r1, r2
 800606a:	0018      	movs	r0, r3
 800606c:	f001 f925 	bl	80072ba <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	0018      	movs	r0, r3
 8006074:	f000 fdb4 	bl	8006be0 <USBD_CtlSendStatus>

              break;
 8006078:	e006      	b.n	8006088 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0011      	movs	r1, r2
 8006080:	0018      	movs	r0, r3
 8006082:	f000 fcc4 	bl	8006a0e <USBD_CtlError>
              break;
 8006086:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006088:	e11a      	b.n	80062c0 <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	23a7      	movs	r3, #167	; 0xa7
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	5cd3      	ldrb	r3, [r2, r3]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d002      	beq.n	800609c <USBD_StdEPReq+0x13a>
 8006096:	2b03      	cmp	r3, #3
 8006098:	d01f      	beq.n	80060da <USBD_StdEPReq+0x178>
 800609a:	e035      	b.n	8006108 <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800609c:	230e      	movs	r3, #14
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d012      	beq.n	80060cc <USBD_StdEPReq+0x16a>
 80060a6:	230e      	movs	r3, #14
 80060a8:	18fb      	adds	r3, r7, r3
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d00d      	beq.n	80060cc <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80060b0:	230e      	movs	r3, #14
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	781a      	ldrb	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0011      	movs	r1, r2
 80060ba:	0018      	movs	r0, r3
 80060bc:	f001 f8fd 	bl	80072ba <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	0018      	movs	r0, r3
 80060c6:	f001 f8f8 	bl	80072ba <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060ca:	e025      	b.n	8006118 <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0011      	movs	r1, r2
 80060d2:	0018      	movs	r0, r3
 80060d4:	f000 fc9b 	bl	8006a0e <USBD_CtlError>
              break;
 80060d8:	e01e      	b.n	8006118 <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	885b      	ldrh	r3, [r3, #2]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d119      	bne.n	8006116 <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060e2:	230e      	movs	r3, #14
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	227f      	movs	r2, #127	; 0x7f
 80060ea:	4013      	ands	r3, r2
 80060ec:	d007      	beq.n	80060fe <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80060ee:	230e      	movs	r3, #14
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	0011      	movs	r1, r2
 80060f8:	0018      	movs	r0, r3
 80060fa:	f001 f90a 	bl	8007312 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0018      	movs	r0, r3
 8006102:	f000 fd6d 	bl	8006be0 <USBD_CtlSendStatus>
              }
              break;
 8006106:	e006      	b.n	8006116 <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	0011      	movs	r1, r2
 800610e:	0018      	movs	r0, r3
 8006110:	f000 fc7d 	bl	8006a0e <USBD_CtlError>
              break;
 8006114:	e000      	b.n	8006118 <USBD_StdEPReq+0x1b6>
              break;
 8006116:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006118:	e0d2      	b.n	80062c0 <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	23a7      	movs	r3, #167	; 0xa7
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	5cd3      	ldrb	r3, [r2, r3]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d002      	beq.n	800612c <USBD_StdEPReq+0x1ca>
 8006126:	2b03      	cmp	r3, #3
 8006128:	d03e      	beq.n	80061a8 <USBD_StdEPReq+0x246>
 800612a:	e0ba      	b.n	80062a2 <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800612c:	230e      	movs	r3, #14
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <USBD_StdEPReq+0x1ec>
 8006136:	230e      	movs	r3, #14
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b80      	cmp	r3, #128	; 0x80
 800613e:	d006      	beq.n	800614e <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	0011      	movs	r1, r2
 8006146:	0018      	movs	r0, r3
 8006148:	f000 fc61 	bl	8006a0e <USBD_CtlError>
                break;
 800614c:	e0b0      	b.n	80062b0 <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800614e:	230e      	movs	r3, #14
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	b25b      	sxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	da0d      	bge.n	8006176 <USBD_StdEPReq+0x214>
 800615a:	230e      	movs	r3, #14
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	227f      	movs	r2, #127	; 0x7f
 8006162:	401a      	ands	r2, r3
 8006164:	0013      	movs	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	189b      	adds	r3, r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	3310      	adds	r3, #16
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	18d3      	adds	r3, r2, r3
 8006172:	3304      	adds	r3, #4
 8006174:	e00d      	b.n	8006192 <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006176:	230e      	movs	r3, #14
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	227f      	movs	r2, #127	; 0x7f
 800617e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006180:	0013      	movs	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	189b      	adds	r3, r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	3351      	adds	r3, #81	; 0x51
 800618a:	33ff      	adds	r3, #255	; 0xff
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	18d3      	adds	r3, r2, r3
 8006190:	3304      	adds	r3, #4
 8006192:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	0018      	movs	r0, r3
 80061a2:	f000 fcb3 	bl	8006b0c <USBD_CtlSendData>
              break;
 80061a6:	e083      	b.n	80062b0 <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061a8:	230e      	movs	r3, #14
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	b25b      	sxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	da15      	bge.n	80061e0 <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061b4:	230e      	movs	r3, #14
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	220f      	movs	r2, #15
 80061bc:	401a      	ands	r2, r3
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	0013      	movs	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	189b      	adds	r3, r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	18cb      	adds	r3, r1, r3
 80061ca:	3318      	adds	r3, #24
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d11e      	bne.n	8006210 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	0011      	movs	r1, r2
 80061d8:	0018      	movs	r0, r3
 80061da:	f000 fc18 	bl	8006a0e <USBD_CtlError>
                  break;
 80061de:	e067      	b.n	80062b0 <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061e0:	230e      	movs	r3, #14
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	220f      	movs	r2, #15
 80061e8:	401a      	ands	r2, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	23ac      	movs	r3, #172	; 0xac
 80061ee:	0059      	lsls	r1, r3, #1
 80061f0:	0013      	movs	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	189b      	adds	r3, r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	18c3      	adds	r3, r0, r3
 80061fa:	185b      	adds	r3, r3, r1
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	0011      	movs	r1, r2
 8006208:	0018      	movs	r0, r3
 800620a:	f000 fc00 	bl	8006a0e <USBD_CtlError>
                  break;
 800620e:	e04f      	b.n	80062b0 <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006210:	230e      	movs	r3, #14
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b25b      	sxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	da0d      	bge.n	8006238 <USBD_StdEPReq+0x2d6>
 800621c:	230e      	movs	r3, #14
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	227f      	movs	r2, #127	; 0x7f
 8006224:	401a      	ands	r2, r3
 8006226:	0013      	movs	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	189b      	adds	r3, r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	3310      	adds	r3, #16
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	18d3      	adds	r3, r2, r3
 8006234:	3304      	adds	r3, #4
 8006236:	e00d      	b.n	8006254 <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006238:	230e      	movs	r3, #14
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	227f      	movs	r2, #127	; 0x7f
 8006240:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006242:	0013      	movs	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	189b      	adds	r3, r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	3351      	adds	r3, #81	; 0x51
 800624c:	33ff      	adds	r3, #255	; 0xff
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	18d3      	adds	r3, r2, r3
 8006252:	3304      	adds	r3, #4
 8006254:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006256:	230e      	movs	r3, #14
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <USBD_StdEPReq+0x308>
 8006260:	230e      	movs	r3, #14
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b80      	cmp	r3, #128	; 0x80
 8006268:	d103      	bne.n	8006272 <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e010      	b.n	8006294 <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006272:	230e      	movs	r3, #14
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	781a      	ldrb	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0011      	movs	r1, r2
 800627c:	0018      	movs	r0, r3
 800627e:	f001 f874 	bl	800736a <USBD_LL_IsStallEP>
 8006282:	1e03      	subs	r3, r0, #0
 8006284:	d003      	beq.n	800628e <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	e002      	b.n	8006294 <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	0018      	movs	r0, r3
 800629c:	f000 fc36 	bl	8006b0c <USBD_CtlSendData>
              break;
 80062a0:	e006      	b.n	80062b0 <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	0011      	movs	r1, r2
 80062a8:	0018      	movs	r0, r3
 80062aa:	f000 fbb0 	bl	8006a0e <USBD_CtlError>
              break;
 80062ae:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80062b0:	e006      	b.n	80062c0 <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0011      	movs	r1, r2
 80062b8:	0018      	movs	r0, r3
 80062ba:	f000 fba8 	bl	8006a0e <USBD_CtlError>
          break;
 80062be:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80062c0:	e006      	b.n	80062d0 <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	0011      	movs	r1, r2
 80062c8:	0018      	movs	r0, r3
 80062ca:	f000 fba0 	bl	8006a0e <USBD_CtlError>
      break;
 80062ce:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80062d0:	230f      	movs	r3, #15
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	781b      	ldrb	r3, [r3, #0]
}
 80062d6:	0018      	movs	r0, r3
 80062d8:	46bd      	mov	sp, r7
 80062da:	b004      	add	sp, #16
 80062dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080062e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062ea:	2308      	movs	r3, #8
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	2200      	movs	r2, #0
 80062f0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062f6:	230b      	movs	r3, #11
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	885b      	ldrh	r3, [r3, #2]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b07      	cmp	r3, #7
 8006308:	d900      	bls.n	800630c <USBD_GetDescriptor+0x2c>
 800630a:	e159      	b.n	80065c0 <USBD_GetDescriptor+0x2e0>
 800630c:	009a      	lsls	r2, r3, #2
 800630e:	4bcc      	ldr	r3, [pc, #816]	; (8006640 <USBD_GetDescriptor+0x360>)
 8006310:	18d3      	adds	r3, r2, r3
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	23ac      	movs	r3, #172	; 0xac
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	58d3      	ldr	r3, [r2, r3]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	7c12      	ldrb	r2, [r2, #16]
 8006324:	2108      	movs	r1, #8
 8006326:	1879      	adds	r1, r7, r1
 8006328:	0010      	movs	r0, r2
 800632a:	4798      	blx	r3
 800632c:	0003      	movs	r3, r0
 800632e:	60fb      	str	r3, [r7, #12]
      break;
 8006330:	e153      	b.n	80065da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	7c1b      	ldrb	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10f      	bne.n	800635a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	23ad      	movs	r3, #173	; 0xad
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	58d3      	ldr	r3, [r2, r3]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	2208      	movs	r2, #8
 8006346:	18ba      	adds	r2, r7, r2
 8006348:	0010      	movs	r0, r2
 800634a:	4798      	blx	r3
 800634c:	0003      	movs	r3, r0
 800634e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3301      	adds	r3, #1
 8006354:	2202      	movs	r2, #2
 8006356:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006358:	e13f      	b.n	80065da <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	23ad      	movs	r3, #173	; 0xad
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	58d3      	ldr	r3, [r2, r3]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	2208      	movs	r2, #8
 8006366:	18ba      	adds	r2, r7, r2
 8006368:	0010      	movs	r0, r2
 800636a:	4798      	blx	r3
 800636c:	0003      	movs	r3, r0
 800636e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3301      	adds	r3, #1
 8006374:	2202      	movs	r2, #2
 8006376:	701a      	strb	r2, [r3, #0]
      break;
 8006378:	e12f      	b.n	80065da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	885b      	ldrh	r3, [r3, #2]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b05      	cmp	r3, #5
 8006382:	d900      	bls.n	8006386 <USBD_GetDescriptor+0xa6>
 8006384:	e0d0      	b.n	8006528 <USBD_GetDescriptor+0x248>
 8006386:	009a      	lsls	r2, r3, #2
 8006388:	4bae      	ldr	r3, [pc, #696]	; (8006644 <USBD_GetDescriptor+0x364>)
 800638a:	18d3      	adds	r3, r2, r3
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	23ac      	movs	r3, #172	; 0xac
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	58d3      	ldr	r3, [r2, r3]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00d      	beq.n	80063ba <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	23ac      	movs	r3, #172	; 0xac
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	58d3      	ldr	r3, [r2, r3]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	7c12      	ldrb	r2, [r2, #16]
 80063ac:	2108      	movs	r1, #8
 80063ae:	1879      	adds	r1, r7, r1
 80063b0:	0010      	movs	r0, r2
 80063b2:	4798      	blx	r3
 80063b4:	0003      	movs	r3, r0
 80063b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063b8:	e0c3      	b.n	8006542 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	0011      	movs	r1, r2
 80063c0:	0018      	movs	r0, r3
 80063c2:	f000 fb24 	bl	8006a0e <USBD_CtlError>
            err++;
 80063c6:	210b      	movs	r1, #11
 80063c8:	187b      	adds	r3, r7, r1
 80063ca:	781a      	ldrb	r2, [r3, #0]
 80063cc:	187b      	adds	r3, r7, r1
 80063ce:	3201      	adds	r2, #1
 80063d0:	701a      	strb	r2, [r3, #0]
          break;
 80063d2:	e0b6      	b.n	8006542 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	23ac      	movs	r3, #172	; 0xac
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	58d3      	ldr	r3, [r2, r3]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	23ac      	movs	r3, #172	; 0xac
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	58d3      	ldr	r3, [r2, r3]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	7c12      	ldrb	r2, [r2, #16]
 80063f0:	2108      	movs	r1, #8
 80063f2:	1879      	adds	r1, r7, r1
 80063f4:	0010      	movs	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	0003      	movs	r3, r0
 80063fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063fc:	e0a1      	b.n	8006542 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	0011      	movs	r1, r2
 8006404:	0018      	movs	r0, r3
 8006406:	f000 fb02 	bl	8006a0e <USBD_CtlError>
            err++;
 800640a:	210b      	movs	r1, #11
 800640c:	187b      	adds	r3, r7, r1
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	187b      	adds	r3, r7, r1
 8006412:	3201      	adds	r2, #1
 8006414:	701a      	strb	r2, [r3, #0]
          break;
 8006416:	e094      	b.n	8006542 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	23ac      	movs	r3, #172	; 0xac
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	58d3      	ldr	r3, [r2, r3]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	23ac      	movs	r3, #172	; 0xac
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	58d3      	ldr	r3, [r2, r3]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	7c12      	ldrb	r2, [r2, #16]
 8006434:	2108      	movs	r1, #8
 8006436:	1879      	adds	r1, r7, r1
 8006438:	0010      	movs	r0, r2
 800643a:	4798      	blx	r3
 800643c:	0003      	movs	r3, r0
 800643e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006440:	e07f      	b.n	8006542 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	0011      	movs	r1, r2
 8006448:	0018      	movs	r0, r3
 800644a:	f000 fae0 	bl	8006a0e <USBD_CtlError>
            err++;
 800644e:	210b      	movs	r1, #11
 8006450:	187b      	adds	r3, r7, r1
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	187b      	adds	r3, r7, r1
 8006456:	3201      	adds	r2, #1
 8006458:	701a      	strb	r2, [r3, #0]
          break;
 800645a:	e072      	b.n	8006542 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	23ac      	movs	r3, #172	; 0xac
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	58d3      	ldr	r3, [r2, r3]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	23ac      	movs	r3, #172	; 0xac
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	58d3      	ldr	r3, [r2, r3]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	7c12      	ldrb	r2, [r2, #16]
 8006478:	2108      	movs	r1, #8
 800647a:	1879      	adds	r1, r7, r1
 800647c:	0010      	movs	r0, r2
 800647e:	4798      	blx	r3
 8006480:	0003      	movs	r3, r0
 8006482:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006484:	e05d      	b.n	8006542 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	0011      	movs	r1, r2
 800648c:	0018      	movs	r0, r3
 800648e:	f000 fabe 	bl	8006a0e <USBD_CtlError>
            err++;
 8006492:	210b      	movs	r1, #11
 8006494:	187b      	adds	r3, r7, r1
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	187b      	adds	r3, r7, r1
 800649a:	3201      	adds	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]
          break;
 800649e:	e050      	b.n	8006542 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	23ac      	movs	r3, #172	; 0xac
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	58d3      	ldr	r3, [r2, r3]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	23ac      	movs	r3, #172	; 0xac
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	58d3      	ldr	r3, [r2, r3]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	7c12      	ldrb	r2, [r2, #16]
 80064bc:	2108      	movs	r1, #8
 80064be:	1879      	adds	r1, r7, r1
 80064c0:	0010      	movs	r0, r2
 80064c2:	4798      	blx	r3
 80064c4:	0003      	movs	r3, r0
 80064c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064c8:	e03b      	b.n	8006542 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	0011      	movs	r1, r2
 80064d0:	0018      	movs	r0, r3
 80064d2:	f000 fa9c 	bl	8006a0e <USBD_CtlError>
            err++;
 80064d6:	210b      	movs	r1, #11
 80064d8:	187b      	adds	r3, r7, r1
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	187b      	adds	r3, r7, r1
 80064de:	3201      	adds	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
          break;
 80064e2:	e02e      	b.n	8006542 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	23ac      	movs	r3, #172	; 0xac
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	58d3      	ldr	r3, [r2, r3]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00d      	beq.n	800650e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	23ac      	movs	r3, #172	; 0xac
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	58d3      	ldr	r3, [r2, r3]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	7c12      	ldrb	r2, [r2, #16]
 8006500:	2108      	movs	r1, #8
 8006502:	1879      	adds	r1, r7, r1
 8006504:	0010      	movs	r0, r2
 8006506:	4798      	blx	r3
 8006508:	0003      	movs	r3, r0
 800650a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800650c:	e019      	b.n	8006542 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	0011      	movs	r1, r2
 8006514:	0018      	movs	r0, r3
 8006516:	f000 fa7a 	bl	8006a0e <USBD_CtlError>
            err++;
 800651a:	210b      	movs	r1, #11
 800651c:	187b      	adds	r3, r7, r1
 800651e:	781a      	ldrb	r2, [r3, #0]
 8006520:	187b      	adds	r3, r7, r1
 8006522:	3201      	adds	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
          break;
 8006526:	e00c      	b.n	8006542 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	0011      	movs	r1, r2
 800652e:	0018      	movs	r0, r3
 8006530:	f000 fa6d 	bl	8006a0e <USBD_CtlError>
          err++;
 8006534:	210b      	movs	r1, #11
 8006536:	187b      	adds	r3, r7, r1
 8006538:	781a      	ldrb	r2, [r3, #0]
 800653a:	187b      	adds	r3, r7, r1
 800653c:	3201      	adds	r2, #1
 800653e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006540:	e04b      	b.n	80065da <USBD_GetDescriptor+0x2fa>
 8006542:	e04a      	b.n	80065da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	7c1b      	ldrb	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	23ad      	movs	r3, #173	; 0xad
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	58d3      	ldr	r3, [r2, r3]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	2208      	movs	r2, #8
 8006558:	18ba      	adds	r2, r7, r2
 800655a:	0010      	movs	r0, r2
 800655c:	4798      	blx	r3
 800655e:	0003      	movs	r3, r0
 8006560:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006562:	e03a      	b.n	80065da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	0011      	movs	r1, r2
 800656a:	0018      	movs	r0, r3
 800656c:	f000 fa4f 	bl	8006a0e <USBD_CtlError>
        err++;
 8006570:	210b      	movs	r1, #11
 8006572:	187b      	adds	r3, r7, r1
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	187b      	adds	r3, r7, r1
 8006578:	3201      	adds	r2, #1
 800657a:	701a      	strb	r2, [r3, #0]
      break;
 800657c:	e02d      	b.n	80065da <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	7c1b      	ldrb	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10f      	bne.n	80065a6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	23ad      	movs	r3, #173	; 0xad
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	58d3      	ldr	r3, [r2, r3]
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	2208      	movs	r2, #8
 8006592:	18ba      	adds	r2, r7, r2
 8006594:	0010      	movs	r0, r2
 8006596:	4798      	blx	r3
 8006598:	0003      	movs	r3, r0
 800659a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	2207      	movs	r2, #7
 80065a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065a4:	e019      	b.n	80065da <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	0011      	movs	r1, r2
 80065ac:	0018      	movs	r0, r3
 80065ae:	f000 fa2e 	bl	8006a0e <USBD_CtlError>
        err++;
 80065b2:	210b      	movs	r1, #11
 80065b4:	187b      	adds	r3, r7, r1
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	187b      	adds	r3, r7, r1
 80065ba:	3201      	adds	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
      break;
 80065be:	e00c      	b.n	80065da <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	0011      	movs	r1, r2
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 fa21 	bl	8006a0e <USBD_CtlError>
      err++;
 80065cc:	210b      	movs	r1, #11
 80065ce:	187b      	adds	r3, r7, r1
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	187b      	adds	r3, r7, r1
 80065d4:	3201      	adds	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]
      break;
 80065d8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80065da:	230b      	movs	r3, #11
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d128      	bne.n	8006636 <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80065e4:	2308      	movs	r3, #8
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01a      	beq.n	8006624 <USBD_GetDescriptor+0x344>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	88db      	ldrh	r3, [r3, #6]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	88da      	ldrh	r2, [r3, #6]
 80065fa:	2308      	movs	r3, #8
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	1c18      	adds	r0, r3, #0
 8006602:	1c11      	adds	r1, r2, #0
 8006604:	b28a      	uxth	r2, r1
 8006606:	b283      	uxth	r3, r0
 8006608:	429a      	cmp	r2, r3
 800660a:	d900      	bls.n	800660e <USBD_GetDescriptor+0x32e>
 800660c:	1c01      	adds	r1, r0, #0
 800660e:	b28a      	uxth	r2, r1
 8006610:	2108      	movs	r1, #8
 8006612:	187b      	adds	r3, r7, r1
 8006614:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006616:	187b      	adds	r3, r7, r1
 8006618:	881a      	ldrh	r2, [r3, #0]
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	0018      	movs	r0, r3
 8006620:	f000 fa74 	bl	8006b0c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	88db      	ldrh	r3, [r3, #6]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d105      	bne.n	8006638 <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	0018      	movs	r0, r3
 8006630:	f000 fad6 	bl	8006be0 <USBD_CtlSendStatus>
 8006634:	e000      	b.n	8006638 <USBD_GetDescriptor+0x358>
    return;
 8006636:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006638:	46bd      	mov	sp, r7
 800663a:	b004      	add	sp, #16
 800663c:	bd80      	pop	{r7, pc}
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	080076ec 	.word	0x080076ec
 8006644:	0800770c 	.word	0x0800770c

08006648 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006648:	b590      	push	{r4, r7, lr}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	889b      	ldrh	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d13d      	bne.n	80066d6 <USBD_SetAddress+0x8e>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	88db      	ldrh	r3, [r3, #6]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d139      	bne.n	80066d6 <USBD_SetAddress+0x8e>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	885b      	ldrh	r3, [r3, #2]
 8006666:	2b7f      	cmp	r3, #127	; 0x7f
 8006668:	d835      	bhi.n	80066d6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	885b      	ldrh	r3, [r3, #2]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	230f      	movs	r3, #15
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	217f      	movs	r1, #127	; 0x7f
 8006676:	400a      	ands	r2, r1
 8006678:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	23a7      	movs	r3, #167	; 0xa7
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	5cd3      	ldrb	r3, [r2, r3]
 8006682:	2b03      	cmp	r3, #3
 8006684:	d106      	bne.n	8006694 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	0011      	movs	r1, r2
 800668c:	0018      	movs	r0, r3
 800668e:	f000 f9be 	bl	8006a0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006692:	e026      	b.n	80066e2 <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	240f      	movs	r4, #15
 8006698:	193a      	adds	r2, r7, r4
 800669a:	4914      	ldr	r1, [pc, #80]	; (80066ec <USBD_SetAddress+0xa4>)
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80066a0:	193b      	adds	r3, r7, r4
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	0011      	movs	r1, r2
 80066a8:	0018      	movs	r0, r3
 80066aa:	f000 fe89 	bl	80073c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0018      	movs	r0, r3
 80066b2:	f000 fa95 	bl	8006be0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066b6:	193b      	adds	r3, r7, r4
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	23a7      	movs	r3, #167	; 0xa7
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	2102      	movs	r1, #2
 80066c6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c8:	e00b      	b.n	80066e2 <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	23a7      	movs	r3, #167	; 0xa7
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	2101      	movs	r1, #1
 80066d2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d4:	e005      	b.n	80066e2 <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	0011      	movs	r1, r2
 80066dc:	0018      	movs	r0, r3
 80066de:	f000 f996 	bl	8006a0e <USBD_CtlError>
  }
}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b005      	add	sp, #20
 80066e8:	bd90      	pop	{r4, r7, pc}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	0000029e 	.word	0x0000029e

080066f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	885b      	ldrh	r3, [r3, #2]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	4b4c      	ldr	r3, [pc, #304]	; (8006834 <USBD_SetConfig+0x144>)
 8006702:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006704:	4b4b      	ldr	r3, [pc, #300]	; (8006834 <USBD_SetConfig+0x144>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d906      	bls.n	800671a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	0011      	movs	r1, r2
 8006712:	0018      	movs	r0, r3
 8006714:	f000 f97b 	bl	8006a0e <USBD_CtlError>
 8006718:	e088      	b.n	800682c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	23a7      	movs	r3, #167	; 0xa7
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	5cd3      	ldrb	r3, [r2, r3]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d002      	beq.n	800672c <USBD_SetConfig+0x3c>
 8006726:	2b03      	cmp	r3, #3
 8006728:	d029      	beq.n	800677e <USBD_SetConfig+0x8e>
 800672a:	e071      	b.n	8006810 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800672c:	4b41      	ldr	r3, [pc, #260]	; (8006834 <USBD_SetConfig+0x144>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01f      	beq.n	8006774 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006734:	4b3f      	ldr	r3, [pc, #252]	; (8006834 <USBD_SetConfig+0x144>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	001a      	movs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	23a7      	movs	r3, #167	; 0xa7
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	2103      	movs	r1, #3
 8006746:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006748:	4b3a      	ldr	r3, [pc, #232]	; (8006834 <USBD_SetConfig+0x144>)
 800674a:	781a      	ldrb	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	0011      	movs	r1, r2
 8006750:	0018      	movs	r0, r3
 8006752:	f7ff f8bd 	bl	80058d0 <USBD_SetClassConfig>
 8006756:	0003      	movs	r3, r0
 8006758:	2b02      	cmp	r3, #2
 800675a:	d106      	bne.n	800676a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	0011      	movs	r1, r2
 8006762:	0018      	movs	r0, r3
 8006764:	f000 f953 	bl	8006a0e <USBD_CtlError>
            return;
 8006768:	e060      	b.n	800682c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	0018      	movs	r0, r3
 800676e:	f000 fa37 	bl	8006be0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006772:	e05b      	b.n	800682c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	0018      	movs	r0, r3
 8006778:	f000 fa32 	bl	8006be0 <USBD_CtlSendStatus>
        break;
 800677c:	e056      	b.n	800682c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800677e:	4b2d      	ldr	r3, [pc, #180]	; (8006834 <USBD_SetConfig+0x144>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d115      	bne.n	80067b2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	23a7      	movs	r3, #167	; 0xa7
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	2102      	movs	r1, #2
 800678e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006790:	4b28      	ldr	r3, [pc, #160]	; (8006834 <USBD_SetConfig+0x144>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	001a      	movs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800679a:	4b26      	ldr	r3, [pc, #152]	; (8006834 <USBD_SetConfig+0x144>)
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	0011      	movs	r1, r2
 80067a2:	0018      	movs	r0, r3
 80067a4:	f7ff f8bc 	bl	8005920 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	0018      	movs	r0, r3
 80067ac:	f000 fa18 	bl	8006be0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80067b0:	e03c      	b.n	800682c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80067b2:	4b20      	ldr	r3, [pc, #128]	; (8006834 <USBD_SetConfig+0x144>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	001a      	movs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d022      	beq.n	8006806 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	0011      	movs	r1, r2
 80067ca:	0018      	movs	r0, r3
 80067cc:	f7ff f8a8 	bl	8005920 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80067d0:	4b18      	ldr	r3, [pc, #96]	; (8006834 <USBD_SetConfig+0x144>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	001a      	movs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80067da:	4b16      	ldr	r3, [pc, #88]	; (8006834 <USBD_SetConfig+0x144>)
 80067dc:	781a      	ldrb	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	0011      	movs	r1, r2
 80067e2:	0018      	movs	r0, r3
 80067e4:	f7ff f874 	bl	80058d0 <USBD_SetClassConfig>
 80067e8:	0003      	movs	r3, r0
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d106      	bne.n	80067fc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	0011      	movs	r1, r2
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 f90a 	bl	8006a0e <USBD_CtlError>
            return;
 80067fa:	e017      	b.n	800682c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	0018      	movs	r0, r3
 8006800:	f000 f9ee 	bl	8006be0 <USBD_CtlSendStatus>
        break;
 8006804:	e012      	b.n	800682c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	0018      	movs	r0, r3
 800680a:	f000 f9e9 	bl	8006be0 <USBD_CtlSendStatus>
        break;
 800680e:	e00d      	b.n	800682c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0011      	movs	r1, r2
 8006816:	0018      	movs	r0, r3
 8006818:	f000 f8f9 	bl	8006a0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <USBD_SetConfig+0x144>)
 800681e:	781a      	ldrb	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	0011      	movs	r1, r2
 8006824:	0018      	movs	r0, r3
 8006826:	f7ff f87b 	bl	8005920 <USBD_ClrClassConfig>
        break;
 800682a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	20000211 	.word	0x20000211

08006838 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	88db      	ldrh	r3, [r3, #6]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d006      	beq.n	8006858 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	0011      	movs	r1, r2
 8006850:	0018      	movs	r0, r3
 8006852:	f000 f8dc 	bl	8006a0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006856:	e025      	b.n	80068a4 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	23a7      	movs	r3, #167	; 0xa7
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	5cd3      	ldrb	r3, [r2, r3]
 8006860:	2b01      	cmp	r3, #1
 8006862:	db18      	blt.n	8006896 <USBD_GetConfig+0x5e>
 8006864:	2b02      	cmp	r3, #2
 8006866:	dd02      	ble.n	800686e <USBD_GetConfig+0x36>
 8006868:	2b03      	cmp	r3, #3
 800686a:	d00c      	beq.n	8006886 <USBD_GetConfig+0x4e>
 800686c:	e013      	b.n	8006896 <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3308      	adds	r3, #8
 8006878:	0019      	movs	r1, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	0018      	movs	r0, r3
 8006880:	f000 f944 	bl	8006b0c <USBD_CtlSendData>
        break;
 8006884:	e00e      	b.n	80068a4 <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	1d19      	adds	r1, r3, #4
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	0018      	movs	r0, r3
 8006890:	f000 f93c 	bl	8006b0c <USBD_CtlSendData>
        break;
 8006894:	e006      	b.n	80068a4 <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	0011      	movs	r1, r2
 800689c:	0018      	movs	r0, r3
 800689e:	f000 f8b6 	bl	8006a0e <USBD_CtlError>
        break;
 80068a2:	46c0      	nop			; (mov r8, r8)
}
 80068a4:	46c0      	nop			; (mov r8, r8)
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b002      	add	sp, #8
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	23a7      	movs	r3, #167	; 0xa7
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	5cd3      	ldrb	r3, [r2, r3]
 80068be:	3b01      	subs	r3, #1
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d822      	bhi.n	800690a <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	88db      	ldrh	r3, [r3, #6]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d006      	beq.n	80068da <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	0011      	movs	r1, r2
 80068d2:	0018      	movs	r0, r3
 80068d4:	f000 f89b 	bl	8006a0e <USBD_CtlError>
        break;
 80068d8:	e01e      	b.n	8006918 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	23a9      	movs	r3, #169	; 0xa9
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	58d3      	ldr	r3, [r2, r3]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2202      	movs	r2, #2
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	330c      	adds	r3, #12
 80068fc:	0019      	movs	r1, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	0018      	movs	r0, r3
 8006904:	f000 f902 	bl	8006b0c <USBD_CtlSendData>
      break;
 8006908:	e006      	b.n	8006918 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	0011      	movs	r1, r2
 8006910:	0018      	movs	r0, r3
 8006912:	f000 f87c 	bl	8006a0e <USBD_CtlError>
      break;
 8006916:	46c0      	nop			; (mov r8, r8)
  }
}
 8006918:	46c0      	nop			; (mov r8, r8)
 800691a:	46bd      	mov	sp, r7
 800691c:	b002      	add	sp, #8
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	885b      	ldrh	r3, [r3, #2]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d108      	bne.n	8006944 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	23a9      	movs	r3, #169	; 0xa9
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	2101      	movs	r1, #1
 800693a:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	0018      	movs	r0, r3
 8006940:	f000 f94e 	bl	8006be0 <USBD_CtlSendStatus>
  }
}
 8006944:	46c0      	nop			; (mov r8, r8)
 8006946:	46bd      	mov	sp, r7
 8006948:	b002      	add	sp, #8
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	23a7      	movs	r3, #167	; 0xa7
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	5cd3      	ldrb	r3, [r2, r3]
 800695e:	3b01      	subs	r3, #1
 8006960:	2b02      	cmp	r3, #2
 8006962:	d80d      	bhi.n	8006980 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	885b      	ldrh	r3, [r3, #2]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d110      	bne.n	800698e <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	23a9      	movs	r3, #169	; 0xa9
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	2100      	movs	r1, #0
 8006974:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0018      	movs	r0, r3
 800697a:	f000 f931 	bl	8006be0 <USBD_CtlSendStatus>
      }
      break;
 800697e:	e006      	b.n	800698e <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	0011      	movs	r1, r2
 8006986:	0018      	movs	r0, r3
 8006988:	f000 f841 	bl	8006a0e <USBD_CtlError>
      break;
 800698c:	e000      	b.n	8006990 <USBD_ClrFeature+0x44>
      break;
 800698e:	46c0      	nop			; (mov r8, r8)
  }
}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	b002      	add	sp, #8
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781a      	ldrb	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	785a      	ldrb	r2, [r3, #1]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	3302      	adds	r3, #2
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	3303      	adds	r3, #3
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	18d3      	adds	r3, r2, r3
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	3304      	adds	r3, #4
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	3305      	adds	r3, #5
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	18d3      	adds	r3, r2, r3
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	3306      	adds	r3, #6
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	3307      	adds	r3, #7
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	18d3      	adds	r3, r2, r3
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	80da      	strh	r2, [r3, #6]

}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	b002      	add	sp, #8
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2180      	movs	r1, #128	; 0x80
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f000 fc4c 	bl	80072ba <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2100      	movs	r1, #0
 8006a26:	0018      	movs	r0, r3
 8006a28:	f000 fc47 	bl	80072ba <USBD_LL_StallEP>
}
 8006a2c:	46c0      	nop			; (mov r8, r8)
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b002      	add	sp, #8
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a40:	2317      	movs	r3, #23
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d03d      	beq.n	8006aca <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f000 f83e 	bl	8006ad2 <USBD_GetLen>
 8006a56:	0003      	movs	r3, r0
 8006a58:	3301      	adds	r3, #1
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	18db      	adds	r3, r3, r3
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006a64:	2017      	movs	r0, #23
 8006a66:	183b      	adds	r3, r7, r0
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	183a      	adds	r2, r7, r0
 8006a6c:	1c59      	adds	r1, r3, #1
 8006a6e:	7011      	strb	r1, [r2, #0]
 8006a70:	001a      	movs	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	189b      	adds	r3, r3, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006a7c:	183b      	adds	r3, r7, r0
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	183a      	adds	r2, r7, r0
 8006a82:	1c59      	adds	r1, r3, #1
 8006a84:	7011      	strb	r1, [r2, #0]
 8006a86:	001a      	movs	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	189b      	adds	r3, r3, r2
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006a90:	e017      	b.n	8006ac2 <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	60fa      	str	r2, [r7, #12]
 8006a98:	2417      	movs	r4, #23
 8006a9a:	193a      	adds	r2, r7, r4
 8006a9c:	7812      	ldrb	r2, [r2, #0]
 8006a9e:	1939      	adds	r1, r7, r4
 8006aa0:	1c50      	adds	r0, r2, #1
 8006aa2:	7008      	strb	r0, [r1, #0]
 8006aa4:	0011      	movs	r1, r2
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	1852      	adds	r2, r2, r1
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006aae:	193b      	adds	r3, r7, r4
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	193a      	adds	r2, r7, r4
 8006ab4:	1c59      	adds	r1, r3, #1
 8006ab6:	7011      	strb	r1, [r2, #0]
 8006ab8:	001a      	movs	r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	189b      	adds	r3, r3, r2
 8006abe:	2200      	movs	r2, #0
 8006ac0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e3      	bne.n	8006a92 <USBD_GetString+0x5e>
    }
  }
}
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	46bd      	mov	sp, r7
 8006ace:	b007      	add	sp, #28
 8006ad0:	bd90      	pop	{r4, r7, pc}

08006ad2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ada:	230f      	movs	r3, #15
 8006adc:	18fb      	adds	r3, r7, r3
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006ae2:	e008      	b.n	8006af6 <USBD_GetLen+0x24>
  {
    len++;
 8006ae4:	210f      	movs	r1, #15
 8006ae6:	187b      	adds	r3, r7, r1
 8006ae8:	781a      	ldrb	r2, [r3, #0]
 8006aea:	187b      	adds	r3, r7, r1
 8006aec:	3201      	adds	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
    buf++;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3301      	adds	r3, #1
 8006af4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f2      	bne.n	8006ae4 <USBD_GetLen+0x12>
  }

  return len;
 8006afe:	230f      	movs	r3, #15
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	781b      	ldrb	r3, [r3, #0]
}
 8006b04:	0018      	movs	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b004      	add	sp, #16
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	1dbb      	adds	r3, r7, #6
 8006b18:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	23a5      	movs	r3, #165	; 0xa5
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	2102      	movs	r1, #2
 8006b22:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006b24:	1dbb      	adds	r3, r7, #6
 8006b26:	881a      	ldrh	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006b2c:	1dbb      	adds	r3, r7, #6
 8006b2e:	881a      	ldrh	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b34:	1dbb      	adds	r3, r7, #6
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	f000 fc6b 	bl	8007418 <USBD_LL_Transmit>

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	0018      	movs	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b004      	add	sp, #16
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	1dbb      	adds	r3, r7, #6
 8006b58:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b5a:	1dbb      	adds	r3, r7, #6
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	2100      	movs	r1, #0
 8006b64:	f000 fc58 	bl	8007418 <USBD_LL_Transmit>

  return USBD_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	b004      	add	sp, #16
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	1dbb      	adds	r3, r7, #6
 8006b7e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	23a5      	movs	r3, #165	; 0xa5
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	2103      	movs	r1, #3
 8006b88:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8006b8a:	1dbb      	adds	r3, r7, #6
 8006b8c:	8819      	ldrh	r1, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	23ae      	movs	r3, #174	; 0xae
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8006b96:	1dbb      	adds	r3, r7, #6
 8006b98:	8819      	ldrh	r1, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	23b0      	movs	r3, #176	; 0xb0
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ba2:	1dbb      	adds	r3, r7, #6
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	2100      	movs	r1, #0
 8006bac:	f000 fc6c 	bl	8007488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b004      	add	sp, #16
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	1dbb      	adds	r3, r7, #6
 8006bc6:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bc8:	1dbb      	adds	r3, r7, #6
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	f000 fc59 	bl	8007488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	0018      	movs	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	b004      	add	sp, #16
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	23a5      	movs	r3, #165	; 0xa5
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	2104      	movs	r1, #4
 8006bf0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	f000 fc0d 	bl	8007418 <USBD_LL_Transmit>

  return USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b002      	add	sp, #8
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	23a5      	movs	r3, #165	; 0xa5
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	2105      	movs	r1, #5
 8006c18:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2100      	movs	r1, #0
 8006c22:	f000 fc31 	bl	8007488 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	0018      	movs	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c34:	4914      	ldr	r1, [pc, #80]	; (8006c88 <MX_USB_DEVICE_Init+0x58>)
 8006c36:	4b15      	ldr	r3, [pc, #84]	; (8006c8c <MX_USB_DEVICE_Init+0x5c>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f7fe fde0 	bl	8005800 <USBD_Init>
 8006c40:	1e03      	subs	r3, r0, #0
 8006c42:	d001      	beq.n	8006c48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c44:	f7f9 fea0 	bl	8000988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006c48:	4a11      	ldr	r2, [pc, #68]	; (8006c90 <MX_USB_DEVICE_Init+0x60>)
 8006c4a:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <MX_USB_DEVICE_Init+0x5c>)
 8006c4c:	0011      	movs	r1, r2
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7fe fe07 	bl	8005862 <USBD_RegisterClass>
 8006c54:	1e03      	subs	r3, r0, #0
 8006c56:	d001      	beq.n	8006c5c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006c58:	f7f9 fe96 	bl	8000988 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	; (8006c94 <MX_USB_DEVICE_Init+0x64>)
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <MX_USB_DEVICE_Init+0x5c>)
 8006c60:	0011      	movs	r1, r2
 8006c62:	0018      	movs	r0, r3
 8006c64:	f7fe fdb0 	bl	80057c8 <USBD_CUSTOM_HID_RegisterInterface>
 8006c68:	1e03      	subs	r3, r0, #0
 8006c6a:	d001      	beq.n	8006c70 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8006c6c:	f7f9 fe8c 	bl	8000988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <MX_USB_DEVICE_Init+0x5c>)
 8006c72:	0018      	movs	r0, r3
 8006c74:	f7fe fe16 	bl	80058a4 <USBD_Start>
 8006c78:	1e03      	subs	r3, r0, #0
 8006c7a:	d001      	beq.n	8006c80 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8006c7c:	f7f9 fe84 	bl	8000988 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c80:	46c0      	nop			; (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	20000114 	.word	0x20000114
 8006c8c:	200005cc 	.word	0x200005cc
 8006c90:	2000000c 	.word	0x2000000c
 8006c94:	20000104 	.word	0x20000104

08006c98 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006ca8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006caa:	0018      	movs	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	0002      	movs	r2, r0
 8006cb8:	1dfb      	adds	r3, r7, #7
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	1dbb      	adds	r3, r7, #6
 8006cbe:	1c0a      	adds	r2, r1, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */

	USB_Receive_Callback(event_idx, state);
 8006cc2:	1dbb      	adds	r3, r7, #6
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	1dfb      	adds	r3, r7, #7
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	0011      	movs	r1, r2
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f7f9 fc9d 	bl	800060c <USB_Receive_Callback>

	return (USBD_OK);
 8006cd2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b002      	add	sp, #8
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	0002      	movs	r2, r0
 8006ce4:	6039      	str	r1, [r7, #0]
 8006ce6:	1dfb      	adds	r3, r7, #7
 8006ce8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2212      	movs	r2, #18
 8006cee:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006cf0:	4b02      	ldr	r3, [pc, #8]	; (8006cfc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b002      	add	sp, #8
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	20000130 	.word	0x20000130

08006d00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	0002      	movs	r2, r0
 8006d08:	6039      	str	r1, [r7, #0]
 8006d0a:	1dfb      	adds	r3, r7, #7
 8006d0c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2204      	movs	r2, #4
 8006d12:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d16:	0018      	movs	r0, r3
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b002      	add	sp, #8
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	20000144 	.word	0x20000144

08006d24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	0002      	movs	r2, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	1dfb      	adds	r3, r7, #7
 8006d30:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006d32:	1dfb      	adds	r3, r7, #7
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	4908      	ldr	r1, [pc, #32]	; (8006d60 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <USBD_FS_ProductStrDescriptor+0x40>)
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7ff fe77 	bl	8006a34 <USBD_GetString>
 8006d46:	e005      	b.n	8006d54 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	4905      	ldr	r1, [pc, #20]	; (8006d60 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <USBD_FS_ProductStrDescriptor+0x40>)
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7ff fe70 	bl	8006a34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d54:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006d56:	0018      	movs	r0, r3
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b002      	add	sp, #8
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	20000890 	.word	0x20000890
 8006d64:	08007640 	.word	0x08007640

08006d68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	0002      	movs	r2, r0
 8006d70:	6039      	str	r1, [r7, #0]
 8006d72:	1dfb      	adds	r3, r7, #7
 8006d74:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	4904      	ldr	r1, [pc, #16]	; (8006d8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7ff fe59 	bl	8006a34 <USBD_GetString>
  return USBD_StrDesc;
 8006d82:	4b02      	ldr	r3, [pc, #8]	; (8006d8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006d84:	0018      	movs	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b002      	add	sp, #8
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000890 	.word	0x20000890
 8006d90:	08007650 	.word	0x08007650

08006d94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	0002      	movs	r2, r0
 8006d9c:	6039      	str	r1, [r7, #0]
 8006d9e:	1dfb      	adds	r3, r7, #7
 8006da0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	221a      	movs	r2, #26
 8006da6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006da8:	f000 f84c 	bl	8006e44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dac:	4b02      	ldr	r3, [pc, #8]	; (8006db8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8006dae:	0018      	movs	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b002      	add	sp, #8
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	20000148 	.word	0x20000148

08006dbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	0002      	movs	r2, r0
 8006dc4:	6039      	str	r1, [r7, #0]
 8006dc6:	1dfb      	adds	r3, r7, #7
 8006dc8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8006dca:	1dfb      	adds	r3, r7, #7
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	4908      	ldr	r1, [pc, #32]	; (8006df8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <USBD_FS_ConfigStrDescriptor+0x40>)
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f7ff fe2b 	bl	8006a34 <USBD_GetString>
 8006dde:	e005      	b.n	8006dec <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	4905      	ldr	r1, [pc, #20]	; (8006df8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <USBD_FS_ConfigStrDescriptor+0x40>)
 8006de6:	0018      	movs	r0, r3
 8006de8:	f7ff fe24 	bl	8006a34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dec:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8006dee:	0018      	movs	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b002      	add	sp, #8
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	46c0      	nop			; (mov r8, r8)
 8006df8:	20000890 	.word	0x20000890
 8006dfc:	08007658 	.word	0x08007658

08006e00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	0002      	movs	r2, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	1dfb      	adds	r3, r7, #7
 8006e0c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006e0e:	1dfb      	adds	r3, r7, #7
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	4908      	ldr	r1, [pc, #32]	; (8006e3c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006e1a:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f7ff fe09 	bl	8006a34 <USBD_GetString>
 8006e22:	e005      	b.n	8006e30 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	4905      	ldr	r1, [pc, #20]	; (8006e3c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f7ff fe02 	bl	8006a34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e30:	4b02      	ldr	r3, [pc, #8]	; (8006e3c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8006e32:	0018      	movs	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b002      	add	sp, #8
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	20000890 	.word	0x20000890
 8006e40:	0800766c 	.word	0x0800766c

08006e44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e4a:	4b10      	ldr	r3, [pc, #64]	; (8006e8c <Get_SerialNum+0x48>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e50:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <Get_SerialNum+0x4c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e56:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <Get_SerialNum+0x50>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	18d3      	adds	r3, r2, r3
 8006e62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e6a:	490b      	ldr	r1, [pc, #44]	; (8006e98 <Get_SerialNum+0x54>)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2208      	movs	r2, #8
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 f815 	bl	8006ea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e76:	4909      	ldr	r1, [pc, #36]	; (8006e9c <Get_SerialNum+0x58>)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f000 f80f 	bl	8006ea0 <IntToUnicode>
  }
}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	46bd      	mov	sp, r7
 8006e86:	b004      	add	sp, #16
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	1ffff7ac 	.word	0x1ffff7ac
 8006e90:	1ffff7b0 	.word	0x1ffff7b0
 8006e94:	1ffff7b4 	.word	0x1ffff7b4
 8006e98:	2000014a 	.word	0x2000014a
 8006e9c:	2000015a 	.word	0x2000015a

08006ea0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	1dfb      	adds	r3, r7, #7
 8006eac:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8006eae:	2117      	movs	r1, #23
 8006eb0:	187b      	adds	r3, r7, r1
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8006eb6:	187b      	adds	r3, r7, r1
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	e02f      	b.n	8006f1e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	0f1b      	lsrs	r3, r3, #28
 8006ec2:	2b09      	cmp	r3, #9
 8006ec4:	d80d      	bhi.n	8006ee2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	0f1b      	lsrs	r3, r3, #28
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	2317      	movs	r3, #23
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	0019      	movs	r1, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	185b      	adds	r3, r3, r1
 8006eda:	3230      	adds	r2, #48	; 0x30
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e00c      	b.n	8006efc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	0f1b      	lsrs	r3, r3, #28
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	2317      	movs	r3, #23
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	185b      	adds	r3, r3, r1
 8006ef6:	3237      	adds	r2, #55	; 0x37
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f02:	2117      	movs	r1, #23
 8006f04:	187b      	adds	r3, r7, r1
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	18d3      	adds	r3, r2, r3
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f14:	187b      	adds	r3, r7, r1
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	187b      	adds	r3, r7, r1
 8006f1a:	3201      	adds	r2, #1
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	2317      	movs	r3, #23
 8006f20:	18fa      	adds	r2, r7, r3
 8006f22:	1dfb      	adds	r3, r7, #7
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d3c8      	bcc.n	8006ebe <IntToUnicode+0x1e>
  }
}
 8006f2c:	46c0      	nop			; (mov r8, r8)
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b006      	add	sp, #24
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a0e      	ldr	r2, [pc, #56]	; (8006f7c <HAL_PCD_MspInit+0x48>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d115      	bne.n	8006f72 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006f46:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <HAL_PCD_MspInit+0x4c>)
 8006f48:	69da      	ldr	r2, [r3, #28]
 8006f4a:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <HAL_PCD_MspInit+0x4c>)
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	0409      	lsls	r1, r1, #16
 8006f50:	430a      	orrs	r2, r1
 8006f52:	61da      	str	r2, [r3, #28]
 8006f54:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <HAL_PCD_MspInit+0x4c>)
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	2380      	movs	r3, #128	; 0x80
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 1, 0);
 8006f62:	2200      	movs	r2, #0
 8006f64:	2101      	movs	r1, #1
 8006f66:	201f      	movs	r0, #31
 8006f68:	f7fa fcd2 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006f6c:	201f      	movs	r0, #31
 8006f6e:	f7fa fce4 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b004      	add	sp, #16
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	40005c00 	.word	0x40005c00
 8006f80:	40021000 	.word	0x40021000

08006f84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	239c      	movs	r3, #156	; 0x9c
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	58d2      	ldr	r2, [r2, r3]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	218c      	movs	r1, #140	; 0x8c
 8006f98:	0089      	lsls	r1, r1, #2
 8006f9a:	468c      	mov	ip, r1
 8006f9c:	4463      	add	r3, ip
 8006f9e:	0019      	movs	r1, r3
 8006fa0:	0010      	movs	r0, r2
 8006fa2:	f7fe fcd3 	bl	800594c <USBD_LL_SetupStage>
}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b002      	add	sp, #8
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	000a      	movs	r2, r1
 8006fb8:	1cfb      	adds	r3, r7, #3
 8006fba:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	239c      	movs	r3, #156	; 0x9c
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	58d0      	ldr	r0, [r2, r3]
 8006fc4:	1cfb      	adds	r3, r7, #3
 8006fc6:	781a      	ldrb	r2, [r3, #0]
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	239e      	movs	r3, #158	; 0x9e
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	0152      	lsls	r2, r2, #5
 8006fd0:	188a      	adds	r2, r1, r2
 8006fd2:	18d3      	adds	r3, r2, r3
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	1cfb      	adds	r3, r7, #3
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	0019      	movs	r1, r3
 8006fdc:	f7fe fd12 	bl	8005a04 <USBD_LL_DataOutStage>
}
 8006fe0:	46c0      	nop			; (mov r8, r8)
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b002      	add	sp, #8
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	000a      	movs	r2, r1
 8006ff2:	1cfb      	adds	r3, r7, #3
 8006ff4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	239c      	movs	r3, #156	; 0x9c
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	58d0      	ldr	r0, [r2, r3]
 8006ffe:	1cfb      	adds	r3, r7, #3
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	015b      	lsls	r3, r3, #5
 8007006:	18d3      	adds	r3, r2, r3
 8007008:	333c      	adds	r3, #60	; 0x3c
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	1cfb      	adds	r3, r7, #3
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	0019      	movs	r1, r3
 8007012:	f7fe fd79 	bl	8005b08 <USBD_LL_DataInStage>
}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	46bd      	mov	sp, r7
 800701a:	b002      	add	sp, #8
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	239c      	movs	r3, #156	; 0x9c
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	58d3      	ldr	r3, [r2, r3]
 800702e:	0018      	movs	r0, r3
 8007030:	f7fe feb0 	bl	8005d94 <USBD_LL_SOF>
}
 8007034:	46c0      	nop			; (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	b002      	add	sp, #8
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007044:	230f      	movs	r3, #15
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	2201      	movs	r2, #1
 800704a:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d001      	beq.n	8007058 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007054:	f7f9 fc98 	bl	8000988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	239c      	movs	r3, #156	; 0x9c
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	58d2      	ldr	r2, [r2, r3]
 8007060:	230f      	movs	r3, #15
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	0019      	movs	r1, r3
 8007068:	0010      	movs	r0, r2
 800706a:	f7fe fe52 	bl	8005d12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	239c      	movs	r3, #156	; 0x9c
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	58d3      	ldr	r3, [r2, r3]
 8007076:	0018      	movs	r0, r3
 8007078:	f7fe fe03 	bl	8005c82 <USBD_LL_Reset>
}
 800707c:	46c0      	nop			; (mov r8, r8)
 800707e:	46bd      	mov	sp, r7
 8007080:	b004      	add	sp, #16
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	239c      	movs	r3, #156	; 0x9c
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	58d3      	ldr	r3, [r2, r3]
 8007094:	0018      	movs	r0, r3
 8007096:	f7fe fe4d 	bl	8005d34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070a2:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <HAL_PCD_SuspendCallback+0x34>)
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	4b04      	ldr	r3, [pc, #16]	; (80070b8 <HAL_PCD_SuspendCallback+0x34>)
 80070a8:	2106      	movs	r1, #6
 80070aa:	430a      	orrs	r2, r1
 80070ac:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80070ae:	46c0      	nop			; (mov r8, r8)
 80070b0:	46bd      	mov	sp, r7
 80070b2:	b002      	add	sp, #8
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	e000ed00 	.word	0xe000ed00

080070bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070cc:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <HAL_PCD_ResumeCallback+0x38>)
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <HAL_PCD_ResumeCallback+0x38>)
 80070d2:	2106      	movs	r1, #6
 80070d4:	438a      	bics	r2, r1
 80070d6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80070d8:	f000 fa22 	bl	8007520 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	239c      	movs	r3, #156	; 0x9c
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	58d3      	ldr	r3, [r2, r3]
 80070e4:	0018      	movs	r0, r3
 80070e6:	f7fe fe3d 	bl	8005d64 <USBD_LL_Resume>
}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b002      	add	sp, #8
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	e000ed00 	.word	0xe000ed00

080070f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007100:	4a27      	ldr	r2, [pc, #156]	; (80071a0 <USBD_LL_Init+0xa8>)
 8007102:	239c      	movs	r3, #156	; 0x9c
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	23b0      	movs	r3, #176	; 0xb0
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4923      	ldr	r1, [pc, #140]	; (80071a0 <USBD_LL_Init+0xa8>)
 8007112:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007114:	4b22      	ldr	r3, [pc, #136]	; (80071a0 <USBD_LL_Init+0xa8>)
 8007116:	4a23      	ldr	r2, [pc, #140]	; (80071a4 <USBD_LL_Init+0xac>)
 8007118:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800711a:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <USBD_LL_Init+0xa8>)
 800711c:	2208      	movs	r2, #8
 800711e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007120:	4b1f      	ldr	r3, [pc, #124]	; (80071a0 <USBD_LL_Init+0xa8>)
 8007122:	2202      	movs	r2, #2
 8007124:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007126:	4b1e      	ldr	r3, [pc, #120]	; (80071a0 <USBD_LL_Init+0xa8>)
 8007128:	2202      	movs	r2, #2
 800712a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800712c:	4b1c      	ldr	r3, [pc, #112]	; (80071a0 <USBD_LL_Init+0xa8>)
 800712e:	2200      	movs	r2, #0
 8007130:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007132:	4b1b      	ldr	r3, [pc, #108]	; (80071a0 <USBD_LL_Init+0xa8>)
 8007134:	2200      	movs	r2, #0
 8007136:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007138:	4b19      	ldr	r3, [pc, #100]	; (80071a0 <USBD_LL_Init+0xa8>)
 800713a:	2200      	movs	r2, #0
 800713c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800713e:	4b18      	ldr	r3, [pc, #96]	; (80071a0 <USBD_LL_Init+0xa8>)
 8007140:	0018      	movs	r0, r3
 8007142:	f7fa fdc7 	bl	8001cd4 <HAL_PCD_Init>
 8007146:	1e03      	subs	r3, r0, #0
 8007148:	d001      	beq.n	800714e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800714a:	f7f9 fc1d 	bl	8000988 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	23b0      	movs	r3, #176	; 0xb0
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	58d0      	ldr	r0, [r2, r3]
 8007156:	2318      	movs	r3, #24
 8007158:	2200      	movs	r2, #0
 800715a:	2100      	movs	r1, #0
 800715c:	f7fb fd48 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	23b0      	movs	r3, #176	; 0xb0
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	58d0      	ldr	r0, [r2, r3]
 8007168:	2358      	movs	r3, #88	; 0x58
 800716a:	2200      	movs	r2, #0
 800716c:	2180      	movs	r1, #128	; 0x80
 800716e:	f7fb fd3f 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	23b0      	movs	r3, #176	; 0xb0
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	58d0      	ldr	r0, [r2, r3]
 800717a:	2398      	movs	r3, #152	; 0x98
 800717c:	2200      	movs	r2, #0
 800717e:	2181      	movs	r1, #129	; 0x81
 8007180:	f7fb fd36 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	23b0      	movs	r3, #176	; 0xb0
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	58d0      	ldr	r0, [r2, r3]
 800718c:	23d8      	movs	r3, #216	; 0xd8
 800718e:	2200      	movs	r2, #0
 8007190:	2101      	movs	r1, #1
 8007192:	f7fb fd2d 	bl	8002bf0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b002      	add	sp, #8
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000a90 	.word	0x20000a90
 80071a4:	40005c00 	.word	0x40005c00

080071a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b0:	210f      	movs	r1, #15
 80071b2:	187b      	adds	r3, r7, r1
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b8:	260e      	movs	r6, #14
 80071ba:	19bb      	adds	r3, r7, r6
 80071bc:	2200      	movs	r2, #0
 80071be:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	23b0      	movs	r3, #176	; 0xb0
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	58d3      	ldr	r3, [r2, r3]
 80071c8:	000d      	movs	r5, r1
 80071ca:	187c      	adds	r4, r7, r1
 80071cc:	0018      	movs	r0, r3
 80071ce:	f7fa fe65 	bl	8001e9c <HAL_PCD_Start>
 80071d2:	0003      	movs	r3, r0
 80071d4:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071d6:	19bc      	adds	r4, r7, r6
 80071d8:	0029      	movs	r1, r5
 80071da:	187b      	adds	r3, r7, r1
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	0018      	movs	r0, r3
 80071e0:	f000 f9a5 	bl	800752e <USBD_Get_USB_Status>
 80071e4:	0003      	movs	r3, r0
 80071e6:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 80071e8:	19bb      	adds	r3, r7, r6
 80071ea:	781b      	ldrb	r3, [r3, #0]
}
 80071ec:	0018      	movs	r0, r3
 80071ee:	46bd      	mov	sp, r7
 80071f0:	b005      	add	sp, #20
 80071f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	000c      	movs	r4, r1
 80071fe:	0010      	movs	r0, r2
 8007200:	0019      	movs	r1, r3
 8007202:	1cfb      	adds	r3, r7, #3
 8007204:	1c22      	adds	r2, r4, #0
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	1cbb      	adds	r3, r7, #2
 800720a:	1c02      	adds	r2, r0, #0
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	003b      	movs	r3, r7
 8007210:	1c0a      	adds	r2, r1, #0
 8007212:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007214:	260f      	movs	r6, #15
 8007216:	19bb      	adds	r3, r7, r6
 8007218:	2200      	movs	r2, #0
 800721a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800721c:	250e      	movs	r5, #14
 800721e:	197b      	adds	r3, r7, r5
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	23b0      	movs	r3, #176	; 0xb0
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	58d0      	ldr	r0, [r2, r3]
 800722c:	19bc      	adds	r4, r7, r6
 800722e:	1cbb      	adds	r3, r7, #2
 8007230:	781d      	ldrb	r5, [r3, #0]
 8007232:	003b      	movs	r3, r7
 8007234:	881a      	ldrh	r2, [r3, #0]
 8007236:	1cfb      	adds	r3, r7, #3
 8007238:	7819      	ldrb	r1, [r3, #0]
 800723a:	002b      	movs	r3, r5
 800723c:	f7fb f807 	bl	800224e <HAL_PCD_EP_Open>
 8007240:	0003      	movs	r3, r0
 8007242:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007244:	250e      	movs	r5, #14
 8007246:	197c      	adds	r4, r7, r5
 8007248:	19bb      	adds	r3, r7, r6
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	0018      	movs	r0, r3
 800724e:	f000 f96e 	bl	800752e <USBD_Get_USB_Status>
 8007252:	0003      	movs	r3, r0
 8007254:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 8007256:	197b      	adds	r3, r7, r5
 8007258:	781b      	ldrb	r3, [r3, #0]
}
 800725a:	0018      	movs	r0, r3
 800725c:	46bd      	mov	sp, r7
 800725e:	b005      	add	sp, #20
 8007260:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007262 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	000a      	movs	r2, r1
 800726c:	1cfb      	adds	r3, r7, #3
 800726e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007270:	210f      	movs	r1, #15
 8007272:	187b      	adds	r3, r7, r1
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007278:	260e      	movs	r6, #14
 800727a:	19bb      	adds	r3, r7, r6
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	23b0      	movs	r3, #176	; 0xb0
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	58d2      	ldr	r2, [r2, r3]
 8007288:	000d      	movs	r5, r1
 800728a:	187c      	adds	r4, r7, r1
 800728c:	1cfb      	adds	r3, r7, #3
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	0019      	movs	r1, r3
 8007292:	0010      	movs	r0, r2
 8007294:	f7fb f84d 	bl	8002332 <HAL_PCD_EP_Close>
 8007298:	0003      	movs	r3, r0
 800729a:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800729c:	19bc      	adds	r4, r7, r6
 800729e:	0029      	movs	r1, r5
 80072a0:	187b      	adds	r3, r7, r1
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	0018      	movs	r0, r3
 80072a6:	f000 f942 	bl	800752e <USBD_Get_USB_Status>
 80072aa:	0003      	movs	r3, r0
 80072ac:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 80072ae:	19bb      	adds	r3, r7, r6
 80072b0:	781b      	ldrb	r3, [r3, #0]
}
 80072b2:	0018      	movs	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b005      	add	sp, #20
 80072b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072ba <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	000a      	movs	r2, r1
 80072c4:	1cfb      	adds	r3, r7, #3
 80072c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c8:	210f      	movs	r1, #15
 80072ca:	187b      	adds	r3, r7, r1
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d0:	260e      	movs	r6, #14
 80072d2:	19bb      	adds	r3, r7, r6
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	23b0      	movs	r3, #176	; 0xb0
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	58d2      	ldr	r2, [r2, r3]
 80072e0:	000d      	movs	r5, r1
 80072e2:	187c      	adds	r4, r7, r1
 80072e4:	1cfb      	adds	r3, r7, #3
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	0019      	movs	r1, r3
 80072ea:	0010      	movs	r0, r2
 80072ec:	f7fb f8ed 	bl	80024ca <HAL_PCD_EP_SetStall>
 80072f0:	0003      	movs	r3, r0
 80072f2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072f4:	19bc      	adds	r4, r7, r6
 80072f6:	0029      	movs	r1, r5
 80072f8:	187b      	adds	r3, r7, r1
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	0018      	movs	r0, r3
 80072fe:	f000 f916 	bl	800752e <USBD_Get_USB_Status>
 8007302:	0003      	movs	r3, r0
 8007304:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8007306:	19bb      	adds	r3, r7, r6
 8007308:	781b      	ldrb	r3, [r3, #0]
}
 800730a:	0018      	movs	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	b005      	add	sp, #20
 8007310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007312 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	000a      	movs	r2, r1
 800731c:	1cfb      	adds	r3, r7, #3
 800731e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007320:	210f      	movs	r1, #15
 8007322:	187b      	adds	r3, r7, r1
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007328:	260e      	movs	r6, #14
 800732a:	19bb      	adds	r3, r7, r6
 800732c:	2200      	movs	r2, #0
 800732e:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	23b0      	movs	r3, #176	; 0xb0
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	58d2      	ldr	r2, [r2, r3]
 8007338:	000d      	movs	r5, r1
 800733a:	187c      	adds	r4, r7, r1
 800733c:	1cfb      	adds	r3, r7, #3
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	0019      	movs	r1, r3
 8007342:	0010      	movs	r0, r2
 8007344:	f7fb f927 	bl	8002596 <HAL_PCD_EP_ClrStall>
 8007348:	0003      	movs	r3, r0
 800734a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800734c:	19bc      	adds	r4, r7, r6
 800734e:	0029      	movs	r1, r5
 8007350:	187b      	adds	r3, r7, r1
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	0018      	movs	r0, r3
 8007356:	f000 f8ea 	bl	800752e <USBD_Get_USB_Status>
 800735a:	0003      	movs	r3, r0
 800735c:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 800735e:	19bb      	adds	r3, r7, r6
 8007360:	781b      	ldrb	r3, [r3, #0]
}
 8007362:	0018      	movs	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	b005      	add	sp, #20
 8007368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800736a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	000a      	movs	r2, r1
 8007374:	1cfb      	adds	r3, r7, #3
 8007376:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	23b0      	movs	r3, #176	; 0xb0
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	58d3      	ldr	r3, [r2, r3]
 8007380:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007382:	1cfb      	adds	r3, r7, #3
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	b25b      	sxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	da0a      	bge.n	80073a2 <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800738c:	1cfb      	adds	r3, r7, #3
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	227f      	movs	r2, #127	; 0x7f
 8007392:	4013      	ands	r3, r2
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	212a      	movs	r1, #42	; 0x2a
 8007398:	015b      	lsls	r3, r3, #5
 800739a:	18d3      	adds	r3, r2, r3
 800739c:	185b      	adds	r3, r3, r1
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	e00a      	b.n	80073b8 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80073a2:	1cfb      	adds	r3, r7, #3
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	227f      	movs	r2, #127	; 0x7f
 80073a8:	401a      	ands	r2, r3
 80073aa:	68f9      	ldr	r1, [r7, #12]
 80073ac:	2395      	movs	r3, #149	; 0x95
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	0152      	lsls	r2, r2, #5
 80073b2:	188a      	adds	r2, r1, r2
 80073b4:	18d3      	adds	r3, r2, r3
 80073b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b004      	add	sp, #16
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	000a      	movs	r2, r1
 80073ca:	1cfb      	adds	r3, r7, #3
 80073cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ce:	210f      	movs	r1, #15
 80073d0:	187b      	adds	r3, r7, r1
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d6:	260e      	movs	r6, #14
 80073d8:	19bb      	adds	r3, r7, r6
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	23b0      	movs	r3, #176	; 0xb0
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	58d2      	ldr	r2, [r2, r3]
 80073e6:	000d      	movs	r5, r1
 80073e8:	187c      	adds	r4, r7, r1
 80073ea:	1cfb      	adds	r3, r7, #3
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	0019      	movs	r1, r3
 80073f0:	0010      	movs	r0, r2
 80073f2:	f7fa ff01 	bl	80021f8 <HAL_PCD_SetAddress>
 80073f6:	0003      	movs	r3, r0
 80073f8:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80073fa:	19bc      	adds	r4, r7, r6
 80073fc:	0029      	movs	r1, r5
 80073fe:	187b      	adds	r3, r7, r1
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	0018      	movs	r0, r3
 8007404:	f000 f893 	bl	800752e <USBD_Get_USB_Status>
 8007408:	0003      	movs	r3, r0
 800740a:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 800740c:	19bb      	adds	r3, r7, r6
 800740e:	781b      	ldrb	r3, [r3, #0]
}
 8007410:	0018      	movs	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	b005      	add	sp, #20
 8007416:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007418 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	0008      	movs	r0, r1
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	0019      	movs	r1, r3
 8007426:	230b      	movs	r3, #11
 8007428:	18fb      	adds	r3, r7, r3
 800742a:	1c02      	adds	r2, r0, #0
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	2408      	movs	r4, #8
 8007430:	193b      	adds	r3, r7, r4
 8007432:	1c0a      	adds	r2, r1, #0
 8007434:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007436:	2117      	movs	r1, #23
 8007438:	187b      	adds	r3, r7, r1
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743e:	2516      	movs	r5, #22
 8007440:	197b      	adds	r3, r7, r5
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	23b0      	movs	r3, #176	; 0xb0
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	58d0      	ldr	r0, [r2, r3]
 800744e:	193b      	adds	r3, r7, r4
 8007450:	881d      	ldrh	r5, [r3, #0]
 8007452:	000e      	movs	r6, r1
 8007454:	187c      	adds	r4, r7, r1
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	230b      	movs	r3, #11
 800745a:	18fb      	adds	r3, r7, r3
 800745c:	7819      	ldrb	r1, [r3, #0]
 800745e:	002b      	movs	r3, r5
 8007460:	f7fa fff3 	bl	800244a <HAL_PCD_EP_Transmit>
 8007464:	0003      	movs	r3, r0
 8007466:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007468:	2516      	movs	r5, #22
 800746a:	197c      	adds	r4, r7, r5
 800746c:	0031      	movs	r1, r6
 800746e:	187b      	adds	r3, r7, r1
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	0018      	movs	r0, r3
 8007474:	f000 f85b 	bl	800752e <USBD_Get_USB_Status>
 8007478:	0003      	movs	r3, r0
 800747a:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 800747c:	197b      	adds	r3, r7, r5
 800747e:	781b      	ldrb	r3, [r3, #0]
}
 8007480:	0018      	movs	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	b007      	add	sp, #28
 8007486:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007488 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	0008      	movs	r0, r1
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	0019      	movs	r1, r3
 8007496:	230b      	movs	r3, #11
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	1c02      	adds	r2, r0, #0
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	2408      	movs	r4, #8
 80074a0:	193b      	adds	r3, r7, r4
 80074a2:	1c0a      	adds	r2, r1, #0
 80074a4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a6:	2117      	movs	r1, #23
 80074a8:	187b      	adds	r3, r7, r1
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ae:	2516      	movs	r5, #22
 80074b0:	197b      	adds	r3, r7, r5
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	23b0      	movs	r3, #176	; 0xb0
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	58d0      	ldr	r0, [r2, r3]
 80074be:	193b      	adds	r3, r7, r4
 80074c0:	881d      	ldrh	r5, [r3, #0]
 80074c2:	000e      	movs	r6, r1
 80074c4:	187c      	adds	r4, r7, r1
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	230b      	movs	r3, #11
 80074ca:	18fb      	adds	r3, r7, r3
 80074cc:	7819      	ldrb	r1, [r3, #0]
 80074ce:	002b      	movs	r3, r5
 80074d0:	f7fa ff7a 	bl	80023c8 <HAL_PCD_EP_Receive>
 80074d4:	0003      	movs	r3, r0
 80074d6:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80074d8:	2516      	movs	r5, #22
 80074da:	197c      	adds	r4, r7, r5
 80074dc:	0031      	movs	r1, r6
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	0018      	movs	r0, r3
 80074e4:	f000 f823 	bl	800752e <USBD_Get_USB_Status>
 80074e8:	0003      	movs	r3, r0
 80074ea:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 80074ec:	197b      	adds	r3, r7, r5
 80074ee:	781b      	ldrb	r3, [r3, #0]
}
 80074f0:	0018      	movs	r0, r3
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b007      	add	sp, #28
 80074f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007500:	4b02      	ldr	r3, [pc, #8]	; (800750c <USBD_static_malloc+0x14>)
}
 8007502:	0018      	movs	r0, r3
 8007504:	46bd      	mov	sp, r7
 8007506:	b002      	add	sp, #8
 8007508:	bd80      	pop	{r7, pc}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	20000214 	.word	0x20000214

08007510 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]

}
 8007518:	46c0      	nop			; (mov r8, r8)
 800751a:	46bd      	mov	sp, r7
 800751c:	b002      	add	sp, #8
 800751e:	bd80      	pop	{r7, pc}

08007520 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007524:	f7f9 f8de 	bl	80006e4 <SystemClock_Config>
}
 8007528:	46c0      	nop			; (mov r8, r8)
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	0002      	movs	r2, r0
 8007536:	1dfb      	adds	r3, r7, #7
 8007538:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800753a:	230f      	movs	r3, #15
 800753c:	18fb      	adds	r3, r7, r3
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007542:	1dfb      	adds	r3, r7, #7
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d00d      	beq.n	8007566 <USBD_Get_USB_Status+0x38>
 800754a:	dc02      	bgt.n	8007552 <USBD_Get_USB_Status+0x24>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <USBD_Get_USB_Status+0x2e>
 8007550:	e018      	b.n	8007584 <USBD_Get_USB_Status+0x56>
 8007552:	2b02      	cmp	r3, #2
 8007554:	d00c      	beq.n	8007570 <USBD_Get_USB_Status+0x42>
 8007556:	2b03      	cmp	r3, #3
 8007558:	d00f      	beq.n	800757a <USBD_Get_USB_Status+0x4c>
 800755a:	e013      	b.n	8007584 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800755c:	230f      	movs	r3, #15
 800755e:	18fb      	adds	r3, r7, r3
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]
    break;
 8007564:	e013      	b.n	800758e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007566:	230f      	movs	r3, #15
 8007568:	18fb      	adds	r3, r7, r3
 800756a:	2202      	movs	r2, #2
 800756c:	701a      	strb	r2, [r3, #0]
    break;
 800756e:	e00e      	b.n	800758e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007570:	230f      	movs	r3, #15
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	2201      	movs	r2, #1
 8007576:	701a      	strb	r2, [r3, #0]
    break;
 8007578:	e009      	b.n	800758e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800757a:	230f      	movs	r3, #15
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	2202      	movs	r2, #2
 8007580:	701a      	strb	r2, [r3, #0]
    break;
 8007582:	e004      	b.n	800758e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007584:	230f      	movs	r3, #15
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	2202      	movs	r2, #2
 800758a:	701a      	strb	r2, [r3, #0]
    break;
 800758c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800758e:	230f      	movs	r3, #15
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	781b      	ldrb	r3, [r3, #0]
}
 8007594:	0018      	movs	r0, r3
 8007596:	46bd      	mov	sp, r7
 8007598:	b004      	add	sp, #16
 800759a:	bd80      	pop	{r7, pc}

0800759c <__libc_init_array>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	2600      	movs	r6, #0
 80075a0:	4d0c      	ldr	r5, [pc, #48]	; (80075d4 <__libc_init_array+0x38>)
 80075a2:	4c0d      	ldr	r4, [pc, #52]	; (80075d8 <__libc_init_array+0x3c>)
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	42a6      	cmp	r6, r4
 80075aa:	d109      	bne.n	80075c0 <__libc_init_array+0x24>
 80075ac:	2600      	movs	r6, #0
 80075ae:	f000 f82b 	bl	8007608 <_init>
 80075b2:	4d0a      	ldr	r5, [pc, #40]	; (80075dc <__libc_init_array+0x40>)
 80075b4:	4c0a      	ldr	r4, [pc, #40]	; (80075e0 <__libc_init_array+0x44>)
 80075b6:	1b64      	subs	r4, r4, r5
 80075b8:	10a4      	asrs	r4, r4, #2
 80075ba:	42a6      	cmp	r6, r4
 80075bc:	d105      	bne.n	80075ca <__libc_init_array+0x2e>
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	00b3      	lsls	r3, r6, #2
 80075c2:	58eb      	ldr	r3, [r5, r3]
 80075c4:	4798      	blx	r3
 80075c6:	3601      	adds	r6, #1
 80075c8:	e7ee      	b.n	80075a8 <__libc_init_array+0xc>
 80075ca:	00b3      	lsls	r3, r6, #2
 80075cc:	58eb      	ldr	r3, [r5, r3]
 80075ce:	4798      	blx	r3
 80075d0:	3601      	adds	r6, #1
 80075d2:	e7f2      	b.n	80075ba <__libc_init_array+0x1e>
 80075d4:	08007724 	.word	0x08007724
 80075d8:	08007724 	.word	0x08007724
 80075dc:	08007724 	.word	0x08007724
 80075e0:	08007728 	.word	0x08007728

080075e4 <memcpy>:
 80075e4:	2300      	movs	r3, #0
 80075e6:	b510      	push	{r4, lr}
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d100      	bne.n	80075ee <memcpy+0xa>
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	5ccc      	ldrb	r4, [r1, r3]
 80075f0:	54c4      	strb	r4, [r0, r3]
 80075f2:	3301      	adds	r3, #1
 80075f4:	e7f8      	b.n	80075e8 <memcpy+0x4>

080075f6 <memset>:
 80075f6:	0003      	movs	r3, r0
 80075f8:	1812      	adds	r2, r2, r0
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d100      	bne.n	8007600 <memset+0xa>
 80075fe:	4770      	bx	lr
 8007600:	7019      	strb	r1, [r3, #0]
 8007602:	3301      	adds	r3, #1
 8007604:	e7f9      	b.n	80075fa <memset+0x4>
	...

08007608 <_init>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr

08007614 <_fini>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr
